<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Ha.Minh's Blog</title><link href="http://minhhh.github.io/" rel="alternate"></link><link href="http://minhhh.github.io/feeds/programming.atom.xml" rel="self"></link><id>http://minhhh.github.io/</id><updated>2017-07-25T00:00:00-04:00</updated><entry><title>Test</title><link href="http://minhhh.github.io/posts/test" rel="alternate"></link><published>2017-07-25T00:00:00-04:00</published><updated>2017-07-25T00:00:00-04:00</updated><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2017-07-25:posts/test</id><summary type="html"></summary><category term="test"></category></entry><entry><title>Best Practices in Persisting Player Data on Mobile</title><link href="http://minhhh.github.io/posts/best-practices-in-persisting-player-data-on-mobile" rel="alternate"></link><published>2017-02-01T00:00:00-05:00</published><updated>2017-02-01T00:00:00-05:00</updated><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2017-02-01:posts/best-practices-in-persisting-player-data-on-mobile</id><summary type="html">&lt;p&gt;Original talk: &lt;a href="https://www.youtube.com/watch?v=_hAzWgQupms"&gt;Unite 2016 - Best Practices in Persisting Player Data on Mobile&lt;/a&gt;&lt;/p&gt;</summary><category term="unity"></category></entry><entry><title>Git branching strategy</title><link href="http://minhhh.github.io/posts/git-branching-strategy" rel="alternate"></link><published>2017-01-09T00:00:00-05:00</published><updated>2017-01-09T00:00:00-05:00</updated><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2017-01-09:posts/git-branching-strategy</id><summary type="html">&lt;p&gt;Branching strategy is an important part of using git correctly. Without a proper branching strategy, even with a few people in the project, you will create a mess in no time. Below is a simple branching strategy that can be applied to various situation. It is also available on github &lt;a href="https://github.com/minhhh/git-manual/blob/master/branching_strategy.md"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Branch Description&lt;/h2&gt;
&lt;h3&gt;master&lt;/h3&gt;
&lt;p&gt;Master branch represents what's in live. It should not be modified directly.&lt;/p&gt;
&lt;p&gt;When it is deployed, it will be tagged so that we can revert to a certain deployment later.&lt;/p&gt;
&lt;p&gt;Lifetime: forever&lt;/p&gt;
&lt;h3&gt;release/xxx&lt;/h3&gt;
&lt;p&gt;After finishing a feature, make a release branch off the develop branch, merge all the necessary feature branches and do final test. Bugs found in this final QA phases can also be hotfixed in the same branch. After everything is complete, we will rebase this branch over &lt;code&gt;develop&lt;/code&gt; branch, then the rebase branch will be merged into the &lt;code&gt;master&lt;/code&gt; branch for release in Live environment.&lt;/p&gt;
&lt;p&gt;Lifetime: Feature Finish ~ Release in Live&lt;/p&gt;
&lt;h3&gt;hotfix/xxx&lt;/h3&gt;
&lt;p&gt;If a bug is found in production, we wil branch hotfix branch off master.&lt;/p&gt;
&lt;p&gt;Lifetime: Bugfix ~ Release in Live&lt;/p&gt;
&lt;h3&gt;develop&lt;/h3&gt;
&lt;p&gt;This is the main branch where feature branches should be branched off. Trivial changes can be directly applied to develop if you are sure it should go into the next version. Major feature/bugfix branches have to go through PR process to be merged into develop.&lt;/p&gt;
&lt;p&gt;Lifetime: forever&lt;/p&gt;
&lt;h3&gt;feature/xxx&lt;/h3&gt;
&lt;p&gt;Feature branch should be branched off develop. While working on feature branches, developers can choose to merge develop into it. Once QA is completed on the feature branch, developers can send PR.&lt;/p&gt;
&lt;p&gt;Lifetime: Feature development ~ PR merge&lt;/p&gt;
&lt;h3&gt;art&lt;/h3&gt;
&lt;p&gt;Art branch lives forever. Artists only need to deal with this branch.&lt;/p&gt;
&lt;p&gt;Lifetime: forever&lt;/p&gt;
&lt;h2&gt;Role Descriptions&lt;/h2&gt;
&lt;h3&gt;Engineer / UIDesigner&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;develop -&amp;gt; feature&lt;/li&gt;
&lt;li&gt;feature -&amp;gt; develop (PR)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Artist&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;art -&amp;gt; art&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Lead Engineer&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;develop -&amp;gt; release&lt;/li&gt;
&lt;li&gt;release -&amp;gt; develop&lt;/li&gt;
&lt;li&gt;master -&amp;gt; hotfix&lt;/li&gt;
&lt;li&gt;hotfix -&amp;gt; master&lt;/li&gt;
&lt;li&gt;hotfix -&amp;gt; develop&lt;/li&gt;
&lt;/ul&gt;</summary><category term="git"></category></entry><entry><title>Understanding Reactive</title><link href="http://minhhh.github.io/posts/understanding-reactive" rel="alternate"></link><published>2016-12-04T00:00:00-05:00</published><updated>2016-12-04T00:00:00-05:00</updated><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2016-12-04:posts/understanding-reactive</id><summary type="html">&lt;h2&gt;Reactive tutorials and manual&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="https://gist.github.com/staltz/868e7e9bc2a7b8c1f754"&gt;The introduction to Reactive Programming you've been missing&lt;/a&gt;&lt;/strong&gt; Best introduction tutorial to Reactive Programming&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="http://www.introtorx.com/"&gt;Introduction to Rx&lt;/a&gt;&lt;/strong&gt; This book aims to teach you:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;about the new types that Rx will provide&lt;/li&gt;
&lt;li&gt;about the extension methods and how to use them&lt;/li&gt;
&lt;li&gt;how to manage subscriptions to "sequences" of data&lt;/li&gt;
&lt;li&gt;how to visualize "sequences" of data and sketch your solution before coding it&lt;/li&gt;
&lt;li&gt;how to deal with concurrency to your advantage and avoid common pitfalls&lt;/li&gt;
&lt;li&gt;how to compose, aggregate and transform streams&lt;/li&gt;
&lt;li&gt;how to test your Rx code&lt;/li&gt;
&lt;li&gt;some guidance on best practices when using Rx.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="http://reactivex.io/intro.html"&gt;ReactiveX&lt;/a&gt;&lt;/strong&gt; The home of ReactiveX. Introduction, All operators are illustrated with graphical marble diagrams, there makes easy to understand&lt;/p&gt;
&lt;h2&gt;Reactive Design Patterns&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="http://www.slideshare.net/ZalandoTech/reactive-design-patterns-a-talk-by-typesafes-dr-roland-kuhn"&gt;Reactive Design Patterns&lt;/a&gt;&lt;/strong&gt; by Dr. Roland Kuhn: leader of Typesafeâ€™s Akka project, and coauthor of the book Reactive Design Patterns and the Reactive Manifesto. Roland highlighted the importance of making reactive software: of considering responsiveness, maintainability, elasticity and scalability from the outset of development. He explored several architecture elements that are commonly found in reactive systems, such as the circuit breaker, various replication techniques, and flow control protocols. These patterns are language-agnostic and also independent of the abundant choice of reactive programming frameworks and libraries.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="https://www.lightbend.com/resources/e-book/reactive-design-patterns"&gt;Reactive Design Patterns&lt;/a&gt;&lt;/strong&gt; by Roland Kuhn and Jamie Allen&lt;/p&gt;
&lt;h2&gt;Reactive usecases&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="http://blog.flowdock.com/2013/01/22/functional-reactive-programming-with-bacon-js/"&gt;Bacon.js&lt;/a&gt;&lt;/strong&gt; introduces FRP concepts and benefits with Bacon.js, an FRP library for both browsers and server-side JS&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="https://www.youtube.com/watch?v=mS264h8KGwk"&gt;Immutability, interactivity &amp;amp; JavaScript&lt;/a&gt;&lt;/strong&gt; Surprisingly the high performance mutation available in modern JavaScript engines is a great foundation for building high performance immutable collections. Even more surprisingly efficient immutable collections permit new ways of approaching user interface programming. While the details will be in Om, an immutable user interface toolkit written in ClojureScript over Facebook's React, the talk will be primarily focused on high level concepts easily ported to JavaScript. We'll dive in and see how trees of JavaScript arrays can permit building these efficient immutable collections. Then we'll see how embracing immutable values dramatically simplifies some classic hard problems in client side programming including but not limited to undo, error playback, and online/offline synchronization.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="https://www.youtube.com/watch?v=sTSQlYX5DU0"&gt;What does it mean to be Reactive&lt;/a&gt;&lt;/strong&gt; The inimitable Erik Meijer delivering his opening keynote to React 2014&lt;/p&gt;</summary><category term="rx"></category></entry><entry><title>Understanding Promises</title><link href="http://minhhh.github.io/posts/understanding-promises" rel="alternate"></link><published>2016-10-26T00:02:00-04:00</published><updated>2016-10-26T00:02:00-04:00</updated><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2016-10-26:posts/understanding-promises</id><summary type="html">&lt;p&gt;&lt;strong&gt;&lt;a href="https://www.promisejs.org/"&gt;Understand promise vs callback&lt;/a&gt;&lt;/strong&gt; The ABCs of promises&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="https://promise-nuggets.github.io/"&gt;Promise nuggets&lt;/a&gt;&lt;/strong&gt; More examples of promises&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="https://spion.github.io/posts/why-i-am-switching-to-promises.html"&gt;Why I am switching to promises&lt;/a&gt;&lt;/strong&gt; A guy switches from callbacks to promises.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="http://pouchdb.com/2015/05/18/we-have-a-problem-with-promises.html"&gt;We have a problem with promises&lt;/a&gt;&lt;/strong&gt; Promises are not so easy to use if you don't know exactly how to use them properly. Try to avoid the mistakes of using something without fully understanding it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="https://gist.github.com/briancavalier/842626"&gt;Retry patterns&lt;/a&gt;&lt;/strong&gt; Several patterns of retry in promises&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="https://github.com/icodeforlove/promise-retryer"&gt;promise-retryer&lt;/a&gt;&lt;/strong&gt; Another way to do retry with promise which supports
    * custom delays based on attempts
    * maxRetries
    * promise result validation (if it fails then keep trying)&lt;/p&gt;</summary><category term="promise"></category></entry><entry><title>Generate one-time password from the command line</title><link href="http://minhhh.github.io/posts/generate-one-time-password-from-the-command-line" rel="alternate"></link><published>2016-10-02T00:00:00-04:00</published><updated>2016-10-02T00:00:00-04:00</updated><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2016-10-02:posts/generate-one-time-password-from-the-command-line</id><summary type="html">&lt;p&gt;One-time password is pretty common these days for any type of account that offers two-factor authentication. We can use an app to generate OTP but it would be troublesome if we lost the app or the phone. Fortunately there's a simple way to generate OTP programmatically using libraries such as Python &lt;code&gt;OneTimePass&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;First, install &lt;code&gt;OneTimePass&lt;/code&gt; with &lt;code&gt;pip&lt;/code&gt;:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install onetimepass
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then you get the secret generated from the service provider you're using. Normally it would be a time-based token, such as the ones you use for Google Authenticator.&lt;/p&gt;
&lt;p&gt;To get time-based token you invoke it like this:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;onetimepass&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;otp&lt;/span&gt;

&lt;span class="n"&gt;my_secret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;MFRGGZDFMZTWQ2LK&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;my_token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;otp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_totp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_secret&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;my_token&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Remember to store your secret safely.&lt;/p&gt;</summary><category term="python"></category><category term="otp"></category></entry><entry><title>Autoformat C# code from command line</title><link href="http://minhhh.github.io/posts/autoformat-c-code-from-command-line" rel="alternate"></link><published>2016-09-11T00:00:00-04:00</published><updated>2016-09-11T00:00:00-04:00</updated><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2016-09-11:posts/autoformat-c-code-from-command-line</id><summary type="html">&lt;p&gt;We all need a tool to format code automatically according to project's convention. Using an IDE like Visual Studio, Xamarin or MonoDevelop, we can format code easily. However, it's not always convenient to fireup the IDE just for formatting some code, and also having a tool on the command line makes it easier to integrate with other workflows. Therefore, it's great if we have some tool which runs on the command line to auto format our code.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Requirements&lt;/strong&gt;
&lt;em&gt; Customizable format options
&lt;/em&gt; Format whole directory recursively&lt;/p&gt;
&lt;p&gt;The second requirement is relatively easy to implement if we have a tool to format a single file on the commandline because we can just use &lt;code&gt;find&lt;/code&gt; with some filter to iteratively apply the tool to a bunch of files.&lt;/p&gt;
&lt;h2&gt;Solution 1: Astyle&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://astyle.sourceforge.net/"&gt;Artistic Style&lt;/a&gt; is a source code indenter, formatter, and beautifier for the C, C++, C++/CLI, Objectiveâ€‘C, C# and Java programming languages. We can download and install Astyle rather quickly without any problems on most platforms.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Installation&lt;/strong&gt;
We will use a simple script below to help us install AStyle on Mac OSX. Installation on other platforms can be done in a similar manner&lt;/p&gt;
&lt;p&gt;&lt;div&gt;
    &lt;style type = "text/css" scoped&gt;
.git-content div {
    padding: 0;
    margin: 0;
}

.git-content .git-file {
    border: 1px solid #DEDEDE;
    margin-bottom: 1em;
}

.git-content .git-file .git-meta {
    background-color: #EAEAEA;
    color: #666666;
    font-size: 85%;
    overflow: hidden;
    padding: 0.5em;
}

.git-content .git-file .git-meta a {
    color: #336699;
}

.git-content .git-file .git-meta a:visited {
    color: #773377;
}

.git-content .git-file {
    background-color: #F8F8FF;
    border-bottom: 1px solid #DDDDDD;
    font-size: 100%;
    overflow: auto;
    word-wrap: normal;
}

.git-content .git-file pre {
    background: none repeat scroll 0 0 transparent !important;
    border: medium none !important;
    margin: 0 !important;
    padding: 0 !important;
}
    &lt;/style&gt;
    &lt;div class="git-content"&gt;
        &lt;div class="git-file"&gt;
            &lt;div class="file"&gt;
 &lt;div class="blob-wrapper data type-shell" itemprop="text"&gt;
  &lt;table class="highlight tab-size js-file-line-container" data-tab-size="8"&gt;
   &lt;tr&gt;
    &lt;td class="blob-num js-line-number" data-line-number="1" id="L1"&gt;
    &lt;/td&gt;
    &lt;td class="blob-code blob-code-inner js-file-line" id="LC1"&gt;
     &lt;span class="pl-c"&gt;
      &lt;span class="pl-c"&gt;
       #!
      &lt;/span&gt;
      /bin/sh
     &lt;/span&gt;
    &lt;/td&gt;
   &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td class="blob-num js-line-number" data-line-number="2" id="L2"&gt;
    &lt;/td&gt;
    &lt;td class="blob-code blob-code-inner js-file-line" id="LC2"&gt;
     &lt;span class="pl-c1"&gt;
      set
     &lt;/span&gt;
     -eu
    &lt;/td&gt;
   &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td class="blob-num js-line-number" data-line-number="3" id="L3"&gt;
    &lt;/td&gt;
    &lt;td class="blob-code blob-code-inner js-file-line" id="LC3"&gt;
     &lt;span class="pl-c1"&gt;
      cd
     &lt;/span&gt;
     /tmp/
    &lt;/td&gt;
   &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td class="blob-num js-line-number" data-line-number="4" id="L4"&gt;
    &lt;/td&gt;
    &lt;td class="blob-code blob-code-inner js-file-line" id="LC4"&gt;
    &lt;/td&gt;
   &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td class="blob-num js-line-number" data-line-number="5" id="L5"&gt;
    &lt;/td&gt;
    &lt;td class="blob-code blob-code-inner js-file-line" id="LC5"&gt;
     curl -L -o astyle.tar.gz http://sourceforge.net/projects/astyle/files/astyle/astyle%202.05.1/astyle_2.05.1_macosx.tar.gz/download
    &lt;/td&gt;
   &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td class="blob-num js-line-number" data-line-number="6" id="L6"&gt;
    &lt;/td&gt;
    &lt;td class="blob-code blob-code-inner js-file-line" id="LC6"&gt;
     tar zxvf astyle.tar.gz
    &lt;/td&gt;
   &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td class="blob-num js-line-number" data-line-number="7" id="L7"&gt;
    &lt;/td&gt;
    &lt;td class="blob-code blob-code-inner js-file-line" id="LC7"&gt;
    &lt;/td&gt;
   &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td class="blob-num js-line-number" data-line-number="8" id="L8"&gt;
    &lt;/td&gt;
    &lt;td class="blob-code blob-code-inner js-file-line" id="LC8"&gt;
     &lt;span class="pl-c1"&gt;
      cd
     &lt;/span&gt;
     astyle
    &lt;/td&gt;
   &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td class="blob-num js-line-number" data-line-number="9" id="L9"&gt;
    &lt;/td&gt;
    &lt;td class="blob-code blob-code-inner js-file-line" id="LC9"&gt;
     &lt;span class="pl-c1"&gt;
      cd
     &lt;/span&gt;
     build/xcode
    &lt;/td&gt;
   &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td class="blob-num js-line-number" data-line-number="10" id="L10"&gt;
    &lt;/td&gt;
    &lt;td class="blob-code blob-code-inner js-file-line" id="LC10"&gt;
     sudo xcodebuild install -project AStyle.xcodeproj
    &lt;/td&gt;
   &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td class="blob-num js-line-number" data-line-number="11" id="L11"&gt;
    &lt;/td&gt;
    &lt;td class="blob-code blob-code-inner js-file-line" id="LC11"&gt;
    &lt;/td&gt;
   &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td class="blob-num js-line-number" data-line-number="12" id="L12"&gt;
    &lt;/td&gt;
    &lt;td class="blob-code blob-code-inner js-file-line" id="LC12"&gt;
     &lt;span class="pl-c1"&gt;
      cd
     &lt;/span&gt;
     ../../build/mac/
    &lt;/td&gt;
   &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td class="blob-num js-line-number" data-line-number="13" id="L13"&gt;
    &lt;/td&gt;
    &lt;td class="blob-code blob-code-inner js-file-line" id="LC13"&gt;
     make
    &lt;/td&gt;
   &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td class="blob-num js-line-number" data-line-number="14" id="L14"&gt;
    &lt;/td&gt;
    &lt;td class="blob-code blob-code-inner js-file-line" id="LC14"&gt;
     sudo make install
    &lt;/td&gt;
   &lt;/tr&gt;
  &lt;/table&gt;
 &lt;/div&gt;
&lt;/div&gt;

            &lt;div class="git-meta"&gt;
                
                &lt;span&gt;Brought to you by me &lt;a href="https://github.com/minhhh/pelican_git"&gt;pelican_git&lt;/a&gt;.&lt;/span&gt;
                
                &lt;span style="float: right; color: #369;"&gt;&lt;a href="https://github.com/minhhh/dev-tools/blob/master/astyle/setup_astyle.sh"&gt;view original&lt;/a&gt;&lt;/span&gt;
                &lt;span style="float: right; margin-right: 8px;"&gt;
                    &lt;a style="color: rgb(102, 102, 102);" href="https://github.com/minhhh/dev-tools/blob/master/astyle/setup_astyle.sh"&gt;astyle/setup_astyle.sh&lt;/a&gt;&lt;/span&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Usage&lt;/strong&gt;
After we have &lt;code&gt;astyle&lt;/code&gt; available on the command line, applying it for our project is a matter of wrapping everything in a single Make command like so&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# Supposed our Code is in the Code folder
format:
    find Code -iname &amp;quot;*.cs&amp;quot; -not -path &amp;quot;Code/excludedpath/*&amp;quot; | xargs -n 1 -I {} bash -c &amp;quot;astyle --options=.astylerc \&amp;quot;{}\&amp;quot;&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Remember to create a file called &lt;code&gt;.astylerc&lt;/code&gt; and put whatever format options you want to customize for your project there.&lt;/p&gt;
&lt;h2&gt;Solution 2: NRefactory&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/icsharpcode/NRefactory"&gt;NRefactory&lt;/a&gt; is the C# analysis library used in the SharpDevelop and MonoDevelop IDEs. We can write a command line client with our customized parameters and format options, which uses &lt;code&gt;NRefactory&lt;/code&gt; internally to format code.&lt;/p&gt;
&lt;p&gt;TODO: Write a cli using &lt;code&gt;docopt&lt;/code&gt;&lt;/p&gt;</summary><category term="c#"></category><category term="cli"></category></entry><entry><title>A netcat cheatsheet</title><link href="http://minhhh.github.io/posts/a-netcat-cheatsheet" rel="alternate"></link><published>2015-01-01T00:00:00-05:00</published><updated>2015-01-01T00:00:00-05:00</updated><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2015-01-01:posts/a-netcat-cheatsheet</id><summary type="html">&lt;p&gt;&lt;div&gt;
    &lt;style type = "text/css" scoped&gt;
.git-content div {
    padding: 0;
    margin: 0;
}

.git-content .git-file {
    border: 1px solid #DEDEDE;
    margin-bottom: 1em;
}

.git-content .git-file .git-meta {
    background-color: #EAEAEA;
    color: #666666;
    font-size: 85%;
    overflow: hidden;
    padding: 0.5em;
}

.git-content .git-file .git-meta a {
    color: #336699;
}

.git-content .git-file .git-meta a:visited {
    color: #773377;
}

.git-content .git-file {
    background-color: #F8F8FF;
    border-bottom: 1px solid #DDDDDD;
    font-size: 100%;
    overflow: auto;
    word-wrap: normal;
}

.git-content .git-file pre {
    background: none repeat scroll 0 0 transparent !important;
    border: medium none !important;
    margin: 0 !important;
    padding: 0 !important;
}
    &lt;/style&gt;
    &lt;div class="git-content"&gt;
        &lt;div class="git-file"&gt;
            &lt;div class="file"&gt;
 &lt;div class="readme blob instapaper_body" id="readme"&gt;
  &lt;article class="markdown-body entry-content" itemprop="text"&gt;
   &lt;h1&gt;
    &lt;a aria-hidden="true" class="anchor" href="#netcat-cheatsheet" id="user-content-netcat-cheatsheet"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    NETCAT CHEATSHEET
   &lt;/h1&gt;
   &lt;p&gt;
    &lt;code&gt;
     netcat
    &lt;/code&gt;
    is a very useful tool for testing/debugging TCP/IP and UDP networking. In this cheetsheet I am sharing some useful examples of netcat usage for everyday purpose.
   &lt;/p&gt;
   &lt;h2&gt;
    &lt;a aria-hidden="true" class="anchor" href="#test-if-a-particular-tcpudp-port-is-open" id="user-content-test-if-a-particular-tcpudp-port-is-open"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Test if a particular TCP/UDP port is open
   &lt;/h2&gt;
   &lt;p&gt;
    To check if a TCP port is open
   &lt;/p&gt;
   &lt;div class="highlight highlight-source-shell"&gt;
    &lt;pre&gt;    nc -v google.com 80
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Connection to google.com port 80 [tcp/http] succeeded!&lt;/span&gt;&lt;/pre&gt;
   &lt;/div&gt;
   &lt;p&gt;
    To check if a UDP port is open, simple add option
    &lt;code&gt;
     -u
    &lt;/code&gt;
   &lt;/p&gt;
   &lt;div class="highlight highlight-source-shell"&gt;
    &lt;pre&gt;    nc -vu google.com 53
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Connection to google.com port 53 [udp/domain] succeeded!&lt;/span&gt;&lt;/pre&gt;
   &lt;/div&gt;
   &lt;h2&gt;
    &lt;a aria-hidden="true" class="anchor" href="#port-scan" id="user-content-port-scan"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Port scan
   &lt;/h2&gt;
   &lt;p&gt;
    Scan UDP ports
   &lt;/p&gt;
   &lt;div class="highlight highlight-source-shell"&gt;
    &lt;pre&gt;    nc -vzu google.com 1-65535&lt;/pre&gt;
   &lt;/div&gt;
   &lt;p&gt;
    To scan TCP ports simply remove the
    &lt;code&gt;
     -u
    &lt;/code&gt;
   &lt;/p&gt;
   &lt;div class="highlight highlight-source-shell"&gt;
    &lt;pre&gt;    nc -vz google.com 1-65535&lt;/pre&gt;
   &lt;/div&gt;
   &lt;h2&gt;
    &lt;a aria-hidden="true" class="anchor" href="#netcat-client-server" id="user-content-netcat-client-server"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Netcat client server
   &lt;/h2&gt;
   &lt;p&gt;
    Open a server that listens to a particular port
   &lt;/p&gt;
   &lt;div class="highlight highlight-source-shell"&gt;
    &lt;pre&gt;    nc -l 2389&lt;/pre&gt;
   &lt;/div&gt;
   &lt;p&gt;
    Open another client connecting to that port
   &lt;/p&gt;
   &lt;div class="highlight highlight-source-shell"&gt;
    &lt;pre&gt;    nc localhost 2389&lt;/pre&gt;
   &lt;/div&gt;
   &lt;p&gt;
    Now you can (insecurely) chat between the 2 terminals.
   &lt;/p&gt;
   &lt;h2&gt;
    &lt;a aria-hidden="true" class="anchor" href="#transfer-single-file" id="user-content-transfer-single-file"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Transfer single file
   &lt;/h2&gt;
   &lt;p&gt;
    On the remote server, open a port which output anything it receives to the target file
   &lt;/p&gt;
   &lt;div class="highlight highlight-source-shell"&gt;
    &lt;pre&gt;    nc -l 2389 &lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;test&lt;/span&gt;&lt;/pre&gt;
   &lt;/div&gt;
   &lt;p&gt;
    On the local host, send the file
   &lt;/p&gt;
   &lt;div class="highlight highlight-source-shell"&gt;
    &lt;pre&gt;    cat testfile &lt;span class="pl-k"&gt;|&lt;/span&gt; nc remotehost 2389&lt;/pre&gt;
   &lt;/div&gt;
   &lt;h2&gt;
    &lt;a aria-hidden="true" class="anchor" href="#transfer-whole-directory" id="user-content-transfer-whole-directory"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Transfer whole directory
   &lt;/h2&gt;
   &lt;p&gt;
    On receiver host
   &lt;/p&gt;
   &lt;div class="highlight highlight-source-shell"&gt;
    &lt;pre&gt;    nc -l 5000 &lt;span class="pl-k"&gt;|&lt;/span&gt; tar xvf -&lt;/pre&gt;
   &lt;/div&gt;
   &lt;p&gt;
    On sender host
   &lt;/p&gt;
   &lt;div class="highlight highlight-source-shell"&gt;
    &lt;pre&gt;    tar cvf - /path/to/dir &lt;span class="pl-k"&gt;|&lt;/span&gt; nc remotehost.com 5000&lt;/pre&gt;
   &lt;/div&gt;
   &lt;h2&gt;
    &lt;a aria-hidden="true" class="anchor" href="#transfer-whole-harddrive" id="user-content-transfer-whole-harddrive"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Transfer whole harddrive
   &lt;/h2&gt;
   &lt;p&gt;
    On receiver host
   &lt;/p&gt;
   &lt;div class="highlight highlight-source-shell"&gt;
    &lt;pre&gt;    nc -lp 5000 &lt;span class="pl-k"&gt;|&lt;/span&gt; sudo dd of=/backup/sdb.img.gz&lt;/pre&gt;
   &lt;/div&gt;
   &lt;p&gt;
    On sender host
   &lt;/p&gt;
   &lt;div class="highlight highlight-source-shell"&gt;
    &lt;pre&gt;    dd if=/dev/sdb &lt;span class="pl-k"&gt;|&lt;/span&gt; gzip -c &lt;span class="pl-k"&gt;|&lt;/span&gt; nc remote_server.com 5000&lt;/pre&gt;
   &lt;/div&gt;
   &lt;h2&gt;
    &lt;a aria-hidden="true" class="anchor" href="#create-a-web-proxy-for-a-particular-websites" id="user-content-create-a-web-proxy-for-a-particular-websites"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Create a web proxy for a particular websites
   &lt;/h2&gt;
   &lt;p&gt;
    The following commands redirect all incoming TCP/5000 connections to
    &lt;code&gt;
     http://www.google.com
    &lt;/code&gt;
   &lt;/p&gt;
   &lt;div class="highlight highlight-source-shell"&gt;
    &lt;pre&gt;    mkfifo proxypipe
    &lt;span class="pl-k"&gt;while&lt;/span&gt; &lt;span class="pl-c1"&gt;true&lt;/span&gt;&lt;span class="pl-k"&gt;;&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt; nc -l 5000 &lt;span class="pl-k"&gt;0&amp;lt;&lt;/span&gt;proxypipe &lt;span class="pl-k"&gt;|&lt;/span&gt; nc www.google.com 80 &lt;span class="pl-k"&gt;1&amp;gt;&lt;/span&gt; proxypipe&lt;span class="pl-k"&gt;;&lt;/span&gt; &lt;span class="pl-k"&gt;done&lt;/span&gt;&lt;/pre&gt;
   &lt;/div&gt;
   &lt;h2&gt;
    &lt;a aria-hidden="true" class="anchor" href="#launch-a-remote-shell" id="user-content-launch-a-remote-shell"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Launch a remote shell
   &lt;/h2&gt;
   &lt;p&gt;
    On remote host
   &lt;/p&gt;
   &lt;div class="highlight highlight-source-shell"&gt;
    &lt;pre&gt;    nc -lp 5000 -e /bin/bash&lt;/pre&gt;
   &lt;/div&gt;
   &lt;p&gt;
    On localhost host
   &lt;/p&gt;
   &lt;div class="highlight highlight-source-shell"&gt;
    &lt;pre&gt;    nc remotehost 5000&lt;/pre&gt;
   &lt;/div&gt;
   &lt;h2&gt;
    &lt;a aria-hidden="true" class="anchor" href="#test-network-speed" id="user-content-test-network-speed"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Test network speed
   &lt;/h2&gt;
   &lt;ul&gt;
    &lt;li&gt;
     &lt;a href="http://deice.daug.net/netcat_speed.html"&gt;
      Using netcat to test network speed
     &lt;/a&gt;
    &lt;/li&gt;
   &lt;/ul&gt;
   &lt;h1&gt;
    &lt;a aria-hidden="true" class="anchor" href="#references" id="user-content-references"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    REFERENCES
   &lt;/h1&gt;
   &lt;ul&gt;
    &lt;li&gt;
     &lt;a href="http://www.thegeekstuff.com/2012/04/nc-command-examples/"&gt;
      8 Practical Linux Netcat NC Command Examples
     &lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
     &lt;a href="http://xmodulo.com/useful-netcat-examples-linux.html"&gt;
      Useful netcat examples on Linux
     &lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
     &lt;a href="http://www.admin-magazine.com/Articles/Netcat-The-Admin-s-Best-Friend"&gt;
      Netcat â€“ The Adminâ€™s Best Friend
     &lt;/a&gt;
    &lt;/li&gt;
   &lt;/ul&gt;
  &lt;/article&gt;
 &lt;/div&gt;
&lt;/div&gt;

            &lt;div class="git-meta"&gt;
                
                &lt;span&gt;Brought to you by me &lt;a href="https://github.com/minhhh/pelican_git"&gt;pelican_git&lt;/a&gt;.&lt;/span&gt;
                
                &lt;span style="float: right; color: #369;"&gt;&lt;a href="https://github.com/minhhh/wiki/blob/master/netcat.md"&gt;view original&lt;/a&gt;&lt;/span&gt;
                &lt;span style="float: right; margin-right: 8px;"&gt;
                    &lt;a style="color: rgb(102, 102, 102);" href="https://github.com/minhhh/wiki/blob/master/netcat.md"&gt;netcat.md&lt;/a&gt;&lt;/span&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;&lt;/p&gt;</summary><category term="bash"></category><category term="shell"></category><category term="netcat"></category></entry><entry><title>An Introduction to Bash</title><link href="http://minhhh.github.io/posts/an-introduction-to-bash" rel="alternate"></link><published>2014-11-23T00:00:00-05:00</published><updated>2014-11-23T00:00:00-05:00</updated><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2014-11-23:posts/an-introduction-to-bash</id><summary type="html">&lt;p&gt;&lt;div&gt;
    &lt;style type = "text/css" scoped&gt;
.git-content div {
    padding: 0;
    margin: 0;
}

.git-content .git-file {
    border: 1px solid #DEDEDE;
    margin-bottom: 1em;
}

.git-content .git-file .git-meta {
    background-color: #EAEAEA;
    color: #666666;
    font-size: 85%;
    overflow: hidden;
    padding: 0.5em;
}

.git-content .git-file .git-meta a {
    color: #336699;
}

.git-content .git-file .git-meta a:visited {
    color: #773377;
}

.git-content .git-file {
    background-color: #F8F8FF;
    border-bottom: 1px solid #DDDDDD;
    font-size: 100%;
    overflow: auto;
    word-wrap: normal;
}

.git-content .git-file pre {
    background: none repeat scroll 0 0 transparent !important;
    border: medium none !important;
    margin: 0 !important;
    padding: 0 !important;
}
    &lt;/style&gt;
    &lt;div class="git-content"&gt;
        &lt;div class="git-file"&gt;
            &lt;div class="file"&gt;
 &lt;div class="readme blob instapaper_body" id="readme"&gt;
  &lt;article class="markdown-body entry-content" itemprop="text"&gt;
   &lt;h1&gt;
    &lt;a aria-hidden="true" class="anchor" href="#bash" id="user-content-bash"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    BASH
   &lt;/h1&gt;
   &lt;h2&gt;
    &lt;a aria-hidden="true" class="anchor" href="#references" id="user-content-references"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    REFERENCES
   &lt;/h2&gt;
   &lt;h3&gt;
    &lt;a aria-hidden="true" class="anchor" href="#general-documents-books-tutorials" id="user-content-general-documents-books-tutorials"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    General Documents, Books, Tutorials
   &lt;/h3&gt;
   &lt;ul&gt;
    &lt;li&gt;
     &lt;a href="http://tldp.org/LDP/abs/html/"&gt;
      Advanced Bash Scripting Guide
     &lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
     &lt;a href="https://code.google.com/p/bashscripts/downloads/list"&gt;
      Sample Bash files
     &lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
     &lt;a href="https://github.com/azet/community_bash_style_guide/blob/master/README.md"&gt;
      Community Bash Style Guide
     &lt;/a&gt;
    &lt;/li&gt;
   &lt;/ul&gt;
   &lt;h3&gt;
    &lt;a aria-hidden="true" class="anchor" href="#linting" id="user-content-linting"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Linting
   &lt;/h3&gt;
   &lt;ul&gt;
    &lt;li&gt;
     &lt;a href="https://github.com/koalaman/shellcheck"&gt;
      Shellcheck
     &lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
     &lt;a href="https://www.npmjs.org/package/grunt-lint-bash"&gt;
      Grunt Lint Bash
     &lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
     &lt;a href="https://github.com/duggan/shlint"&gt;
      SHLint
     &lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
     &lt;a href="http://manpages.ubuntu.com/manpages/natty/man1/checkbashisms.1.html"&gt;
      checkbashisms
     &lt;/a&gt;
    &lt;/li&gt;
   &lt;/ul&gt;
   &lt;h3&gt;
    &lt;a aria-hidden="true" class="anchor" href="#unit-testing" id="user-content-unit-testing"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Unit Testing
   &lt;/h3&gt;
   &lt;ul&gt;
    &lt;li&gt;
     &lt;a href="https://github.com/sstephenson/bats"&gt;
      bats
     &lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
     &lt;a href="https://code.google.com/p/shunit2/"&gt;
      shunit2
     &lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
     &lt;a href="https://github.com/mlafeldt/sharness"&gt;
      sharness
     &lt;/a&gt;
    &lt;/li&gt;
   &lt;/ul&gt;
   &lt;h3&gt;
    &lt;a aria-hidden="true" class="anchor" href="#profiling" id="user-content-profiling"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Profiling
   &lt;/h3&gt;
   &lt;ul&gt;
    &lt;li&gt;
     &lt;a href="https://github.com/sstephenson/bashprof"&gt;
      bashprof
     &lt;/a&gt;
    &lt;/li&gt;
   &lt;/ul&gt;
   &lt;h3&gt;
    &lt;a aria-hidden="true" class="anchor" href="#debugging" id="user-content-debugging"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Debugging
   &lt;/h3&gt;
   &lt;ul&gt;
    &lt;li&gt;
     &lt;a href="http://tldp.org/LDP/Bash-Beginners-Guide/html/sect_02_03.html"&gt;
      Debugging Bash
     &lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
     &lt;a href="http://bashdb.sourceforge.net/bashdb.html"&gt;
      bashdb
     &lt;/a&gt;
    &lt;/li&gt;
   &lt;/ul&gt;
   &lt;h2&gt;
    &lt;a aria-hidden="true" class="anchor" href="#basics" id="user-content-basics"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    BASICS
   &lt;/h2&gt;
   &lt;h3&gt;
    &lt;a aria-hidden="true" class="anchor" href="#run-a-bash-script" id="user-content-run-a-bash-script"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Run a bash script
   &lt;/h3&gt;
   &lt;p&gt;
    Forking a new shell
   &lt;/p&gt;
   &lt;div class="highlight highlight-source-shell"&gt;
    &lt;pre&gt;    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; dot slash&lt;/span&gt;
    ./script.sh

    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; specifying the shell interpreter&lt;/span&gt;
    bash script.sh&lt;/pre&gt;
   &lt;/div&gt;
   &lt;p&gt;
    Executes the script in the current shell without forking a new shell
   &lt;/p&gt;
   &lt;div class="highlight highlight-source-shell"&gt;
    &lt;pre&gt;    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; dot space dot slash&lt;/span&gt;
    &lt;span class="pl-c1"&gt;.&lt;/span&gt; ./script.sh

    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; source command : similar to dot space dot slash&lt;/span&gt;
    &lt;span class="pl-c1"&gt;source&lt;/span&gt; script.sh&lt;/pre&gt;
   &lt;/div&gt;
   &lt;h3&gt;
    &lt;a aria-hidden="true" class="anchor" href="#block-comment" id="user-content-block-comment"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Block Comment
   &lt;/h3&gt;
   &lt;div class="highlight highlight-source-shell"&gt;
    &lt;pre&gt;    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#!&lt;/span&gt; /usr/bin/env bash&lt;/span&gt;
    &lt;span class="pl-c1"&gt;:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-k"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="pl-k"&gt;COMMENT&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-s"&gt;    Copyright (C) 2012 Author &amp;lt;author at gmail dot com&amp;gt;&lt;/span&gt;
&lt;span class="pl-s"&gt;&lt;/span&gt;
&lt;span class="pl-s"&gt;    This program is free software: you can redistribute it and/or modify&lt;/span&gt;
&lt;span class="pl-s"&gt;    it under the terms of the GNU General Public License as published by&lt;/span&gt;
&lt;span class="pl-s"&gt;    the Free Software Foundation version 3.&lt;/span&gt;
&lt;span class="pl-s"&gt;&lt;/span&gt;
&lt;span class="pl-s"&gt;    This program is distributed in the hope that it will be useful,&lt;/span&gt;
&lt;span class="pl-s"&gt;    but WITHOUT ANY WARRANTY; without even the implied warranty of&lt;/span&gt;
&lt;span class="pl-s"&gt;    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&lt;/span&gt;
&lt;span class="pl-s"&gt;    GNU General Public License for more details.&lt;/span&gt;
&lt;span class="pl-s"&gt;&lt;/span&gt;
&lt;span class="pl-s"&gt;    You should have received a copy of the GNU General Public License&lt;/span&gt;
&lt;span class="pl-s"&gt;    along with this program.  If not, see &amp;lt;http://www.gnu.org/licenses/&amp;gt;.&lt;/span&gt;
&lt;span class="pl-s"&gt;    COMMENT&lt;/span&gt;
&lt;span class="pl-s"&gt;&lt;/span&gt;
&lt;span class="pl-s"&gt;    version="v0.1.1"&lt;/span&gt;&lt;/pre&gt;
   &lt;/div&gt;
   &lt;h3&gt;
    &lt;a aria-hidden="true" class="anchor" href="#looping-in-bash" id="user-content-looping-in-bash"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Looping in bash
   &lt;/h3&gt;
   &lt;ul&gt;
    &lt;li&gt;
     &lt;a href="http://www.thegeekstuff.com/2011/07/bash-for-loop-examples/"&gt;
      Bash for loop example
     &lt;/a&gt;
    &lt;/li&gt;
   &lt;/ul&gt;
   &lt;h3&gt;
    &lt;a aria-hidden="true" class="anchor" href="#exit-on-error-with-set--e" id="user-content-exit-on-error-with-set--e"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Exit on error with set -e
   &lt;/h3&gt;
   &lt;ul&gt;
    &lt;li&gt;
     Call
     &lt;code&gt;
      set -e
     &lt;/code&gt;
     in your bash and it will exit if any command returns any error.
    &lt;/li&gt;
    &lt;li&gt;
     Call
     &lt;code&gt;
      set -evx
     &lt;/code&gt;
     or
     &lt;code&gt;
      bash -evx script.sh
     &lt;/code&gt;
     to debug script.
    &lt;/li&gt;
   &lt;/ul&gt;
   &lt;h3&gt;
    &lt;a aria-hidden="true" class="anchor" href="#get-current-bash-file-folder" id="user-content-get-current-bash-file-folder"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Get current bash file folder
   &lt;/h3&gt;
   &lt;div class="highlight highlight-source-shell"&gt;
    &lt;pre&gt;    DIR=&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;$(&lt;/span&gt; &lt;span class="pl-c1"&gt;cd&lt;/span&gt; -P &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;$(&lt;/span&gt; dirname &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-smi"&gt;$0&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-pds"&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="pl-c1"&gt;pwd&lt;/span&gt; &lt;span class="pl-pds"&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;
   &lt;/div&gt;
  &lt;/article&gt;
 &lt;/div&gt;
&lt;/div&gt;

            &lt;div class="git-meta"&gt;
                
                &lt;span&gt;Brought to you by me &lt;a href="https://github.com/minhhh/pelican_git"&gt;pelican_git&lt;/a&gt;.&lt;/span&gt;
                
                &lt;span style="float: right; color: #369;"&gt;&lt;a href="https://github.com/minhhh/wiki/blob/master/bash.md"&gt;view original&lt;/a&gt;&lt;/span&gt;
                &lt;span style="float: right; margin-right: 8px;"&gt;
                    &lt;a style="color: rgb(102, 102, 102);" href="https://github.com/minhhh/wiki/blob/master/bash.md"&gt;bash.md&lt;/a&gt;&lt;/span&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;&lt;/p&gt;</summary><category term="bash"></category><category term="shell"></category></entry><entry><title>A Guide to Python's Magic Methods</title><link href="http://minhhh.github.io/posts/a-guide-to-pythons-magic-methods" rel="alternate"></link><published>2014-10-19T00:00:00-04:00</published><updated>2014-10-19T00:00:00-04:00</updated><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2014-10-19:posts/a-guide-to-pythons-magic-methods</id><summary type="html">&lt;p&gt;&lt;div&gt;
    &lt;style type = "text/css" scoped&gt;
.git-content div {
    padding: 0;
    margin: 0;
}

.git-content .git-file {
    border: 1px solid #DEDEDE;
    margin-bottom: 1em;
}

.git-content .git-file .git-meta {
    background-color: #EAEAEA;
    color: #666666;
    font-size: 85%;
    overflow: hidden;
    padding: 0.5em;
}

.git-content .git-file .git-meta a {
    color: #336699;
}

.git-content .git-file .git-meta a:visited {
    color: #773377;
}

.git-content .git-file {
    background-color: #F8F8FF;
    border-bottom: 1px solid #DDDDDD;
    font-size: 100%;
    overflow: auto;
    word-wrap: normal;
}

.git-content .git-file pre {
    background: none repeat scroll 0 0 transparent !important;
    border: medium none !important;
    margin: 0 !important;
    padding: 0 !important;
}
    &lt;/style&gt;
    &lt;div class="git-content"&gt;
        &lt;div class="git-file"&gt;
            &lt;div class="file"&gt;
 &lt;div class="readme blob instapaper_body" id="readme"&gt;
  &lt;article class="markdown-body entry-content" itemprop="text"&gt;
   &lt;h1&gt;
    &lt;a aria-hidden="true" class="anchor" href="#a-guide-to-pythons-magic-methods" id="user-content-a-guide-to-pythons-magic-methods"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    A Guide to Python's Magic Methods
   &lt;/h1&gt;
   &lt;p&gt;
    A Markdown version of the original.
   &lt;/p&gt;
   &lt;p&gt;
    &lt;strong&gt;
     Rafe Kettler
    &lt;/strong&gt;
   &lt;/p&gt;
   &lt;p&gt;
    Copyright Â© 2012 Rafe Kettler
   &lt;/p&gt;
   &lt;p&gt;
    Version 1.17
   &lt;/p&gt;
   &lt;p&gt;
    A PDF version of this guide can be obtained from
    &lt;a href="http://www.rafekettler.com/magicmethods.pdf"&gt;
     my site
    &lt;/a&gt;
    or
    &lt;a href="https://github.com/RafeKettler/magicmethods/raw/master/magicmethods.pdf"&gt;
     Github
    &lt;/a&gt;
    . The magic methods guide has a git repository at
    &lt;a href="http://www.github.com/RafeKettler/magicmethods"&gt;
     http://www.github.com/RafeKettler/magicmethods
    &lt;/a&gt;
    . Any issues can be reported there, along with comments, (or even contributions!).
   &lt;/p&gt;
   &lt;h3&gt;
    &lt;a aria-hidden="true" class="anchor" href="#table-of-contents" id="user-content-table-of-contents"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Table of Contents
   &lt;/h3&gt;
   &lt;ol&gt;
    &lt;li&gt;
     &lt;a href="#user-content-introduction"&gt;
      Introduction
     &lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
     &lt;a href="#user-content-construction-and-initialization"&gt;
      Construction and Initialization
     &lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
     &lt;a href="#user-content-making-operators-work-on-custom-classes"&gt;
      Making Operators Work on Custom Classes
     &lt;/a&gt;
     &lt;ul&gt;
      &lt;li&gt;
       &lt;a href="#user-content-comparison-magic-methods"&gt;
        Comparison magic methods
       &lt;/a&gt;
      &lt;/li&gt;
      &lt;li&gt;
       &lt;a href="#user-content-numeric-magic-methods"&gt;
        Numeric magic methods
       &lt;/a&gt;
      &lt;/li&gt;
     &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;
     &lt;a href="#user-content-representing-your-classes"&gt;
      Representing your Classes
     &lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
     &lt;a href="#user-content-controlling-attribute-access"&gt;
      Controlling Attribute Access
     &lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
     &lt;a href="#user-content-making-custom-sequences"&gt;
      Making Custom Sequences
     &lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
     &lt;a href="#user-content-reflection"&gt;
      Reflection
     &lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
     &lt;a href="#user-content-callable-objects"&gt;
      Callable Objects
     &lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
     &lt;a href="#user-content-context-managers"&gt;
      Context Managers
     &lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
     &lt;a href="#user-content-abstract-base-classes"&gt;
      Abstract Base Classes
     &lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
     &lt;a href="#user-content-building-descriptor-objects"&gt;
      Building Descriptor Objects
     &lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
     &lt;a href="#user-content-copying"&gt;
      Copying
     &lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
     &lt;a href="#user-content-pickling-your-objects"&gt;
      Pickling your Objects
     &lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
     &lt;a href="#user-content-conclusion"&gt;
      Conclusion
     &lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
     &lt;a href="#user-content-appendix-1-how-to-call-magic-methods"&gt;
      Appendix 1: How to Call Magic Methods
     &lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
     &lt;a href="#user-content-appendix-2-changes-in-python-3"&gt;
      Appendix 2: Changes in Python 3
     &lt;/a&gt;
    &lt;/li&gt;
   &lt;/ol&gt;
   &lt;h2&gt;
    &lt;a aria-hidden="true" class="anchor" href="#introduction" id="user-content-introduction"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Introduction
   &lt;/h2&gt;
   &lt;p&gt;
    This guide is the culmination of a few months' worth of blog posts. The subject is magic methods.
   &lt;/p&gt;
   &lt;p&gt;
    What are magic methods? They're everything in object-oriented Python. They're special methods that you can define to add "magic" to your classes. They're always surrounded by double underscores (e.g.
    &lt;code&gt;
     __init__
    &lt;/code&gt;
    or
    &lt;code&gt;
     __lt__
    &lt;/code&gt;
    ). They're also not as well documented as they need to be. All of the magic methods for Python appear in the same section in the Python docs, but they're scattered about and only loosely organized. There's hardly an example to be found in that section (and that may very well be by design, since they're all detailed in the language reference, along with boring syntax descriptions, etc.).
   &lt;/p&gt;
   &lt;p&gt;
    So, to fix what I perceived as a flaw in Python's documentation, I set out to provide some more plain-English, example-driven documentation for Python's magic methods. I started out with weekly blog posts, and now that I've finished with those, I've put together this guide.
   &lt;/p&gt;
   &lt;p&gt;
    I hope you enjoy it. Use it as a tutorial, a refresher, or a reference; it's just intended to be a user-friendly guide to Python's magic methods.
   &lt;/p&gt;
   &lt;h2&gt;
    &lt;a aria-hidden="true" class="anchor" href="#construction-and-initialization" id="user-content-construction-and-initialization"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Construction and Initialization
   &lt;/h2&gt;
   &lt;p&gt;
    Everyone knows the most basic magic method,
    &lt;code&gt;
     __init__
    &lt;/code&gt;
    . It's the way that we can define the initialization behavior of an object. However, when I call
    &lt;code&gt;
     x = SomeClass()
    &lt;/code&gt;
    ,
    &lt;code&gt;
     __init__
    &lt;/code&gt;
    is not the first thing to get called. Actually, it's a method called
    &lt;code&gt;
     __new__
    &lt;/code&gt;
    , which actually creates the instance, then passes any arguments at creation on to the initializer. At the other end of the object's lifespan, there's
    &lt;code&gt;
     __del__.
    &lt;/code&gt;
    Let's take a closer look at these 3 magic methods:
   &lt;/p&gt;
   &lt;ul&gt;
    &lt;li&gt;
     &lt;p&gt;
      &lt;code&gt;
       __new__(cls, [...)
      &lt;/code&gt;
      -
      &lt;code&gt;
       __new__
      &lt;/code&gt;
      is the first method to get called in an object's instantiation. It takes the class, then any other arguments that it will pass along to
      &lt;code&gt;
       __init__
      &lt;/code&gt;
      .
      &lt;code&gt;
       __new__
      &lt;/code&gt;
      is used fairly rarely, but it does have its purposes, particularly when subclassing an immutable type like a tuple or a string. I don't want to go in to too much detail on
      &lt;code&gt;
       __new__
      &lt;/code&gt;
      because it's not too useful, but it is covered in great detail in the Python docs.
     &lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
     &lt;p&gt;
      &lt;code&gt;
       __init__(self, [...)
      &lt;/code&gt;
      - The initializer for the class. It gets passed whatever the primary constructor was called with (so, for example, if we called
      &lt;code&gt;
       x = SomeClass(10, 'foo')
      &lt;/code&gt;
      ,
      &lt;code&gt;
       __init__
      &lt;/code&gt;
      would get passed
      &lt;code&gt;
       10
      &lt;/code&gt;
      and
      &lt;code&gt;
       'foo'
      &lt;/code&gt;
      as arguments.
      &lt;code&gt;
       __init__
      &lt;/code&gt;
      is almost universally used in Python class definitions.
     &lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
     &lt;p&gt;
      &lt;code&gt;
       __del__(self)
      &lt;/code&gt;
      - If
      &lt;code&gt;
       __new__
      &lt;/code&gt;
      and
      &lt;code&gt;
       __init__
      &lt;/code&gt;
      formed the constructor of the object,
      &lt;code&gt;
       __del__
      &lt;/code&gt;
      is the destructor. It doesn't implement behavior for the statement
      &lt;code&gt;
       del x
      &lt;/code&gt;
      (so that code would not translate to
      &lt;code&gt;
       x.__del__()
      &lt;/code&gt;
      ). Rather, it defines behavior for when an object is garbage collected. It can be quite useful for objects that might require extra cleanup upon deletion, like sockets or file objects. Be careful, however, as there is no guarantee that
      &lt;code&gt;
       __del__
      &lt;/code&gt;
      will be executed if the object is still alive when the interpreter exits, so
      &lt;code&gt;
       __del__
      &lt;/code&gt;
      can't serve as a replacement for good coding practices (like always closing a connection when you're done with it. In fact,
      &lt;code&gt;
       __del__
      &lt;/code&gt;
      should almost never be used because of the precarious circumstances under which it is called; use it with caution!
     &lt;/p&gt;
    &lt;/li&gt;
   &lt;/ul&gt;
   &lt;p&gt;
    Putting it all together, here's an example of
    &lt;code&gt;
     __init__
    &lt;/code&gt;
    and
    &lt;code&gt;
     __del__
    &lt;/code&gt;
    in action:
   &lt;/p&gt;
   &lt;div class="highlight highlight-source-python"&gt;
    &lt;pre&gt;    &lt;span class="pl-k"&gt;from&lt;/span&gt; os.path &lt;span class="pl-k"&gt;import&lt;/span&gt; join

    &lt;span class="pl-k"&gt;class&lt;/span&gt; &lt;span class="pl-en"&gt;FileObject&lt;/span&gt;:
        &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'''&lt;/span&gt;Wrapper for file objects to make sure the file gets closed on deletion.&lt;span class="pl-pds"&gt;'''&lt;/span&gt;&lt;/span&gt;

        &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-c1"&gt;__init__&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-smi"&gt;self&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-smi"&gt;filepath&lt;/span&gt;&lt;span class="pl-k"&gt;=&lt;/span&gt;&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;~&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-smi"&gt;filename&lt;/span&gt;&lt;span class="pl-k"&gt;=&lt;/span&gt;&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;sample.txt&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;):
            &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; open a file filename in filepath in read and write mode&lt;/span&gt;
            &lt;span class="pl-c1"&gt;self&lt;/span&gt;.file &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;open&lt;/span&gt;(join(filepath, filename), &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;r+&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;)

        &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-c1"&gt;__del__&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-smi"&gt;self&lt;/span&gt;&lt;/span&gt;):
            &lt;span class="pl-c1"&gt;self&lt;/span&gt;.file.close()
            &lt;span class="pl-k"&gt;del&lt;/span&gt; &lt;span class="pl-c1"&gt;self&lt;/span&gt;.file&lt;/pre&gt;
   &lt;/div&gt;
   &lt;h2&gt;
    &lt;a aria-hidden="true" class="anchor" href="#making-operators-work-on-custom-classes" id="user-content-making-operators-work-on-custom-classes"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Making Operators Work on Custom Classes
   &lt;/h2&gt;
   &lt;p&gt;
    One of the biggest advantages of using Python's magic methods is that they provide a simple way to make objects behave like built-in types. That means you can avoid ugly, counter-intuitive, and nonstandard ways of performing basic operators. In some languages, it's common to do something like this:
   &lt;/p&gt;
   &lt;div class="highlight highlight-source-python"&gt;
    &lt;pre&gt;    &lt;span class="pl-k"&gt;if&lt;/span&gt; instance.equals(other_instance):
        &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; do something&lt;/span&gt;&lt;/pre&gt;
   &lt;/div&gt;
   &lt;p&gt;
    You could certainly do this in Python, too, but this adds confusion and is unnecessarily verbose. Different libraries might use different names for the same operations, making the client do way more work than necessary. With the power of magic methods, however, we can define one method (
    &lt;code&gt;
     __eq__
    &lt;/code&gt;
    , in this case), and say what we mean instead:
   &lt;/p&gt;
   &lt;div class="highlight highlight-source-python"&gt;
    &lt;pre&gt;    &lt;span class="pl-k"&gt;if&lt;/span&gt; instance &lt;span class="pl-k"&gt;==&lt;/span&gt; other_instance:
        &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt;do something&lt;/span&gt;&lt;/pre&gt;
   &lt;/div&gt;
   &lt;p&gt;
    That's part of the power of magic methods. The vast majority of them allow us to define meaning for operators so that we can use them on our own classes just like they were built in types.
   &lt;/p&gt;
   &lt;h3&gt;
    &lt;a aria-hidden="true" class="anchor" href="#comparison-magic-methods" id="user-content-comparison-magic-methods"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Comparison magic methods
   &lt;/h3&gt;
   &lt;p&gt;
    Python has a whole slew of magic methods designed to implement intuitive comparisons between objects using operators, not awkward method calls. They also provide a way to override the default Python behavior for comparisons of objects (by reference). Here's the list of those methods and what they do:
   &lt;/p&gt;
   &lt;ul&gt;
    &lt;li&gt;
     &lt;code&gt;
      __cmp__(self, other)
     &lt;/code&gt;
     -
     &lt;code&gt;
      __cmp__
     &lt;/code&gt;
     is the most basic of the comparison magic methods. It actually implements behavior for all of the comparison operators (&amp;lt;, ==, !=, etc.), but it might not do it the way you want (for example, if whether one instance was equal to another were determined by one criterion and and whether an instance is greater than another were determined by something else).
     &lt;code&gt;
      __cmp__
     &lt;/code&gt;
     should return a negative integer if
     &lt;code&gt;
      self &amp;lt; other
     &lt;/code&gt;
     , zero if
     &lt;code&gt;
      self == other
     &lt;/code&gt;
     , and positive if
     &lt;code&gt;
      self &amp;gt; other
     &lt;/code&gt;
     . It's usually best to define each comparison you need rather than define them all at once, but
     &lt;code&gt;
      __cmp__
     &lt;/code&gt;
     can be a good way to save repetition and improve clarity when you need all comparisons implemented with similar criteria.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __eq__(self, other)
     &lt;/code&gt;
     -  Defines behavior for the equality operator,
     &lt;code&gt;
      ==
     &lt;/code&gt;
     .
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __ne__(self, other)
     &lt;/code&gt;
     - Defines behavior for the inequality operator,
     &lt;code&gt;
      !=
     &lt;/code&gt;
     .
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __lt__(self, other)
     &lt;/code&gt;
     - Defines behavior for the less-than operator,
     &lt;code&gt;
      &amp;lt;
     &lt;/code&gt;
     .
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __gt__(self, other)
     &lt;/code&gt;
     - Defines behavior for the greater-than operator,
     &lt;code&gt;
      &amp;gt;
     &lt;/code&gt;
     .
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __le__(self, other)
     &lt;/code&gt;
     - Defines behavior for the less-than-or-equal-to operator,
     &lt;code&gt;
      &amp;lt;=
     &lt;/code&gt;
     .
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __ge__(self, other)
     &lt;/code&gt;
     - Defines behavior for the greater-than-or-equal-to operator,
     &lt;code&gt;
      &amp;gt;=
     &lt;/code&gt;
     .
    &lt;/li&gt;
   &lt;/ul&gt;
   &lt;p&gt;
    For an example, consider a class to model a word. We might want to compare words lexicographically (by the alphabet), which is the default comparison behavior for strings, but we also might want to do it based on some other criterion, like length or number of syllables. In this example, we'll compare by length. Here's an implementation:
   &lt;/p&gt;
   &lt;div class="highlight highlight-source-python"&gt;
    &lt;pre&gt;    &lt;span class="pl-k"&gt;class&lt;/span&gt; &lt;span class="pl-en"&gt;Word&lt;/span&gt;(&lt;span class="pl-c1"&gt;str&lt;/span&gt;):
        &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'''&lt;/span&gt;Class for words, defining comparison based on word length.&lt;span class="pl-pds"&gt;'''&lt;/span&gt;&lt;/span&gt;

        &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-c1"&gt;__new__&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-smi"&gt;cls&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-smi"&gt;word&lt;/span&gt;):
            &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Note that we have to use __new__. This is because str is an immutable&lt;/span&gt;
            &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; type, so we have to initialize it early (at creation)&lt;/span&gt;
            &lt;span class="pl-k"&gt;if&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt; &lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;in&lt;/span&gt; word:
                &lt;span class="pl-c1"&gt;print&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Value contains spaces. Truncating to first space.&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
                word &lt;span class="pl-k"&gt;=&lt;/span&gt; word[:word.index(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt; &lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;)] &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Word is now all chars before first space&lt;/span&gt;
            &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-c1"&gt;str&lt;/span&gt;.&lt;span class="pl-c1"&gt;__new__&lt;/span&gt;(&lt;span class="pl-c1"&gt;cls&lt;/span&gt;, word)

        &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-c1"&gt;__gt__&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-smi"&gt;self&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-smi"&gt;other&lt;/span&gt;):
            &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-c1"&gt;len&lt;/span&gt;(&lt;span class="pl-c1"&gt;self&lt;/span&gt;) &lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;len&lt;/span&gt;(other)
        &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-c1"&gt;__lt__&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-smi"&gt;self&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-smi"&gt;other&lt;/span&gt;):
            &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-c1"&gt;len&lt;/span&gt;(&lt;span class="pl-c1"&gt;self&lt;/span&gt;) &lt;span class="pl-k"&gt;&amp;lt;&lt;/span&gt; &lt;span class="pl-c1"&gt;len&lt;/span&gt;(other)
        &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-c1"&gt;__ge__&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-smi"&gt;self&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-smi"&gt;other&lt;/span&gt;):
            &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-c1"&gt;len&lt;/span&gt;(&lt;span class="pl-c1"&gt;self&lt;/span&gt;) &lt;span class="pl-k"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;len&lt;/span&gt;(other)
        &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-c1"&gt;__le__&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-smi"&gt;self&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-smi"&gt;other&lt;/span&gt;):
            &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-c1"&gt;len&lt;/span&gt;(&lt;span class="pl-c1"&gt;self&lt;/span&gt;) &lt;span class="pl-k"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;len&lt;/span&gt;(other)&lt;/pre&gt;
   &lt;/div&gt;
   &lt;br/&gt;
   &lt;p&gt;
    Now, we can create two
    &lt;code&gt;
     Words
    &lt;/code&gt;
    (by using
    &lt;code&gt;
     Word('foo')
    &lt;/code&gt;
    and
    &lt;code&gt;
     Word('bar')
    &lt;/code&gt;
    ) and compare them based on length. Note, however, that we didn't define
    &lt;code&gt;
     __eq__
    &lt;/code&gt;
    and
    &lt;code&gt;
     __ne__.
    &lt;/code&gt;
    This is because this would lead to some weird behavior (notably that
    &lt;code&gt;
     Word('foo') == Word('bar')
    &lt;/code&gt;
    would evaluate to true). It wouldn't make sense to test for equality based on length, so we fall back on str's implementation of equality.
   &lt;/p&gt;
   &lt;p&gt;
    Now would be a good time to note that you don't have to define every comparison magic method to get rich comparisons. The standard library has kindly provided us with a class decorator in the module
    &lt;code&gt;
     functools
    &lt;/code&gt;
    that will define all rich comparison methods if you only define
    &lt;code&gt;
     __eq__
    &lt;/code&gt;
    and one other (e.g.
    &lt;code&gt;
     __gt__
    &lt;/code&gt;
    ,
    &lt;code&gt;
     __lt__
    &lt;/code&gt;
    , etc.) This feature is only available in Python 2.7, but when you get a chance it saves a great deal of time and effort. You can use it by placing
    &lt;code&gt;
     @total_ordering
    &lt;/code&gt;
    above your class definition.
   &lt;/p&gt;
   &lt;h3&gt;
    &lt;a aria-hidden="true" class="anchor" href="#numeric-magic-methods" id="user-content-numeric-magic-methods"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Numeric magic methods
   &lt;/h3&gt;
   &lt;p&gt;
    Just like you can create ways for instances of your class to be compared with comparison operators, you can define behavior for numeric operators. Buckle your seat belts, folks, there's a lot of these. For organization's sake, I've split the numeric magic methods into 5 categories: unary operators, normal arithmetic operators, reflected arithmetic operators (more on this later), augmented assignment, and type conversions.
   &lt;/p&gt;
   &lt;h4&gt;
    &lt;a aria-hidden="true" class="anchor" href="#unary-operators-and-functions" id="user-content-unary-operators-and-functions"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Unary operators and functions
   &lt;/h4&gt;
   &lt;p&gt;
    Unary operators and functions only have one operand, e.g. negation, absolute value, etc.
   &lt;/p&gt;
   &lt;ul&gt;
    &lt;li&gt;
     &lt;code&gt;
      __pos__(self)
     &lt;/code&gt;
     - Implements behavior for unary positive (e.g.
     &lt;code&gt;
      +some_object
     &lt;/code&gt;
     )
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __neg__(self)
     &lt;/code&gt;
     - Implements behavior for negation (e.g.
     &lt;code&gt;
      -some_object
     &lt;/code&gt;
     )
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __abs__(self)
     &lt;/code&gt;
     - Implements behavior for the built in
     &lt;code&gt;
      abs()
     &lt;/code&gt;
     function.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __invert__(self)
     &lt;/code&gt;
     - Implements behavior for inversion using the ~ operator. For an explanation on what this does, see the Wikipedia article on bitwise operations.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __round__(self, n)
     &lt;/code&gt;
     - Implements behavior for the built in
     &lt;code&gt;
      round()
     &lt;/code&gt;
     function.
     &lt;code&gt;
      n
     &lt;/code&gt;
     is the number of decimal places to round to.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __floor__(self)
     &lt;/code&gt;
     - Implements behavior for
     &lt;code&gt;
      math.floor()
     &lt;/code&gt;
     , i.e., rounding down to the nearest integer.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __ceil__(self)
     &lt;/code&gt;
     - Implements behavior for
     &lt;code&gt;
      math.ceil()
     &lt;/code&gt;
     , i.e., rounding up to the nearest integer.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __trunc__(self)
     &lt;/code&gt;
     - Implements behavior for
     &lt;code&gt;
      math.trunc()
     &lt;/code&gt;
     , i.e., truncating to an integral.
    &lt;/li&gt;
   &lt;/ul&gt;
   &lt;h4&gt;
    &lt;a aria-hidden="true" class="anchor" href="#normal-arithmetic-operators" id="user-content-normal-arithmetic-operators"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Normal arithmetic operators
   &lt;/h4&gt;
   &lt;p&gt;
    Now, we cover the typical binary operators (and a function or two):
    &lt;code&gt;
     +
    &lt;/code&gt;
    ,
    &lt;code&gt;
     -
    &lt;/code&gt;
    ,
    &lt;code&gt;
     *
    &lt;/code&gt;
    and the like. These are, for the most part, pretty self-explanatory.
   &lt;/p&gt;
   &lt;ul&gt;
    &lt;li&gt;
     &lt;code&gt;
      __add__(self, other)
     &lt;/code&gt;
     - Implements addition.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __sub__(self, other)
     &lt;/code&gt;
     - Implements subtraction.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __mul__(self, other)
     &lt;/code&gt;
     - Implements multiplication.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __floordiv__(self, other)
     &lt;/code&gt;
     - Implements integer division using the
     &lt;code&gt;
      //
     &lt;/code&gt;
     operator.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __div__(self, other)
     &lt;/code&gt;
     - Implements division using the
     &lt;code&gt;
      /
     &lt;/code&gt;
     operator.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __truediv__(self, other)
     &lt;/code&gt;
     - Implements true division. Note that this only works when from
     &lt;code&gt;
      __future__ import division
     &lt;/code&gt;
     is in effect.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __mod__(self, other)
     &lt;/code&gt;
     - Implements modulo using the
     &lt;code&gt;
      %
     &lt;/code&gt;
     operator.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __divmod__(self, other)
     &lt;/code&gt;
     - Implements behavior for long division using the
     &lt;code&gt;
      divmod()
     &lt;/code&gt;
     built in function.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __pow__
     &lt;/code&gt;
     - Implements behavior for exponents using the
     &lt;code&gt;
      **
     &lt;/code&gt;
     operator.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __lshift__
     &lt;/code&gt;
     -(self, other) Implements left bitwise shift using the
     &lt;code&gt;
      &amp;lt;&amp;lt;
     &lt;/code&gt;
     operator.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __rshift__
     &lt;/code&gt;
     -(self, other) Implements right bitwise shift using the
     &lt;code&gt;
      &amp;gt;&amp;gt;
     &lt;/code&gt;
     operator.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __and__(self, other)
     &lt;/code&gt;
     - Implements bitwise and using the
     &lt;code&gt;
      &amp;amp;
     &lt;/code&gt;
     operator.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __or__(self, other)
     &lt;/code&gt;
     - Implements bitwise or using the
     &lt;code&gt;
      |
     &lt;/code&gt;
     operator.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __xor__(self, other)
     &lt;/code&gt;
     - Implements bitwise xor using the
     &lt;code&gt;
      ^
     &lt;/code&gt;
     operator.
    &lt;/li&gt;
   &lt;/ul&gt;
   &lt;h4&gt;
    &lt;a aria-hidden="true" class="anchor" href="#reflected-arithmetic-operators" id="user-content-reflected-arithmetic-operators"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Reflected arithmetic operators
   &lt;/h4&gt;
   &lt;p&gt;
    You know how I said I would get to reflected arithmetic in a bit? Some of you might think it's some big, scary, foreign concept. It's actually quite simple. Here's an example:
   &lt;/p&gt;
   &lt;div class="highlight highlight-source-python"&gt;
    &lt;pre&gt;    some_object &lt;span class="pl-k"&gt;+&lt;/span&gt; other&lt;/pre&gt;
   &lt;/div&gt;
   &lt;br/&gt;
   &lt;p&gt;
    That was "normal" addition. The reflected equivalent is the same thing, except with the operands switched around:
   &lt;/p&gt;
   &lt;div class="highlight highlight-source-python"&gt;
    &lt;pre&gt;    other &lt;span class="pl-k"&gt;+&lt;/span&gt; some_object&lt;/pre&gt;
   &lt;/div&gt;
   &lt;br/&gt;
   &lt;p&gt;
    So, all of these magic methods do the same thing as their normal equivalents, except the perform the operation with other as the first operand and self as the second, rather than the other way around. In most cases, the result of a reflected operation is the same as its normal equivalent, so you may just end up defining
    &lt;code&gt;
     __radd__
    &lt;/code&gt;
    as calling
    &lt;code&gt;
     __add__
    &lt;/code&gt;
    and so on. Note that the object on the left hand side of the operator (
    &lt;code&gt;
     other
    &lt;/code&gt;
    in the example) must not define (or return
    &lt;code&gt;
     NotImplemented
    &lt;/code&gt;
    ) for its definition of the non-reflected version of an operation. For instance, in the example,
    &lt;code&gt;
     some_object.__radd__
    &lt;/code&gt;
    will only be called if other does not define
    &lt;code&gt;
     __add__
    &lt;/code&gt;
    .
   &lt;/p&gt;
   &lt;ul&gt;
    &lt;li&gt;
     &lt;code&gt;
      __radd__(self, other)
     &lt;/code&gt;
     - Implements reflected addition.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __rsub__(self, other)
     &lt;/code&gt;
     - Implements reflected subtraction.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __rmul__(self, other)
     &lt;/code&gt;
     - Implements reflected multiplication.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __rfloordiv__(self, other)
     &lt;/code&gt;
     - Implements reflected integer division using the
     &lt;code&gt;
      //
     &lt;/code&gt;
     operator.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __rdiv__(self, other)
     &lt;/code&gt;
     - Implements reflected division using the
     &lt;code&gt;
      /
     &lt;/code&gt;
     operator.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __rtruediv__(self, other)
     &lt;/code&gt;
     - Implements reflected true division. Note that this only works when from
     &lt;code&gt;
      __future__ import division
     &lt;/code&gt;
     is in effect.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __rmod__(self, other)
     &lt;/code&gt;
     - Implements reflected modulo using the
     &lt;code&gt;
      %
     &lt;/code&gt;
     operator.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __rdivmod__(self, other)
     &lt;/code&gt;
     - Implements behavior for long division using the
     &lt;code&gt;
      divmod()
     &lt;/code&gt;
     built in function, when
     &lt;code&gt;
      divmod(other, self)
     &lt;/code&gt;
     is called.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __rpow__
     &lt;/code&gt;
     - Implements behavior for reflected exponents using the
     &lt;code&gt;
      **
     &lt;/code&gt;
     operator.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __rlshift__(self, other)
     &lt;/code&gt;
     - Implements reflected left bitwise shift using the
     &lt;code&gt;
      &amp;lt;&amp;lt;
     &lt;/code&gt;
     operator.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __rrshift__(self, other)
     &lt;/code&gt;
     - Implements reflected right bitwise shift using the
     &lt;code&gt;
      &amp;gt;&amp;gt;
     &lt;/code&gt;
     operator.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __rand__(self, other)
     &lt;/code&gt;
     - Implements reflected bitwise and using the
     &lt;code&gt;
      &amp;amp;
     &lt;/code&gt;
     operator.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __ror__(self, other)
     &lt;/code&gt;
     - Implements reflected bitwise or using the
     &lt;code&gt;
      |
     &lt;/code&gt;
     operator.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __rxor__(self, other)
     &lt;/code&gt;
     - Implements reflected bitwise xor using the
     &lt;code&gt;
      ^
     &lt;/code&gt;
     operator.
    &lt;/li&gt;
   &lt;/ul&gt;
   &lt;h4&gt;
    &lt;a aria-hidden="true" class="anchor" href="#augmented-assignment" id="user-content-augmented-assignment"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Augmented assignment
   &lt;/h4&gt;
   &lt;p&gt;
    Python also has a wide variety of magic methods to allow custom behavior to be defined for augmented assignment. You're probably already familiar with augmented assignment, it combines "normal" operators with assignment. If you still don't know what I'm talking about, here's an example:
   &lt;/p&gt;
   &lt;div class="highlight highlight-source-python"&gt;
    &lt;pre&gt;    x &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt;
    x &lt;span class="pl-k"&gt;+=&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; in other words x = x + 1&lt;/span&gt;&lt;/pre&gt;
   &lt;/div&gt;
   &lt;br/&gt;
   &lt;p&gt;
    Each of these methods should return the value that the variable on the left hand side should be assigned to (for instance, for
    &lt;code&gt;
     a += b
    &lt;/code&gt;
    ,
    &lt;code&gt;
     __iadd__
    &lt;/code&gt;
    might return
    &lt;code&gt;
     a + b
    &lt;/code&gt;
    , which would be assigned to
    &lt;code&gt;
     a
    &lt;/code&gt;
    ). Here's the list:
   &lt;/p&gt;
   &lt;ul&gt;
    &lt;li&gt;
     &lt;code&gt;
      __iadd__(self, other)
     &lt;/code&gt;
     - Implements addition with assignment.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __isub__(self, other)
     &lt;/code&gt;
     - Implements subtraction with assignment.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __imul__(self, other)
     &lt;/code&gt;
     - Implements multiplication with assignment.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __ifloordiv__(self, other)
     &lt;/code&gt;
     - Implements integer division with assignment using the
     &lt;code&gt;
      //=
     &lt;/code&gt;
     operator.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __idiv__(self, other)
     &lt;/code&gt;
     - Implements division with assignment using the
     &lt;code&gt;
      /=
     &lt;/code&gt;
     operator.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __itruediv__(self, other)
     &lt;/code&gt;
     - Implements true division with assignment. Note that this only works when from
     &lt;code&gt;
      __future__ import division
     &lt;/code&gt;
     is in effect.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __imod__(self, other)
     &lt;/code&gt;
     - Implements modulo with assignment using the
     &lt;code&gt;
      %=
     &lt;/code&gt;
     operator.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __ipow__
     &lt;/code&gt;
     - Implements behavior for exponents with assignment using the
     &lt;code&gt;
      **=
     &lt;/code&gt;
     operator.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __ilshift__(self, other)
     &lt;/code&gt;
     - Implements left bitwise shift with assignment using the
     &lt;code&gt;
      &amp;lt;&amp;lt;=
     &lt;/code&gt;
     operator.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __irshift__(self, other)
     &lt;/code&gt;
     - Implements right bitwise shift with assignment using the
     &lt;code&gt;
      &amp;gt;&amp;gt;=
     &lt;/code&gt;
     operator.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __iand__(self, other)
     &lt;/code&gt;
     - Implements bitwise and with assignment using the
     &lt;code&gt;
      &amp;amp;=
     &lt;/code&gt;
     operator.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __ior__(self, other)
     &lt;/code&gt;
     - Implements bitwise or with assignment using the
     &lt;code&gt;
      |=
     &lt;/code&gt;
     operator.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __ixor__(self, other)
     &lt;/code&gt;
     - Implements bitwise xor with assignment using the
     &lt;code&gt;
      ^=
     &lt;/code&gt;
     operator.
    &lt;/li&gt;
   &lt;/ul&gt;
   &lt;h4&gt;
    &lt;a aria-hidden="true" class="anchor" href="#type-conversion-magic-methods" id="user-content-type-conversion-magic-methods"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Type conversion magic methods
   &lt;/h4&gt;
   &lt;p&gt;
    Python also has an array of magic methods designed to implement behavior for built in type conversion functions like float(). Here they are:
   &lt;/p&gt;
   &lt;ul&gt;
    &lt;li&gt;
     &lt;code&gt;
      __int__(self)
     &lt;/code&gt;
     - Implements type conversion to int.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __long__(self)
     &lt;/code&gt;
     - Implements type conversion to long.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __float__(self)
     &lt;/code&gt;
     - Implements type conversion to float.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __complex__(self)
     &lt;/code&gt;
     - Implements type conversion to complex.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __oct__(self)
     &lt;/code&gt;
     - Implements type conversion to octal.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __hex__(self)
     &lt;/code&gt;
     - Implements type conversion to hexadecimal.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __index__(self)
     &lt;/code&gt;
     - Implements type conversion to an int when the object is used in a slice expression. If you define a custom numeric type that might be used in slicing, you should define
     &lt;code&gt;
      __index__
     &lt;/code&gt;
     .
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __trunc__(self)
     &lt;/code&gt;
     - Called when
     &lt;code&gt;
      math.trunc(self)
     &lt;/code&gt;
     is called.
     &lt;code&gt;
      __trunc__
     &lt;/code&gt;
     should return the value of self truncated to an integral type (usually a long).
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __coerce__(self, other)
     &lt;/code&gt;
     - Method to implement mixed mode arithmetic.
     &lt;code&gt;
      __coerce__
     &lt;/code&gt;
     should return None if type conversion is impossible. Otherwise, it should return a pair (2-tuple) of
     &lt;code&gt;
      self
     &lt;/code&gt;
     and
     &lt;code&gt;
      other
     &lt;/code&gt;
     , manipulated to have the same type.
    &lt;/li&gt;
   &lt;/ul&gt;
   &lt;h2&gt;
    &lt;a aria-hidden="true" class="anchor" href="#representing-your-classes" id="user-content-representing-your-classes"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Representing your Classes
   &lt;/h2&gt;
   &lt;p&gt;
    It's often useful to have a string representation of a class. In Python, there's a few methods that you can implement in your class definition to customize how built in functions that return representations of your class behave.
   &lt;/p&gt;
   &lt;ul&gt;
    &lt;li&gt;
     &lt;code&gt;
      __str__(self)
     &lt;/code&gt;
     - Defines behavior for when
     &lt;code&gt;
      str()
     &lt;/code&gt;
     is called on an instance of your class.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __repr__(self)
     &lt;/code&gt;
     - Defines behavior for when
     &lt;code&gt;
      repr()
     &lt;/code&gt;
     is called on an instance of your class. The major difference between
     &lt;code&gt;
      str()
     &lt;/code&gt;
     and
     &lt;code&gt;
      repr()
     &lt;/code&gt;
     is intended audience.
     &lt;code&gt;
      repr()
     &lt;/code&gt;
     is intended to produce output that is mostly machine-readable (in many cases, it could be valid Python code even), whereas
     &lt;code&gt;
      str()
     &lt;/code&gt;
     is intended to be human-readable.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __unicode__(self)
     &lt;/code&gt;
     - Defines behavior for when
     &lt;code&gt;
      unicode()
     &lt;/code&gt;
     is called on an instance of your class.
     &lt;code&gt;
      unicode()
     &lt;/code&gt;
     is like
     &lt;code&gt;
      str()
     &lt;/code&gt;
     , but it returns a unicode string. Be wary: if a client calls
     &lt;code&gt;
      str()
     &lt;/code&gt;
     on an instance of your class and you've only defined
     &lt;code&gt;
      __unicode__()
     &lt;/code&gt;
     , it won't work. You should always try to define
     &lt;code&gt;
      __str__()
     &lt;/code&gt;
     as well in case someone doesn't have the luxury of using unicode.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __format__(self, formatstr)
     &lt;/code&gt;
     - Defines behavior for when an instance of your class is used in new-style string formatting. For instance,
     &lt;code&gt;
      "Hello, {0:abc}!".format(a)
     &lt;/code&gt;
     would lead to the call
     &lt;code&gt;
      a.__format__("abc")
     &lt;/code&gt;
     . This can be useful for defining your own numerical or string types that you might like to give special formatting options.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __hash__(self)
     &lt;/code&gt;
     - Defines behavior for when
     &lt;code&gt;
      hash()
     &lt;/code&gt;
     is called on an instance of your class. It has to return an integer, and its result is used for quick key comparison in dictionaries. Note that this usually entails implementing
     &lt;code&gt;
      __eq__
     &lt;/code&gt;
     as well. Live by the following rule:
     &lt;code&gt;
      a == b
     &lt;/code&gt;
     implies
     &lt;code&gt;
      hash(a) == hash(b)
     &lt;/code&gt;
     .
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __nonzero__(self)
     &lt;/code&gt;
     - Defines behavior for when
     &lt;code&gt;
      bool()
     &lt;/code&gt;
     is called on an instance of your class. Should return
     &lt;code&gt;
      True
     &lt;/code&gt;
     or
     &lt;code&gt;
      False
     &lt;/code&gt;
     , depending on whether you would want to consider the instance to be
     &lt;code&gt;
      True
     &lt;/code&gt;
     or
     &lt;code&gt;
      False.
     &lt;/code&gt;
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __dir__(self)
     &lt;/code&gt;
     - Defines behavior for when
     &lt;code&gt;
      dir()
     &lt;/code&gt;
     is called on an instance of your class. This method should return a list of attributes for the user. Typically, implementing
     &lt;code&gt;
      __dir__
     &lt;/code&gt;
     is unnecessary, but it can be vitally important for interactive use of your classes if you redefine
     &lt;code&gt;
      __getattr__
     &lt;/code&gt;
     or
     &lt;code&gt;
      __getattribute__
     &lt;/code&gt;
     (which you will see in the next section) or are otherwise dynamically generating attributes.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __sizeof__(self)
     &lt;/code&gt;
     - Defines behavior for when
     &lt;code&gt;
      sys.getsizeof()
     &lt;/code&gt;
     is called on an instance of your class. This should return the size of your object, in bytes. This is generally more useful for Python classes implemented in C extensions, but it helps to be aware of it.
    &lt;/li&gt;
   &lt;/ul&gt;
   &lt;p&gt;
    We're pretty much done with the boring (and example-free) part of the magic methods guide. Now that we've covered some of the more basic magic methods, it's time to move to more advanced material.
   &lt;/p&gt;
   &lt;h2&gt;
    &lt;a aria-hidden="true" class="anchor" href="#controlling-attribute-access" id="user-content-controlling-attribute-access"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Controlling Attribute Access
   &lt;/h2&gt;
   &lt;p&gt;
    Many people coming to Python from other languages complain that it lacks true encapsulation for classes (e.g. no way to define private attributes and then have public getter and setters). This couldn't be farther than the truth: it just happens that Python accomplishes a great deal of encapsulation through "magic", instead of explicit modifiers for methods or fields. Take a look:
   &lt;/p&gt;
   &lt;ul&gt;
    &lt;li&gt;
     &lt;code&gt;
      __getattr__(self, name)
     &lt;/code&gt;
     - You can define behavior for when a user attempts to access an attribute that doesn't exist (either at all or yet). This can be useful for catching and redirecting common misspellings, giving warnings about using deprecated attributes (you can still choose to compute and return that attribute, if you wish), or deftly handing an
     &lt;code&gt;
      -AttributeError
     &lt;/code&gt;
     . It only gets called when a nonexistent attribute is accessed, however, so it isn't a true encapsulation solution.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __setattr__(self, name, value)
     &lt;/code&gt;
     - Unlike
     &lt;code&gt;
      __getattr__
     &lt;/code&gt;
     ,
     &lt;code&gt;
      __setattr__
     &lt;/code&gt;
     is an encapsulation solution. It allows you to define behavior for assignment to an attribute regardless of whether or not that attribute exists, meaning you can define custom rules for any changes in the values of attributes. However, you have to be careful with how you use
     &lt;code&gt;
      __setattr__
     &lt;/code&gt;
     , as the example at the end of the list will show.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __delattr__(self, name)
     &lt;/code&gt;
     - This is the exact same as
     &lt;code&gt;
      __setattr__
     &lt;/code&gt;
     , but for deleting attributes instead of setting them. The same precautions need to be taken as with
     &lt;code&gt;
      __setattr__
     &lt;/code&gt;
     as well in order to prevent infinite recursion (calling
     &lt;code&gt;
      del self.name
     &lt;/code&gt;
     in the implementation of
     &lt;code&gt;
      __delattr__
     &lt;/code&gt;
     would cause infinite recursion).
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __getattribute__(self, name)
     &lt;/code&gt;
     - After all this,
     &lt;code&gt;
      __getattribute__
     &lt;/code&gt;
     fits in pretty well with its companions
     &lt;code&gt;
      __setattr__
     &lt;/code&gt;
     and
     &lt;code&gt;
      __delattr__
     &lt;/code&gt;
     . However, I don't recommend you use it.
     &lt;code&gt;
      __getattribute__
     &lt;/code&gt;
     can only be used with new-style classes (all classes are new-style in the newest versions of Python, and in older versions you can make a class new-style by subclassing object. It allows you to define rules for whenever an attribute's value is accessed. It suffers from some similar infinite recursion problems as its partners-in-crime (this time you call the base class's
     &lt;code&gt;
      __getattribute__
     &lt;/code&gt;
     method to prevent this). It also mainly obviates the need for
     &lt;code&gt;
      __getattr__
     &lt;/code&gt;
     , which only gets called when
     &lt;code&gt;
      __getattribute__
     &lt;/code&gt;
     is implemented if it is called explicitly or an
     &lt;code&gt;
      AttributeError
     &lt;/code&gt;
     is raised. This method can be used (after all, it's your choice), but I don't recommend it because it has a small use case (it's far more rare that we need special behavior to retrieve a value than to assign to it) and because it can be really difficult to implement bug-free.
    &lt;/li&gt;
   &lt;/ul&gt;
   &lt;p&gt;
    You can easily cause a problem in your definitions of any of the methods controlling attribute access. Consider this example:
   &lt;/p&gt;
   &lt;div class="highlight highlight-source-python"&gt;
    &lt;pre&gt;    &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-c1"&gt;__setattr__&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-smi"&gt;self&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-smi"&gt;name&lt;/span&gt;, &lt;span class="pl-smi"&gt;value&lt;/span&gt;):
        &lt;span class="pl-c1"&gt;self&lt;/span&gt;.name &lt;span class="pl-k"&gt;=&lt;/span&gt; value
        &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; since every time an attribute is assigned, __setattr__() is called, this&lt;/span&gt;
        &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; is recursion.&lt;/span&gt;
        &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; so this really means self.__setattr__('name', value). Since the method&lt;/span&gt;
        &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; keeps calling itself, the recursion goes on forever causing a crash&lt;/span&gt;

    &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-c1"&gt;__setattr__&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-smi"&gt;self&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-smi"&gt;name&lt;/span&gt;, &lt;span class="pl-smi"&gt;value&lt;/span&gt;):
        &lt;span class="pl-c1"&gt;self&lt;/span&gt;.&lt;span class="pl-c1"&gt;__dict__&lt;/span&gt;[name] &lt;span class="pl-k"&gt;=&lt;/span&gt; value &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; assigning to the dict of names in the class&lt;/span&gt;
        &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; define custom behavior here&lt;/span&gt;&lt;/pre&gt;
   &lt;/div&gt;
   &lt;br/&gt;
   &lt;p&gt;
    Again, Python's magic methods are incredibly powerful, and with great power comes great responsibility. It's important to know the proper way to use magic methods so you don't break any code.
   &lt;/p&gt;
   &lt;p&gt;
    So, what have we learned about custom attribute access in Python? It's not to be used lightly. In fact, it tends to be excessively powerful and counter-intuitive. But the reason why it exists is to scratch a certain itch: Python doesn't seek to make bad things impossible, but just to make them difficult. Freedom is paramount, so you can really do whatever you want. Here's an example of some of the special attribute access methods in action (note that we use super because not all classes have an attribute
    &lt;code&gt;
     __dict__
    &lt;/code&gt;
    ):
   &lt;/p&gt;
   &lt;div class="highlight highlight-source-python"&gt;
    &lt;pre&gt;    &lt;span class="pl-k"&gt;class&lt;/span&gt; &lt;span class="pl-en"&gt;AccessCounter&lt;/span&gt;(&lt;span class="pl-c1"&gt;object&lt;/span&gt;):
        &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'''&lt;/span&gt;A class that contains a value and implements an access counter.&lt;/span&gt;
&lt;span class="pl-s"&gt;        The counter increments each time the value is changed.&lt;span class="pl-pds"&gt;'''&lt;/span&gt;&lt;/span&gt;

        &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-c1"&gt;__init__&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-smi"&gt;self&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-smi"&gt;val&lt;/span&gt;):
            &lt;span class="pl-c1"&gt;super&lt;/span&gt;(AccessCounter, &lt;span class="pl-c1"&gt;self&lt;/span&gt;).&lt;span class="pl-c1"&gt;__setattr__&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;counter&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;0&lt;/span&gt;)
            &lt;span class="pl-c1"&gt;super&lt;/span&gt;(AccessCounter, &lt;span class="pl-c1"&gt;self&lt;/span&gt;).&lt;span class="pl-c1"&gt;__setattr__&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;value&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;, val)

        &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-c1"&gt;__setattr__&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-smi"&gt;self&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-smi"&gt;name&lt;/span&gt;, &lt;span class="pl-smi"&gt;value&lt;/span&gt;):
            &lt;span class="pl-k"&gt;if&lt;/span&gt; name &lt;span class="pl-k"&gt;==&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;value&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;:
                &lt;span class="pl-c1"&gt;super&lt;/span&gt;(AccessCounter, &lt;span class="pl-c1"&gt;self&lt;/span&gt;).&lt;span class="pl-c1"&gt;__setattr__&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;counter&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;self&lt;/span&gt;.counter &lt;span class="pl-k"&gt;+&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;)
            &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Make this unconditional.&lt;/span&gt;
            &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; If you want to prevent other attributes to be set, raise AttributeError(name)&lt;/span&gt;
            &lt;span class="pl-c1"&gt;super&lt;/span&gt;(AccessCounter, &lt;span class="pl-c1"&gt;self&lt;/span&gt;).&lt;span class="pl-c1"&gt;__setattr__&lt;/span&gt;(name, value)

        &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-c1"&gt;__delattr__&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-smi"&gt;self&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-smi"&gt;name&lt;/span&gt;):
            &lt;span class="pl-k"&gt;if&lt;/span&gt; name &lt;span class="pl-k"&gt;==&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;value&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;:
                &lt;span class="pl-c1"&gt;super&lt;/span&gt;(AccessCounter, &lt;span class="pl-c1"&gt;self&lt;/span&gt;).&lt;span class="pl-c1"&gt;__setattr__&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;counter&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;self&lt;/span&gt;.counter &lt;span class="pl-k"&gt;+&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;)
            &lt;span class="pl-c1"&gt;super&lt;/span&gt;(AccessCounter, &lt;span class="pl-c1"&gt;self&lt;/span&gt;).&lt;span class="pl-c1"&gt;__delattr__&lt;/span&gt;(name)&lt;/pre&gt;
   &lt;/div&gt;
   &lt;br/&gt;
   &lt;h2&gt;
    &lt;a aria-hidden="true" class="anchor" href="#making-custom-sequences" id="user-content-making-custom-sequences"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Making Custom Sequences
   &lt;/h2&gt;
   &lt;p&gt;
    There's a number of ways to get your Python classes to act like built in sequences (dict, tuple, list, string, etc.). These are by far my favorite magic methods in Python because of the absurd degree of control they give you and the way that they magically make a whole array of global functions work beautifully on instances of your class. But before we get down to the good stuff, a quick word on requirements.
   &lt;/p&gt;
   &lt;h3&gt;
    &lt;a aria-hidden="true" class="anchor" href="#requirements" id="user-content-requirements"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Requirements
   &lt;/h3&gt;
   &lt;p&gt;
    Now that we're talking about creating your own sequences in Python, it's time to talk about protocols. Protocols are somewhat similar to interfaces in other languages in that they give you a set of methods you must define. However, in Python protocols are totally informal and require no explicit declarations to implement. Rather, they're more like guidelines.
   &lt;/p&gt;
   &lt;p&gt;
    Why are we talking about protocols now? Because implementing custom container types in Python involves using some of these protocols. First, there's the protocol for defining immutable containers: to make an immutable container, you need only define
    &lt;code&gt;
     __len__
    &lt;/code&gt;
    and
    &lt;code&gt;
     __getitem__
    &lt;/code&gt;
    (more on these later). The mutable container protocol requires everything that immutable containers require plus
    &lt;code&gt;
     __setitem__
    &lt;/code&gt;
    and
    &lt;code&gt;
     __delitem__.
    &lt;/code&gt;
    Lastly, if you want your object to be iterable, you'll have to define
    &lt;code&gt;
     __iter__
    &lt;/code&gt;
    , which returns an iterator. That iterator must conform to an iterator protocol, which requires iterators to have methods called
    &lt;code&gt;
     __iter__
    &lt;/code&gt;
    (returning itself) and
    &lt;code&gt;
     next
    &lt;/code&gt;
    .
   &lt;/p&gt;
   &lt;h3&gt;
    &lt;a aria-hidden="true" class="anchor" href="#the-magic-behind-containers" id="user-content-the-magic-behind-containers"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    The magic behind containers
   &lt;/h3&gt;
   &lt;p&gt;
    Without any more wait, here are the magic methods that containers use:
   &lt;/p&gt;
   &lt;ul&gt;
    &lt;li&gt;
     &lt;code&gt;
      __len__(self)
     &lt;/code&gt;
     - Returns the length of the container. Part of the protocol for both immutable and mutable containers.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __getitem__(self, key)
     &lt;/code&gt;
     - Defines behavior for when an item is accessed, using the notation
     &lt;code&gt;
      self[key]
     &lt;/code&gt;
     . This is also part of both the mutable and immutable container protocols. It should also raise appropriate exceptions:
     &lt;code&gt;
      TypeError
     &lt;/code&gt;
     if the type of the key is wrong and
     &lt;code&gt;
      KeyError
     &lt;/code&gt;
     if there is no corresponding value for the key.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __setitem__(self, key, value)
     &lt;/code&gt;
     - Defines behavior for when an item is assigned to, using the notation
     &lt;code&gt;
      self[nkey] = value
     &lt;/code&gt;
     . This is part of the mutable container protocol. Again, you should raise
     &lt;code&gt;
      KeyError
     &lt;/code&gt;
     and
     &lt;code&gt;
      TypeError
     &lt;/code&gt;
     where appropriate.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __delitem__(self, key)
     &lt;/code&gt;
     - Defines behavior for when an item is deleted (e.g.
     &lt;code&gt;
      del self[key]
     &lt;/code&gt;
     ). This is only part of the mutable container protocol. You must raise the appropriate exceptions when an invalid key is used.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __iter__(self)
     &lt;/code&gt;
     - Should return an iterator for the container. Iterators are returned in a number of contexts, most notably by the
     &lt;code&gt;
      iter()
     &lt;/code&gt;
     built in function and when a container is looped over using the form
     &lt;code&gt;
      for x in container:
     &lt;/code&gt;
     . Iterators are their own objects, and they also must define an
     &lt;code&gt;
      __iter__
     &lt;/code&gt;
     method that returns
     &lt;code&gt;
      self
     &lt;/code&gt;
     .
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __reversed__(self)
     &lt;/code&gt;
     - Called to implement behavior for the
     &lt;code&gt;
      reversed()
     &lt;/code&gt;
     built in function. Should return a reversed version of the sequence. Implement this only if the sequence class is ordered, like list or tuple.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __contains__(self, item)
     &lt;/code&gt;
     -
     &lt;code&gt;
      __contains__
     &lt;/code&gt;
     defines behavior for membership tests using in and not in. Why isn't this part of a sequence protocol, you ask? Because when
     &lt;code&gt;
      __contains__
     &lt;/code&gt;
     isn't defined, Python just iterates over the sequence and returns
     &lt;code&gt;
      True
     &lt;/code&gt;
     if it comes across the item it's looking for.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __missing__(self, key)
     &lt;/code&gt;
     -
     &lt;code&gt;
      __missing__
     &lt;/code&gt;
     is used in subclasses of
     &lt;code&gt;
      dict
     &lt;/code&gt;
     . It defines behavior for whenever a key is accessed that does not exist in a dictionary (so, for instance, if I had a dictionary
     &lt;code&gt;
      d
     &lt;/code&gt;
     and said
     &lt;code&gt;
      d["george"]
     &lt;/code&gt;
     when "george" is not a key in the dict,
     &lt;code&gt;
      d.__missing__("george")
     &lt;/code&gt;
     would be called).
    &lt;/li&gt;
   &lt;/ul&gt;
   &lt;h3&gt;
    &lt;a aria-hidden="true" class="anchor" href="#an-example" id="user-content-an-example"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    An example
   &lt;/h3&gt;
   &lt;p&gt;
    For our example, let's look at a list that implements some functional constructs that you might be used to from other languages (Haskell, for example).
   &lt;/p&gt;
   &lt;div class="highlight highlight-source-python"&gt;
    &lt;pre&gt;    &lt;span class="pl-k"&gt;class&lt;/span&gt; &lt;span class="pl-en"&gt;FunctionalList&lt;/span&gt;:
        &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'''&lt;/span&gt;A class wrapping a list with some extra functional magic, like head,&lt;/span&gt;
&lt;span class="pl-s"&gt;        tail, init, last, drop, and take.&lt;span class="pl-pds"&gt;'''&lt;/span&gt;&lt;/span&gt;

        &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-c1"&gt;__init__&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-smi"&gt;self&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-smi"&gt;values&lt;/span&gt;&lt;span class="pl-k"&gt;=&lt;/span&gt;&lt;span class="pl-c1"&gt;None&lt;/span&gt;):
            &lt;span class="pl-k"&gt;if&lt;/span&gt; values &lt;span class="pl-k"&gt;is&lt;/span&gt; &lt;span class="pl-c1"&gt;None&lt;/span&gt;:
                &lt;span class="pl-c1"&gt;self&lt;/span&gt;.values &lt;span class="pl-k"&gt;=&lt;/span&gt; []
            &lt;span class="pl-k"&gt;else&lt;/span&gt;:
                &lt;span class="pl-c1"&gt;self&lt;/span&gt;.values &lt;span class="pl-k"&gt;=&lt;/span&gt; values

        &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-c1"&gt;__len__&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-smi"&gt;self&lt;/span&gt;&lt;/span&gt;):
            &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-c1"&gt;len&lt;/span&gt;(&lt;span class="pl-c1"&gt;self&lt;/span&gt;.values)

        &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-c1"&gt;__getitem__&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-smi"&gt;self&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-smi"&gt;key&lt;/span&gt;):
            &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; if key is of invalid type or value, the list values will raise the error&lt;/span&gt;
            &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-c1"&gt;self&lt;/span&gt;.values[key]

        &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-c1"&gt;__setitem__&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-smi"&gt;self&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-smi"&gt;key&lt;/span&gt;, &lt;span class="pl-smi"&gt;value&lt;/span&gt;):
            &lt;span class="pl-c1"&gt;self&lt;/span&gt;.values[key] &lt;span class="pl-k"&gt;=&lt;/span&gt; value

        &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-c1"&gt;__delitem__&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-smi"&gt;self&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-smi"&gt;key&lt;/span&gt;):
            &lt;span class="pl-k"&gt;del&lt;/span&gt; &lt;span class="pl-c1"&gt;self&lt;/span&gt;.values[key]

        &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-c1"&gt;__iter__&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-smi"&gt;self&lt;/span&gt;&lt;/span&gt;):
            &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-c1"&gt;iter&lt;/span&gt;(&lt;span class="pl-c1"&gt;self&lt;/span&gt;.values)

        &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-c1"&gt;__reversed__&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-smi"&gt;self&lt;/span&gt;&lt;/span&gt;):
            &lt;span class="pl-k"&gt;return&lt;/span&gt; FunctionalList(&lt;span class="pl-c1"&gt;reversed&lt;/span&gt;(&lt;span class="pl-c1"&gt;self&lt;/span&gt;.values))

        &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;append&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-smi"&gt;self&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-smi"&gt;value&lt;/span&gt;):
            &lt;span class="pl-c1"&gt;self&lt;/span&gt;.values.append(value)
        &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;head&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-smi"&gt;self&lt;/span&gt;&lt;/span&gt;):
            &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; get the first element&lt;/span&gt;
            &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-c1"&gt;self&lt;/span&gt;.values[&lt;span class="pl-c1"&gt;0&lt;/span&gt;]
        &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;tail&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-smi"&gt;self&lt;/span&gt;&lt;/span&gt;):
            &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; get all elements after the first&lt;/span&gt;
            &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-c1"&gt;self&lt;/span&gt;.values[&lt;span class="pl-c1"&gt;1&lt;/span&gt;:]
        &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;init&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-smi"&gt;self&lt;/span&gt;&lt;/span&gt;):
            &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; get elements up to the last&lt;/span&gt;
            &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-c1"&gt;self&lt;/span&gt;.values[:&lt;span class="pl-k"&gt;-&lt;/span&gt;&lt;span class="pl-c1"&gt;1&lt;/span&gt;]
        &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;last&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-smi"&gt;self&lt;/span&gt;&lt;/span&gt;):
            &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; get last element&lt;/span&gt;
            &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-c1"&gt;self&lt;/span&gt;.values[&lt;span class="pl-k"&gt;-&lt;/span&gt;&lt;span class="pl-c1"&gt;1&lt;/span&gt;]
        &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;drop&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-smi"&gt;self&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-smi"&gt;n&lt;/span&gt;):
            &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; get all elements except first n&lt;/span&gt;
            &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-c1"&gt;self&lt;/span&gt;.values[n:]
        &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;take&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-smi"&gt;self&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-smi"&gt;n&lt;/span&gt;):
            &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; get first n elements&lt;/span&gt;
            &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-c1"&gt;self&lt;/span&gt;.values[:n]&lt;/pre&gt;
   &lt;/div&gt;
   &lt;br/&gt;
   &lt;p&gt;
    There you have it, a (marginally) useful example of how to implement your own sequence. Of course, there are more useful applications of custom sequences, but quite a few of them are already implemented in the standard library (batteries included, right?), like Counter, OrderedDict, and NamedTuple.
   &lt;/p&gt;
   &lt;h2&gt;
    &lt;a aria-hidden="true" class="anchor" href="#reflection" id="user-content-reflection"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Reflection
   &lt;/h2&gt;
   &lt;p&gt;
    You can also control how reflection using the built in functions
    &lt;code&gt;
     isinstance()
    &lt;/code&gt;
    and
    &lt;code&gt;
     issubclass()
    &lt;/code&gt;
    behaves by defining magic methods. The magic methods are:
   &lt;/p&gt;
   &lt;div class="highlight highlight-source-python"&gt;
    &lt;pre&gt;    &lt;span class="pl-c1"&gt;__instancecheck__&lt;/span&gt;(&lt;span class="pl-c1"&gt;self&lt;/span&gt;, instance) Checks &lt;span class="pl-k"&gt;if&lt;/span&gt; an instance &lt;span class="pl-k"&gt;is&lt;/span&gt; an instance of the &lt;span class="pl-k"&gt;class&lt;/span&gt; you defined (e.g. &lt;span class="pl-c1"&gt;isinstance&lt;/span&gt;(instance, &lt;span class="pl-k"&gt;class&lt;/span&gt;).
    &lt;span class="pl-c1"&gt;__subclasscheck__&lt;/span&gt;(&lt;span class="pl-c1"&gt;self&lt;/span&gt;, subclass) Checks &lt;span class="pl-k"&gt;if&lt;/span&gt; a &lt;span class="pl-k"&gt;class&lt;/span&gt; subclasses the &lt;span class="pl-k"&gt;class&lt;/span&gt; you defined (e.g. &lt;span class="pl-c1"&gt;issubclass&lt;/span&gt;(subclass, &lt;span class="pl-k"&gt;class&lt;/span&gt;)).&lt;/pre&gt;
   &lt;/div&gt;
   &lt;br/&gt;
   &lt;p&gt;
    The use case for these magic methods might seem small, and that may very well be true. I won't spend too much more time on reflection magic methods because they aren't very important, but they reflect something important about object-oriented programming in Python and Python in general: there is almost always an easy way to do something, even if it's rarely necessary. These magic methods might not seem useful, but if you ever need them you'll be glad that they're there (and that you read this guide!).
   &lt;/p&gt;
   &lt;h2&gt;
    &lt;a aria-hidden="true" class="anchor" href="#callable-objects" id="user-content-callable-objects"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Callable Objects
   &lt;/h2&gt;
   &lt;p&gt;
    As you may already know, in Python, functions are first-class objects. This means that they can be passed to functions and methods just as if they were objects of any other kind. This is an incredibly powerful feature.
   &lt;/p&gt;
   &lt;p&gt;
    A special magic method in Python allows instances of your classes to behave as if they were functions, so that you can "call" them, pass them to functions that take functions as arguments, and so on. This is another powerful convenience feature that makes programming in Python that much sweeter.
   &lt;/p&gt;
   &lt;ul&gt;
    &lt;li&gt;
     &lt;code&gt;
      __call__(self, [args...])
     &lt;/code&gt;
     -  Allows an instance of a class to be called as a function. Essentially, this means that
     &lt;code&gt;
      x()
     &lt;/code&gt;
     is the same as
     &lt;code&gt;
      x.__call__()
     &lt;/code&gt;
     . Note that
     &lt;code&gt;
      __call__
     &lt;/code&gt;
     takes a variable number of arguments; this means that you define
     &lt;code&gt;
      __call__
     &lt;/code&gt;
     as you would any other function, taking however many arguments you'd like it to.
    &lt;/li&gt;
   &lt;/ul&gt;
   &lt;p&gt;
    &lt;code&gt;
     __call__
    &lt;/code&gt;
    can be particularly useful in classes whose instances that need to often change state. "Calling" the instance can be an intuitive and elegant way to change the object's state. An example might be a class representing an entity's position on a plane:
   &lt;/p&gt;
   &lt;div class="highlight highlight-source-python"&gt;
    &lt;pre&gt;    &lt;span class="pl-k"&gt;class&lt;/span&gt; &lt;span class="pl-en"&gt;Entity&lt;/span&gt;:
        &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'''&lt;/span&gt;Class to represent an entity. Callable to update the entity's position.&lt;span class="pl-pds"&gt;'''&lt;/span&gt;&lt;/span&gt;

        &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-c1"&gt;__init__&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-smi"&gt;self&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-smi"&gt;size&lt;/span&gt;, &lt;span class="pl-smi"&gt;x&lt;/span&gt;, &lt;span class="pl-smi"&gt;y&lt;/span&gt;):
            &lt;span class="pl-c1"&gt;self&lt;/span&gt;.x, &lt;span class="pl-c1"&gt;self&lt;/span&gt;.y &lt;span class="pl-k"&gt;=&lt;/span&gt; x, y
            &lt;span class="pl-c1"&gt;self&lt;/span&gt;.size &lt;span class="pl-k"&gt;=&lt;/span&gt; size

        &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-c1"&gt;__call__&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-smi"&gt;self&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-smi"&gt;x&lt;/span&gt;, &lt;span class="pl-smi"&gt;y&lt;/span&gt;):
            &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'''&lt;/span&gt;Change the position of the entity.&lt;span class="pl-pds"&gt;'''&lt;/span&gt;&lt;/span&gt;
            &lt;span class="pl-c1"&gt;self&lt;/span&gt;.x, &lt;span class="pl-c1"&gt;self&lt;/span&gt;.y &lt;span class="pl-k"&gt;=&lt;/span&gt; x, y

        &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; snip...&lt;/span&gt;&lt;/pre&gt;
   &lt;/div&gt;
   &lt;br/&gt;
   &lt;h2&gt;
    &lt;a aria-hidden="true" class="anchor" href="#context-managers" id="user-content-context-managers"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Context Managers
   &lt;/h2&gt;
   &lt;p&gt;
    In Python 2.5, a new keyword was introduced in Python along with a new method for code reuse, the with statement. The concept of context managers was hardly new in Python (it was implemented before as a part of the library), but not until PEP 343 was accepted did it achieve status as a first class language construct. You may have seen with statements before:
   &lt;/p&gt;
   &lt;div class="highlight highlight-source-python"&gt;
    &lt;pre&gt;    &lt;span class="pl-k"&gt;with&lt;/span&gt; &lt;span class="pl-c1"&gt;open&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;foo.txt&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-k"&gt;as&lt;/span&gt; bar:
            &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; perform some action with bar&lt;/span&gt;&lt;/pre&gt;
   &lt;/div&gt;
   &lt;br/&gt;
   &lt;p&gt;
    Context managers allow setup and cleanup actions to be taken for objects when their creation is wrapped with a
    &lt;code&gt;
     with
    &lt;/code&gt;
    statement. The behavior of the context manager is determined by two magic methods:
   &lt;/p&gt;
   &lt;ul&gt;
    &lt;li&gt;
     &lt;code&gt;
      __enter__(self)
     &lt;/code&gt;
     - Defines what the context manager should do at the beginning of the block created by the with statement. Note that the return value of
     &lt;code&gt;
      __enter__
     &lt;/code&gt;
     is bound to the target of the with statement, or the name after the as.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __exit__(self, exception_type, exception_value, traceback)
     &lt;/code&gt;
     - Defines what the context manager should do after its block has been executed (or terminates). It can be used to handle exceptions, perform cleanup, or do something always done immediately after the action in the block. If the block executes successfully,
     &lt;code&gt;
      exception_type
     &lt;/code&gt;
     ,
     &lt;code&gt;
      exception_value
     &lt;/code&gt;
     , and 	traceback	 will be None. Otherwise, you can choose to handle the exception or let the user handle it; if you want to handle it, make sure
     &lt;code&gt;
      __exit__
     &lt;/code&gt;
     returns True after all is said and done. If you don't want the exception to be handled by the context manager, just let it happen.
    &lt;/li&gt;
   &lt;/ul&gt;
   &lt;p&gt;
    &lt;code&gt;
     __enter__
    &lt;/code&gt;
    and
    &lt;code&gt;
     __exit__
    &lt;/code&gt;
    can be useful for specific classes that have well-defined and common behavior for setup and cleanup. You can also use these methods to create generic context managers that wrap other objects. Here's an example:
   &lt;/p&gt;
   &lt;div class="highlight highlight-source-python"&gt;
    &lt;pre&gt;&lt;span class="pl-k"&gt;class&lt;/span&gt; &lt;span class="pl-en"&gt;Closer&lt;/span&gt;:
    &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'''&lt;/span&gt;A context manager to automatically close an object with a close method&lt;/span&gt;
&lt;span class="pl-s"&gt;    in a with statement.&lt;span class="pl-pds"&gt;'''&lt;/span&gt;&lt;/span&gt;

    &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-c1"&gt;__init__&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-smi"&gt;self&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-smi"&gt;obj&lt;/span&gt;):
        &lt;span class="pl-c1"&gt;self&lt;/span&gt;.obj &lt;span class="pl-k"&gt;=&lt;/span&gt; obj

    &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-c1"&gt;__enter__&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-smi"&gt;self&lt;/span&gt;&lt;/span&gt;):
        &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-c1"&gt;self&lt;/span&gt;.obj &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; bound to target&lt;/span&gt;

    &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-c1"&gt;__exit__&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-smi"&gt;self&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-smi"&gt;exception_type&lt;/span&gt;, &lt;span class="pl-smi"&gt;exception_val&lt;/span&gt;, &lt;span class="pl-smi"&gt;trace&lt;/span&gt;):
        &lt;span class="pl-k"&gt;try&lt;/span&gt;:
           &lt;span class="pl-c1"&gt;self&lt;/span&gt;.obj.close()
        &lt;span class="pl-k"&gt;except&lt;/span&gt; &lt;span class="pl-c1"&gt;AttributeError&lt;/span&gt;: &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; obj isn't closable&lt;/span&gt;
           &lt;span class="pl-c1"&gt;print&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;Not closable.&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;
           &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-c1"&gt;True&lt;/span&gt; &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; exception handled successfully&lt;/span&gt;&lt;/pre&gt;
   &lt;/div&gt;
   &lt;br/&gt;
   &lt;p&gt;
    Here's an example of
    &lt;code&gt;
     Closer
    &lt;/code&gt;
    in action, using an FTP connection to demonstrate it (a closable socket):
   &lt;/p&gt;
   &lt;div class="highlight highlight-source-python"&gt;
    &lt;pre&gt;    &lt;span class="pl-k"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-k"&gt;from&lt;/span&gt; magicmethods &lt;span class="pl-k"&gt;import&lt;/span&gt; Closer
    &lt;span class="pl-k"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-k"&gt;from&lt;/span&gt; ftplib &lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-c1"&gt;FTP&lt;/span&gt;
    &lt;span class="pl-k"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-k"&gt;with&lt;/span&gt; Closer(FTP(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;ftp.somesite.com&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;)) &lt;span class="pl-k"&gt;as&lt;/span&gt; conn:
    &lt;span class="pl-c1"&gt;...&lt;/span&gt;     conn.dir()
    &lt;span class="pl-c1"&gt;...&lt;/span&gt;
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; output omitted for brevity&lt;/span&gt;
    &lt;span class="pl-k"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; conn.dir()
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; long AttributeError message, can't use a connection that's closed&lt;/span&gt;
    &lt;span class="pl-k"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-k"&gt;with&lt;/span&gt; Closer(&lt;span class="pl-c1"&gt;int&lt;/span&gt;(&lt;span class="pl-c1"&gt;5&lt;/span&gt;)) &lt;span class="pl-k"&gt;as&lt;/span&gt; i:
    &lt;span class="pl-c1"&gt;...&lt;/span&gt;     i &lt;span class="pl-k"&gt;+=&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;
    &lt;span class="pl-c1"&gt;...&lt;/span&gt;
    Not closable.
    &lt;span class="pl-k"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; i
    &lt;span class="pl-c1"&gt;6&lt;/span&gt;&lt;/pre&gt;
   &lt;/div&gt;
   &lt;br/&gt;
   &lt;p&gt;
    See how our wrapper gracefully handled both proper and improper uses? That's the power of context managers and magic methods. Note that the Python standard library includes a module
    &lt;code&gt;
     contextlib
    &lt;/code&gt;
    that contains a context manager,
    &lt;code&gt;
     contextlib.closing()
    &lt;/code&gt;
    , that does approximately the same thing (without any handling of the case where an object does not have a
    &lt;code&gt;
     close()
    &lt;/code&gt;
    method).
   &lt;/p&gt;
   &lt;h2&gt;
    &lt;a aria-hidden="true" class="anchor" href="#abstract-base-classes" id="user-content-abstract-base-classes"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Abstract Base Classes
   &lt;/h2&gt;
   &lt;p&gt;
    See
    &lt;a href="http://docs.python.org/2/library/abc.html"&gt;
     http://docs.python.org/2/library/abc.html
    &lt;/a&gt;
    .
   &lt;/p&gt;
   &lt;h2&gt;
    &lt;a aria-hidden="true" class="anchor" href="#building-descriptor-objects" id="user-content-building-descriptor-objects"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Building Descriptor Objects
   &lt;/h2&gt;
   &lt;p&gt;
    Descriptors are classes which, when accessed through either getting, setting, or deleting, can also alter other objects. Descriptors aren't meant to stand alone; rather, they're meant to be held by an owner class. Descriptors can be useful when building object-oriented databases or classes that have attributes whose values are dependent on each other. Descriptors are particularly useful when representing attributes in several different units of measurement or representing computed attributes (like distance from the origin in a class to represent a point on a grid).
   &lt;/p&gt;
   &lt;p&gt;
    To be a descriptor, a class must have at least one of
    &lt;code&gt;
     __get__
    &lt;/code&gt;
    ,
    &lt;code&gt;
     __set__
    &lt;/code&gt;
    , and
    &lt;code&gt;
     __delete__
    &lt;/code&gt;
    implemented. Let's take a look at those magic methods:
   &lt;/p&gt;
   &lt;ul&gt;
    &lt;li&gt;
     &lt;code&gt;
      __get__(self, instance, owner)
     &lt;/code&gt;
     - Define behavior for when the descriptor's value is retrieved. instance is the instance of the owner object. owner is the owner class itself.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __set__(self, instance, value)
     &lt;/code&gt;
     - Define behavior for when the descriptor's value is changed. instance is the instance of the owner class and value is the value to set the descriptor to.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __delete__(self, instance)
     &lt;/code&gt;
     - Define behavior for when the descriptor's value is deleted. instance is the instance of the owner object.
    &lt;/li&gt;
   &lt;/ul&gt;
   &lt;p&gt;
    Now, an example of a useful application of descriptors: unit conversions.
   &lt;/p&gt;
   &lt;div class="highlight highlight-source-python"&gt;
    &lt;pre&gt;    &lt;span class="pl-k"&gt;class&lt;/span&gt; &lt;span class="pl-en"&gt;Meter&lt;/span&gt;(&lt;span class="pl-c1"&gt;object&lt;/span&gt;):
        &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'''&lt;/span&gt;Descriptor for a meter.&lt;span class="pl-pds"&gt;'''&lt;/span&gt;&lt;/span&gt;

        &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-c1"&gt;__init__&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-smi"&gt;self&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-smi"&gt;value&lt;/span&gt;&lt;span class="pl-k"&gt;=&lt;/span&gt;&lt;span class="pl-c1"&gt;0.0&lt;/span&gt;):
            &lt;span class="pl-c1"&gt;self&lt;/span&gt;.value &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;float&lt;/span&gt;(value)
        &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-c1"&gt;__get__&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-smi"&gt;self&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-smi"&gt;instance&lt;/span&gt;, &lt;span class="pl-smi"&gt;owner&lt;/span&gt;):
            &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-c1"&gt;self&lt;/span&gt;.value
        &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-c1"&gt;__set__&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-smi"&gt;self&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-smi"&gt;instance&lt;/span&gt;, &lt;span class="pl-smi"&gt;value&lt;/span&gt;):
            &lt;span class="pl-c1"&gt;self&lt;/span&gt;.value &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;float&lt;/span&gt;(value)

    &lt;span class="pl-k"&gt;class&lt;/span&gt; &lt;span class="pl-en"&gt;Foot&lt;/span&gt;(&lt;span class="pl-c1"&gt;object&lt;/span&gt;):
        &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'''&lt;/span&gt;Descriptor for a foot.&lt;span class="pl-pds"&gt;'''&lt;/span&gt;&lt;/span&gt;

        &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-c1"&gt;__get__&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-smi"&gt;self&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-smi"&gt;instance&lt;/span&gt;, &lt;span class="pl-smi"&gt;owner&lt;/span&gt;):
            &lt;span class="pl-k"&gt;return&lt;/span&gt; instance.meter &lt;span class="pl-k"&gt;*&lt;/span&gt; &lt;span class="pl-c1"&gt;3.2808&lt;/span&gt;
        &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-c1"&gt;__set__&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-smi"&gt;self&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-smi"&gt;instance&lt;/span&gt;, &lt;span class="pl-smi"&gt;value&lt;/span&gt;):
            instance.meter &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;float&lt;/span&gt;(value) &lt;span class="pl-k"&gt;/&lt;/span&gt; &lt;span class="pl-c1"&gt;3.2808&lt;/span&gt;

    &lt;span class="pl-k"&gt;class&lt;/span&gt; &lt;span class="pl-en"&gt;Distance&lt;/span&gt;(&lt;span class="pl-c1"&gt;object&lt;/span&gt;):
        &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'''&lt;/span&gt;Class to represent distance holding two descriptors for feet and&lt;/span&gt;
&lt;span class="pl-s"&gt;        meters.&lt;span class="pl-pds"&gt;'''&lt;/span&gt;&lt;/span&gt;
        meter &lt;span class="pl-k"&gt;=&lt;/span&gt; Meter()
        foot &lt;span class="pl-k"&gt;=&lt;/span&gt; Foot()&lt;/pre&gt;
   &lt;/div&gt;
   &lt;br/&gt;
   &lt;h2&gt;
    &lt;a aria-hidden="true" class="anchor" href="#copying" id="user-content-copying"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Copying
   &lt;/h2&gt;
   &lt;p&gt;
    Sometimes, particularly when dealing with mutable objects, you want to be able to copy an object and make changes without affecting what you copied from. This is where Python's copy comes into play. However (fortunately), Python modules are not sentient, so we don't have to worry about a Linux-based robot uprising, but we do have to tell Python how to efficiently copy things.
   &lt;/p&gt;
   &lt;ul&gt;
    &lt;li&gt;
     &lt;code&gt;
      __copy__(self)
     &lt;/code&gt;
     - Defines behavior for
     &lt;code&gt;
      copy.copy()
     &lt;/code&gt;
     for instances of your class.
     &lt;code&gt;
      copy.copy()
     &lt;/code&gt;
     returns a shallow copy of your object -- this means that, while the instance itself is a new instance, all of its data is referenced -- i.e., the object itself is copied, but its data is still referenced (and hence changes to data in a shallow copy may cause changes in the original).
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __deepcopy__(self, memodict={})
     &lt;/code&gt;
     - Defines behavior for
     &lt;code&gt;
      copy.deepcopy()
     &lt;/code&gt;
     for instances of your class.
     &lt;code&gt;
      copy.deepcopy()
     &lt;/code&gt;
     returns a deep copy of your object -- the object and its data are both copied. memodict is a cache of previously copied objects -- this optimizes copying and prevents infinite recursion when copying recursive data structures. When you want to deep copy an individual attribute, call
     &lt;code&gt;
      copy.deepcopy()
     &lt;/code&gt;
     on that attribute with memodict as the first argument.
    &lt;/li&gt;
   &lt;/ul&gt;
   &lt;p&gt;
    What are some use cases for these magic methods? As always, in any case where you need more fine-grained control than what the default behavior gives you. For instance, if you are attempting to copy an object that stores a cache as a dictionary (which might be large), it might not make sense to copy the cache as well -- if the cache can be shared in memory between instances, then it should be.
   &lt;/p&gt;
   &lt;h2&gt;
    &lt;a aria-hidden="true" class="anchor" href="#pickling-your-objects" id="user-content-pickling-your-objects"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Pickling Your Objects
   &lt;/h2&gt;
   &lt;p&gt;
    If you spend time with other Pythonistas, chances are you've at least heard of pickling. Pickling is a serialization process for Python data structures, and can be incredibly useful when you need to store an object and retrieve it later (usually for caching). It's also a major source of worries and confusion.
   &lt;/p&gt;
   &lt;p&gt;
    Pickling is so important that it doesn't just have its own module (
    &lt;code&gt;
     pickle
    &lt;/code&gt;
    ), but its own protocol and the magic methods to go with it. But first, a brief word on how to pickle existing types(feel free to skip it if you already know).
   &lt;/p&gt;
   &lt;h3&gt;
    &lt;a aria-hidden="true" class="anchor" href="#pickling-a-quick-soak-in-the-brine" id="user-content-pickling-a-quick-soak-in-the-brine"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Pickling: A Quick Soak in the Brine
   &lt;/h3&gt;
   &lt;p&gt;
    Let's dive into pickling. Say you have a dictionary that you want to store and retrieve later. You couldwrite it's contents to a file, carefully making sure that you write correct syntax, then retrieve it using either
    &lt;code&gt;
     exec()
    &lt;/code&gt;
    or processing the file input. But this is precarious at best: if you store important data in plain text, it could be corrupted or changed in any number of ways to make your program crash or worse run malicious code on your computer. Instead, we're going to pickle it:
   &lt;/p&gt;
   &lt;div class="highlight highlight-source-python"&gt;
    &lt;pre&gt;    &lt;span class="pl-k"&gt;import&lt;/span&gt; pickle

    data &lt;span class="pl-k"&gt;=&lt;/span&gt; {&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;foo&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;: [&lt;span class="pl-c1"&gt;1&lt;/span&gt;, &lt;span class="pl-c1"&gt;2&lt;/span&gt;, &lt;span class="pl-c1"&gt;3&lt;/span&gt;],
            &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;bar&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;: (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;Hello&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;world!&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;),
            &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;baz&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;: &lt;span class="pl-c1"&gt;True&lt;/span&gt;}
    jar &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;open&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;data.pkl&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;wb&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;)
    pickle.dump(data, jar) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; write the pickled data to the file jar&lt;/span&gt;
    jar.close()&lt;/pre&gt;
   &lt;/div&gt;
   &lt;br/&gt;
   &lt;p&gt;
    Now, a few hours later, we want it back. All we have to do is unpickle it:
   &lt;/p&gt;
   &lt;div class="highlight highlight-source-python"&gt;
    &lt;pre&gt;    &lt;span class="pl-k"&gt;import&lt;/span&gt; pickle

    pkl_file &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;open&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;data.pkl&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;rb&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; connect to the pickled data&lt;/span&gt;
    data &lt;span class="pl-k"&gt;=&lt;/span&gt; pickle.load(pkl_file) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; load it into a variable&lt;/span&gt;
    &lt;span class="pl-c1"&gt;print&lt;/span&gt; data
    pkl_file.close()&lt;/pre&gt;
   &lt;/div&gt;
   &lt;br/&gt;
   &lt;p&gt;
    What happens? Exactly what you expect. It's just like we had data all along.
   &lt;/p&gt;
   &lt;p&gt;
    Now, for a word of caution: pickling is not perfect. Pickle files are easily corrupted on accident and on purpose. Pickling may be more secure than using flat text files, but it still can be used to run malicious code. It's also incompatible across versions of Python, so don't expect to distribute pickled objects and expect people to be able to open them. However, it can also be a powerful tool for caching and other common serialization tasks.
   &lt;/p&gt;
   &lt;h3&gt;
    &lt;a aria-hidden="true" class="anchor" href="#pickling-your-own-objects" id="user-content-pickling-your-own-objects"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Pickling your own Objects
   &lt;/h3&gt;
   &lt;p&gt;
    Pickling isn't just for built-in types. It's for any class that follows the pickle protocol. The pickle protocol has four optional methods for Python objects to customize how they act (it's a bit different for C extensions, but that's not in our scope):
   &lt;/p&gt;
   &lt;ul&gt;
    &lt;li&gt;
     &lt;code&gt;
      __getinitargs__(self)
     &lt;/code&gt;
     - If you'd like for
     &lt;code&gt;
      __init__
     &lt;/code&gt;
     to be called when your class is unpickled, you can define
     &lt;code&gt;
      __getinitargs__
     &lt;/code&gt;
     , which should return a tuple of the arguments that you'd like to be passed to
     &lt;code&gt;
      __init__
     &lt;/code&gt;
     . Note that this method will only work for old-style classes.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __getnewargs__(self)
     &lt;/code&gt;
     - For new-style classes, you can influence what arguments get passed to
     &lt;code&gt;
      __new__
     &lt;/code&gt;
     upon unpickling. This method should also return a tuple of arguments that will then be passed to
     &lt;code&gt;
      __new__
     &lt;/code&gt;
     .
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __getstate__(self)
     &lt;/code&gt;
     - Instead of the object's
     &lt;code&gt;
      __dict__
     &lt;/code&gt;
     attribute being stored, you can return a custom state to be stored when the object is pickled. That state will be used by
     &lt;code&gt;
      __setstate__
     &lt;/code&gt;
     when the object is unpickled.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __setstate__(self, state)
     &lt;/code&gt;
     - When the object is unpickled, if
     &lt;code&gt;
      __setstate__
     &lt;/code&gt;
     is defined the object's state will be passed to it instead of directly applied to the object's
     &lt;code&gt;
      __dict__
     &lt;/code&gt;
     . This goes hand in hand with
     &lt;code&gt;
      __getstate__
     &lt;/code&gt;
     : when both are defined, you can represent the object's pickled state however you want with whatever you want.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __reduce__(self)
     &lt;/code&gt;
     - When defining extension types (i.e., types implemented using Python's C API), you have to tell Python how to pickle them if you want them to pickle them.
     &lt;code&gt;
      __reduce__()
     &lt;/code&gt;
     is called when an object defining it is pickled. It can either return a string representing a global name that Python will look up and pickle, or a tuple. The tuple contains between 2 and 5 elements: a callable object that is called to recreate the object, a tuple of arguments for that callable object, state to be passed to
     &lt;code&gt;
      __setstate__
     &lt;/code&gt;
     (optional), an iterator yielding list items to be pickled (optional), and an iterator yielding dictionary items to be pickled (optional).
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __reduce_ex__(self)
     &lt;/code&gt;
     -
     &lt;code&gt;
      __reduce_ex__
     &lt;/code&gt;
     exists for compatibility. If it is defined,
     &lt;code&gt;
      __reduce_ex__
     &lt;/code&gt;
     will be called over
     &lt;code&gt;
      __reduce__
     &lt;/code&gt;
     on pickling.
     &lt;code&gt;
      __reduce__
     &lt;/code&gt;
     can be defined as well for older versions of the pickling API that did not support
     &lt;code&gt;
      __reduce_ex__
     &lt;/code&gt;
     .
    &lt;/li&gt;
   &lt;/ul&gt;
   &lt;h3&gt;
    &lt;a aria-hidden="true" class="anchor" href="#an-example-1" id="user-content-an-example-1"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    An Example
   &lt;/h3&gt;
   &lt;p&gt;
    Our example is a
    &lt;code&gt;
     Slate
    &lt;/code&gt;
    , which remembers what its values have been and when those values were written to it. However, this particular slate goes blank each time it is pickled: the current value will not be saved.
   &lt;/p&gt;
   &lt;div class="highlight highlight-source-python"&gt;
    &lt;pre&gt;    &lt;span class="pl-k"&gt;import&lt;/span&gt; time

    &lt;span class="pl-k"&gt;class&lt;/span&gt; &lt;span class="pl-en"&gt;Slate&lt;/span&gt;:
        &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'''&lt;/span&gt;Class to store a string and a changelog, and forget its value when&lt;/span&gt;
&lt;span class="pl-s"&gt;        pickled.&lt;span class="pl-pds"&gt;'''&lt;/span&gt;&lt;/span&gt;

        &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-c1"&gt;__init__&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-smi"&gt;self&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-smi"&gt;value&lt;/span&gt;):
            &lt;span class="pl-c1"&gt;self&lt;/span&gt;.value &lt;span class="pl-k"&gt;=&lt;/span&gt; value
            &lt;span class="pl-c1"&gt;self&lt;/span&gt;.last_change &lt;span class="pl-k"&gt;=&lt;/span&gt; time.asctime()
            &lt;span class="pl-c1"&gt;self&lt;/span&gt;.history &lt;span class="pl-k"&gt;=&lt;/span&gt; {}

        &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;change&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-smi"&gt;self&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-smi"&gt;new_value&lt;/span&gt;):
            &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Change the value. Commit last value to history&lt;/span&gt;
            &lt;span class="pl-c1"&gt;self&lt;/span&gt;.history[&lt;span class="pl-c1"&gt;self&lt;/span&gt;.last_change] &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;self&lt;/span&gt;.value
            &lt;span class="pl-c1"&gt;self&lt;/span&gt;.value &lt;span class="pl-k"&gt;=&lt;/span&gt; new_value
            &lt;span class="pl-c1"&gt;self&lt;/span&gt;.last_change &lt;span class="pl-k"&gt;=&lt;/span&gt; time.asctime()

        &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;print_changes&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-smi"&gt;self&lt;/span&gt;&lt;/span&gt;):
            &lt;span class="pl-c1"&gt;print&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;Changelog for Slate object:&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;
            &lt;span class="pl-k"&gt;for&lt;/span&gt; k, v &lt;span class="pl-k"&gt;in&lt;/span&gt; &lt;span class="pl-c1"&gt;self&lt;/span&gt;.history.items():
                &lt;span class="pl-c1"&gt;print&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;span class="pl-c1"&gt;%s&lt;/span&gt;&lt;span class="pl-cce"&gt;\t&lt;/span&gt; &lt;span class="pl-c1"&gt;%s&lt;/span&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;%&lt;/span&gt; (k, v)

        &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-c1"&gt;__getstate__&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-smi"&gt;self&lt;/span&gt;&lt;/span&gt;):
            &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Deliberately do not return self.value or self.last_change.&lt;/span&gt;
            &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; We want to have a "blank slate" when we unpickle.&lt;/span&gt;
            &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-c1"&gt;self&lt;/span&gt;.history

        &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-c1"&gt;__setstate__&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-smi"&gt;self&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-smi"&gt;state&lt;/span&gt;):
            &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Make self.history = state and last_change and value undefined&lt;/span&gt;
            &lt;span class="pl-c1"&gt;self&lt;/span&gt;.history &lt;span class="pl-k"&gt;=&lt;/span&gt; state
            &lt;span class="pl-c1"&gt;self&lt;/span&gt;.value, &lt;span class="pl-c1"&gt;self&lt;/span&gt;.last_change &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;None&lt;/span&gt;, &lt;span class="pl-c1"&gt;None&lt;/span&gt;&lt;/pre&gt;
   &lt;/div&gt;
   &lt;br/&gt;
   &lt;h2&gt;
    &lt;a aria-hidden="true" class="anchor" href="#conclusion" id="user-content-conclusion"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Conclusion
   &lt;/h2&gt;
   &lt;p&gt;
    The goal of this guide is to bring something to anyone that reads it, regardless of their experience with Python or object-oriented programming. If you're just getting started with Python, you've gained valuable knowledge of the basics of writing feature-rich, elegant, and easy-to-use classes. If you're an intermediate Python programmer, you've probably picked up some slick new concepts and strategies and some good ways to reduce the amount of code written by you and clients. If you're an expert Pythonista, you've been refreshed on some of the stuff you might have forgotten about and maybe picked up a few new tricks along the way. Whatever your experience level, I hope that this trip through Python's special methods has been truly magical (I couldn't resist the final pun).
   &lt;/p&gt;
   &lt;h2&gt;
    &lt;a aria-hidden="true" class="anchor" href="#appendix-1-how-to-call-magic-methods" id="user-content-appendix-1-how-to-call-magic-methods"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Appendix 1: How to Call Magic Methods
   &lt;/h2&gt;
   &lt;p&gt;
    Some of the magic methods in Python directly map to built-in functions; in this case, how to invoke them is fairly obvious. However, in other cases, the invocation is far less obvious. This appendix is devoted to exposing non-obvious syntax that leads to magic methods getting called.
   &lt;/p&gt;
   &lt;table&gt;
    &lt;thead&gt;
     &lt;tr&gt;
      &lt;th&gt;
       Magic Method
      &lt;/th&gt;
      &lt;th&gt;
       When it gets invoked (example)
      &lt;/th&gt;
      &lt;th&gt;
       Explanation
      &lt;/th&gt;
     &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
     &lt;tr&gt;
      &lt;td&gt;
       &lt;code&gt;
        __new__(cls [,...])
       &lt;/code&gt;
      &lt;/td&gt;
      &lt;td&gt;
       &lt;code&gt;
        instance = MyClass(arg1, arg2)
       &lt;/code&gt;
      &lt;/td&gt;
      &lt;td&gt;
       &lt;code&gt;
        __new__
       &lt;/code&gt;
       is called on instance creation
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       &lt;code&gt;
        __init__(self [,...])
       &lt;/code&gt;
      &lt;/td&gt;
      &lt;td&gt;
       &lt;code&gt;
        instance = MyClass(arg1, arg2)
       &lt;/code&gt;
      &lt;/td&gt;
      &lt;td&gt;
       &lt;code&gt;
        __init__
       &lt;/code&gt;
       is called on instance creation
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       &lt;code&gt;
        __cmp__(self, other)
       &lt;/code&gt;
      &lt;/td&gt;
      &lt;td&gt;
       &lt;code&gt;
        self == other, self &amp;gt; other, etc.
       &lt;/code&gt;
      &lt;/td&gt;
      &lt;td&gt;
       Called for any comparison
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       &lt;code&gt;
        __pos__(self)
       &lt;/code&gt;
      &lt;/td&gt;
      &lt;td&gt;
       &lt;code&gt;
        +self
       &lt;/code&gt;
      &lt;/td&gt;
      &lt;td&gt;
       Unary plus sign
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       &lt;code&gt;
        __neg__(self)
       &lt;/code&gt;
      &lt;/td&gt;
      &lt;td&gt;
       &lt;code&gt;
        -self
       &lt;/code&gt;
      &lt;/td&gt;
      &lt;td&gt;
       Unary minus sign
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       &lt;code&gt;
        __invert__(self)
       &lt;/code&gt;
      &lt;/td&gt;
      &lt;td&gt;
       &lt;code&gt;
        ~self
       &lt;/code&gt;
      &lt;/td&gt;
      &lt;td&gt;
       Bitwise inversion
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       &lt;code&gt;
        __index__(self)
       &lt;/code&gt;
      &lt;/td&gt;
      &lt;td&gt;
       &lt;code&gt;
        x[self]
       &lt;/code&gt;
      &lt;/td&gt;
      &lt;td&gt;
       Conversion when object is used as index
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       &lt;code&gt;
        __nonzero__(self)
       &lt;/code&gt;
      &lt;/td&gt;
      &lt;td&gt;
       &lt;code&gt;
        bool(self)
       &lt;/code&gt;
      &lt;/td&gt;
      &lt;td&gt;
       Boolean value of the object
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       &lt;code&gt;
        __getattr__(self, name)
       &lt;/code&gt;
      &lt;/td&gt;
      &lt;td&gt;
       &lt;code&gt;
        self.name # name doesn't exist
       &lt;/code&gt;
      &lt;/td&gt;
      &lt;td&gt;
       Accessing nonexistent attribute
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       &lt;code&gt;
        __setattr__(self, name, val)
       &lt;/code&gt;
      &lt;/td&gt;
      &lt;td&gt;
       &lt;code&gt;
        self.name = val
       &lt;/code&gt;
      &lt;/td&gt;
      &lt;td&gt;
       Assigning to an attribute
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       &lt;code&gt;
        __delattr__(self, name)
       &lt;/code&gt;
      &lt;/td&gt;
      &lt;td&gt;
       &lt;code&gt;
        del self.name
       &lt;/code&gt;
      &lt;/td&gt;
      &lt;td&gt;
       Deleting an attribute
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       &lt;code&gt;
        __getattribute__(self, name)
       &lt;/code&gt;
      &lt;/td&gt;
      &lt;td&gt;
       &lt;code&gt;
        self.name
       &lt;/code&gt;
      &lt;/td&gt;
      &lt;td&gt;
       Accessing any attribute
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       &lt;code&gt;
        __getitem__(self, key)
       &lt;/code&gt;
      &lt;/td&gt;
      &lt;td&gt;
       &lt;code&gt;
        self[key]
       &lt;/code&gt;
      &lt;/td&gt;
      &lt;td&gt;
       Accessing an item using an index
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       &lt;code&gt;
        __setitem__(self, key, val)
       &lt;/code&gt;
      &lt;/td&gt;
      &lt;td&gt;
       &lt;code&gt;
        self[key] = val
       &lt;/code&gt;
      &lt;/td&gt;
      &lt;td&gt;
       Assigning to an item using an index
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       &lt;code&gt;
        __delitem__(self, key)
       &lt;/code&gt;
      &lt;/td&gt;
      &lt;td&gt;
       &lt;code&gt;
        del self[key]
       &lt;/code&gt;
      &lt;/td&gt;
      &lt;td&gt;
       Deleting an item using an index
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       &lt;code&gt;
        __iter__(self)
       &lt;/code&gt;
      &lt;/td&gt;
      &lt;td&gt;
       &lt;code&gt;
        for x in self
       &lt;/code&gt;
      &lt;/td&gt;
      &lt;td&gt;
       Iteration
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       &lt;code&gt;
        __contains__(self, value)
       &lt;/code&gt;
      &lt;/td&gt;
      &lt;td&gt;
       &lt;code&gt;
        value in self, value not in self
       &lt;/code&gt;
      &lt;/td&gt;
      &lt;td&gt;
       Membership tests using
       &lt;code&gt;
        in
       &lt;/code&gt;
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       &lt;code&gt;
        __call__(self [,...])
       &lt;/code&gt;
      &lt;/td&gt;
      &lt;td&gt;
       &lt;code&gt;
        self(args)
       &lt;/code&gt;
      &lt;/td&gt;
      &lt;td&gt;
       "Calling" an instance
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       &lt;code&gt;
        __enter__(self)
       &lt;/code&gt;
      &lt;/td&gt;
      &lt;td&gt;
       &lt;code&gt;
        with self as x:
       &lt;/code&gt;
      &lt;/td&gt;
      &lt;td&gt;
       &lt;code&gt;
        with
       &lt;/code&gt;
       statement context managers
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       &lt;code&gt;
        __exit__(self, exc, val, trace)
       &lt;/code&gt;
      &lt;/td&gt;
      &lt;td&gt;
       &lt;code&gt;
        with self as x:
       &lt;/code&gt;
      &lt;/td&gt;
      &lt;td&gt;
       &lt;code&gt;
        with
       &lt;/code&gt;
       statement context managers
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       &lt;code&gt;
        __getstate__(self)
       &lt;/code&gt;
      &lt;/td&gt;
      &lt;td&gt;
       &lt;code&gt;
        pickle.dump(pkl_file, self)
       &lt;/code&gt;
      &lt;/td&gt;
      &lt;td&gt;
       Pickling
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       &lt;code&gt;
        __setstate__(self)
       &lt;/code&gt;
      &lt;/td&gt;
      &lt;td&gt;
       &lt;code&gt;
        data = pickle.load(pkl_file)
       &lt;/code&gt;
      &lt;/td&gt;
      &lt;td&gt;
       Pickling
      &lt;/td&gt;
     &lt;/tr&gt;
    &lt;/tbody&gt;
   &lt;/table&gt;
   &lt;p&gt;
    Hopefully, this table should have cleared up any questions you might have had about what syntax invokes which magic method.
   &lt;/p&gt;
   &lt;h2&gt;
    &lt;a aria-hidden="true" class="anchor" href="#appendix-2-changes-in-python-3" id="user-content-appendix-2-changes-in-python-3"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Appendix 2: Changes in Python 3
   &lt;/h2&gt;
   &lt;p&gt;
    Here, we document a few major places where Python 3 differs from 2.x in terms of its object model:
   &lt;/p&gt;
   &lt;ul&gt;
    &lt;li&gt;
     Since the distinction between string and unicode has been done away with in Python 3,
     &lt;code&gt;
      __unicode__
     &lt;/code&gt;
     is gone and
     &lt;code&gt;
      __bytes__
     &lt;/code&gt;
     (which behaves similarly to
     &lt;code&gt;
      __str__
     &lt;/code&gt;
     and
     &lt;code&gt;
      __unicode__
     &lt;/code&gt;
     in 2.7) exists for a new built-in for constructing byte arrays.
    &lt;/li&gt;
    &lt;li&gt;
     Since division defaults to true division in Python 3,
     &lt;code&gt;
      __div__
     &lt;/code&gt;
     is gone in Python 3
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __coerce__
     &lt;/code&gt;
     is gone due to redundancy with other magic methods and confusing behavior
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __cmp__
     &lt;/code&gt;
     is gone due to redundancy with other magic methods
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __nonzero__
     &lt;/code&gt;
     has been renamed to
     &lt;code&gt;
      __bool__
     &lt;/code&gt;
    &lt;/li&gt;
   &lt;/ul&gt;
   &lt;p&gt;
    &lt;a href="https://bitdeli.com/free" title="Bitdeli Badge"&gt;
     &lt;img alt="Bitdeli Badge" data-canonical-src="https://d2weczhvl823v0.cloudfront.net/minhhh/magicmethods/trend.png" src="https://camo.githubusercontent.com/cfc702718d96e78f9afef53956bd7fbb03deaabb/68747470733a2f2f64327765637a68766c38323376302e636c6f756466726f6e742e6e65742f6d696e6868682f6d616769636d6574686f64732f7472656e642e706e67" style="max-width:100%;"/&gt;
    &lt;/a&gt;
   &lt;/p&gt;
  &lt;/article&gt;
 &lt;/div&gt;
&lt;/div&gt;

            &lt;div class="git-meta"&gt;
                
                &lt;span&gt;Brought to you by me &lt;a href="https://github.com/minhhh/pelican_git"&gt;pelican_git&lt;/a&gt;.&lt;/span&gt;
                
                &lt;span style="float: right; color: #369;"&gt;&lt;a href="https://github.com/minhhh/magicmethods/blob/master/README.md"&gt;view original&lt;/a&gt;&lt;/span&gt;
                &lt;span style="float: right; margin-right: 8px;"&gt;
                    &lt;a style="color: rgb(102, 102, 102);" href="https://github.com/minhhh/magicmethods/blob/master/README.md"&gt;README.md&lt;/a&gt;&lt;/span&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;&lt;/p&gt;</summary><category term="python"></category><category term="magic method"></category></entry><entry><title>Awk tutorial</title><link href="http://minhhh.github.io/posts/awk-tutorial" rel="alternate"></link><published>2014-10-05T00:00:00-04:00</published><updated>2014-10-05T00:00:00-04:00</updated><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2014-10-05:posts/awk-tutorial</id><summary type="html">&lt;p&gt;&lt;div&gt;
    &lt;style type = "text/css" scoped&gt;
.git-content div {
    padding: 0;
    margin: 0;
}

.git-content .git-file {
    border: 1px solid #DEDEDE;
    margin-bottom: 1em;
}

.git-content .git-file .git-meta {
    background-color: #EAEAEA;
    color: #666666;
    font-size: 85%;
    overflow: hidden;
    padding: 0.5em;
}

.git-content .git-file .git-meta a {
    color: #336699;
}

.git-content .git-file .git-meta a:visited {
    color: #773377;
}

.git-content .git-file {
    background-color: #F8F8FF;
    border-bottom: 1px solid #DDDDDD;
    font-size: 100%;
    overflow: auto;
    word-wrap: normal;
}

.git-content .git-file pre {
    background: none repeat scroll 0 0 transparent !important;
    border: medium none !important;
    margin: 0 !important;
    padding: 0 !important;
}
    &lt;/style&gt;
    &lt;div class="git-content"&gt;
        &lt;div class="git-file"&gt;
            &lt;div class="file"&gt;
 &lt;div class="readme blob instapaper_body" id="readme"&gt;
  &lt;article class="markdown-body entry-content" itemprop="text"&gt;
   &lt;h1&gt;
    &lt;a aria-hidden="true" class="anchor" href="#awk-cheatsheet" id="user-content-awk-cheatsheet"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    AWK CHEATSHEET
   &lt;/h1&gt;
   &lt;h2&gt;
    &lt;a aria-hidden="true" class="anchor" href="#run" id="user-content-run"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Run
   &lt;/h2&gt;
   &lt;p&gt;
    Call from command line
   &lt;/p&gt;
   &lt;div class="highlight highlight-source-shell"&gt;
    &lt;pre&gt;    awk &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;pattern1 {action1}&lt;/span&gt;
&lt;span class="pl-s"&gt;    pattern2 {action2} ...&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt; file1 file2 ..&lt;/pre&gt;
   &lt;/div&gt;
   &lt;br/&gt;
   &lt;p&gt;
    Call a script
   &lt;/p&gt;
   &lt;div class="highlight highlight-source-shell"&gt;
    &lt;pre&gt;    awk -f script file1 file2 ...&lt;/pre&gt;
   &lt;/div&gt;
   &lt;br/&gt;
   &lt;p&gt;
    Call without input files
   &lt;/p&gt;
   &lt;div class="highlight highlight-source-shell"&gt;
    &lt;pre&gt;    awk &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;program&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;
   &lt;/div&gt;
   &lt;br/&gt;
   &lt;h2&gt;
    &lt;a aria-hidden="true" class="anchor" href="#regular-expression" id="user-content-regular-expression"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Regular expression
   &lt;/h2&gt;
   &lt;p&gt;
    Awk can use regular exrepssion as conditions
   &lt;/p&gt;
   &lt;div class="highlight highlight-source-shell"&gt;
    &lt;pre&gt;    awk &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;/foo/ {program}&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt; file&lt;/pre&gt;
   &lt;/div&gt;
   &lt;br/&gt;
   &lt;p&gt;
    Awk supports Character class in POSIX standard such as [:alpha], [:alnum:]
   &lt;/p&gt;
   &lt;h3&gt;
    &lt;a aria-hidden="true" class="anchor" href="#case-sensitivity" id="user-content-case-sensitivity"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Case sensitivity
   &lt;/h3&gt;
   &lt;p&gt;
    Either use function
    &lt;code&gt;
     tolower
    &lt;/code&gt;
   &lt;/p&gt;
   &lt;div class="highlight highlight-source-shell"&gt;
    &lt;pre&gt;    tolower(&lt;span class="pl-smi"&gt;$1&lt;/span&gt;) &lt;span class="pl-k"&gt;~&lt;/span&gt; /foo/ {...}&lt;/pre&gt;
   &lt;/div&gt;
   &lt;br/&gt;
   &lt;p&gt;
    Or set variable
    &lt;code&gt;
     IGNORECASE
    &lt;/code&gt;
    to non-zero
   &lt;/p&gt;
   &lt;div class="highlight highlight-source-shell"&gt;
    &lt;pre&gt;    IGNORECASE = 1&lt;/pre&gt;
   &lt;/div&gt;
   &lt;br/&gt;
   &lt;h3&gt;
    &lt;a aria-hidden="true" class="anchor" href="#dynamic-regex" id="user-content-dynamic-regex"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Dynamic regex
   &lt;/h3&gt;
   &lt;p&gt;
    Awk provides facility to define dynamic regular expressions
   &lt;/p&gt;
   &lt;div class="highlight highlight-source-shell"&gt;
    &lt;pre&gt;    BEGIN { digits_regexp = &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;[[:digit:]]+&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; }&lt;/pre&gt;
   &lt;/div&gt;
   &lt;br/&gt;
   &lt;p&gt;
    You shouldn't use string constants for regex because it needs to be processed twice and hard to read.
   &lt;/p&gt;
   &lt;h3&gt;
    &lt;a aria-hidden="true" class="anchor" href="#startup-and-cleanup-actions" id="user-content-startup-and-cleanup-actions"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Startup and cleanup actions
   &lt;/h3&gt;
   &lt;p&gt;
    In other words, do something even if there are no line to process
   &lt;/p&gt;
   &lt;div class="highlight highlight-source-shell"&gt;
    &lt;pre&gt;    awk &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;BEGIN {do something}&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;
   &lt;/div&gt;
   &lt;br/&gt;
   &lt;p&gt;
    &lt;code&gt;
     END
    &lt;/code&gt;
    specifies command to do at the end of loop.
   &lt;/p&gt;
   &lt;h3&gt;
    &lt;a aria-hidden="true" class="anchor" href="#change-field-seperator" id="user-content-change-field-seperator"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Change field seperator
   &lt;/h3&gt;
   &lt;p&gt;
    &lt;code&gt;
     awk -F:
    &lt;/code&gt;
    changes the field separator to colon.
   &lt;/p&gt;
   &lt;p&gt;
    Or it can be set in the BEGIN condition like this
   &lt;/p&gt;
   &lt;div class="highlight highlight-source-shell"&gt;
    &lt;pre&gt;    BEGIN {FS = &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;}&lt;/pre&gt;
   &lt;/div&gt;
   &lt;br/&gt;
   &lt;h3&gt;
    &lt;a aria-hidden="true" class="anchor" href="#quote-and-quoting" id="user-content-quote-and-quoting"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Quote and quoting
   &lt;/h3&gt;
   &lt;p&gt;
    Awk support many standard escape sequence that can be use inside strings or regular expression
   &lt;/p&gt;
   &lt;p&gt;
    There are various way to escape single quote and double quotes.
   &lt;/p&gt;
   &lt;p&gt;
    Once nice way is to use octal escape:
    &lt;code&gt;
     \42
    &lt;/code&gt;
    is double quote and
    &lt;code&gt;
     \47
    &lt;/code&gt;
    is single quote.
   &lt;/p&gt;
   &lt;p&gt;
    &lt;code&gt;
     \xhh
    &lt;/code&gt;
    produces hexadecimal escape sequence
   &lt;/p&gt;
   &lt;h3&gt;
    &lt;a aria-hidden="true" class="anchor" href="#special-variables" id="user-content-special-variables"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Special Variables
   &lt;/h3&gt;
   &lt;ul&gt;
    &lt;li&gt;
     &lt;code&gt;
      $0
     &lt;/code&gt;
     is the current line. $1 is the first field, $2 is the second field and so on
    &lt;/li&gt;
    &lt;li&gt;
     Note that $NR is the first field in the first record, second in the second one, and so on
    &lt;/li&gt;
    &lt;li&gt;
     $(2x2) is equivalent to $4
    &lt;/li&gt;
    &lt;li&gt;
     $5 = something when the line has fewer than 5 fields will create the 5th field and change both $0 and NF
    &lt;/li&gt;
    &lt;li&gt;
     you get the idea
    &lt;/li&gt;
    &lt;li&gt;
     To force awk to rebuild the record,
    &lt;/li&gt;
   &lt;/ul&gt;
   &lt;div class="highlight highlight-source-shell"&gt;
    &lt;pre&gt;    &lt;span class="pl-smi"&gt;$1&lt;/span&gt; = &lt;span class="pl-smi"&gt;$1&lt;/span&gt;&lt;span class="pl-k"&gt;;&lt;/span&gt; &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; force record to be rebuilt&lt;/span&gt;&lt;/pre&gt;
   &lt;/div&gt;
   &lt;br/&gt;
   &lt;ul&gt;
    &lt;li&gt;
     NF is the number of fields
    &lt;/li&gt;
    &lt;li&gt;
     $NF is the last field.
    &lt;/li&gt;
    &lt;li&gt;
     NR is the total of records read so far in all files.
    &lt;/li&gt;
    &lt;li&gt;
     FNR is the number of records read so far in the current input files. This should be used instead of NR.
    &lt;/li&gt;
    &lt;li&gt;
     RS is the record separator. It can be changed at BEGIN
    &lt;/li&gt;
    &lt;li&gt;
     ORS is the output record separator.
    &lt;/li&gt;
    &lt;li&gt;
     RT contains the actual text that match RS if RS is a regular expression. If RS is just a normal character, then RT and RS are the same.
    &lt;/li&gt;
    &lt;li&gt;
     FS is the field separator
     &lt;ul&gt;
      &lt;li&gt;
       FS can be specified at the beginning as well
      &lt;/li&gt;
     &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;
     OFS is output field separator
    &lt;/li&gt;
    &lt;li&gt;
     FIELDWIDTHS is a string that specifies field widths separated by spaces.
     &lt;ul&gt;
      &lt;li&gt;
       For instance
       &lt;code&gt;
        9 10 6 3 4 ...
       &lt;/code&gt;
      &lt;/li&gt;
      &lt;li&gt;
       If PROCINFO["FS"] "FS" then FS is being used, otherwise fixed width method is being used.
      &lt;/li&gt;
     &lt;/ul&gt;
    &lt;/li&gt;
   &lt;/ul&gt;
   &lt;h4&gt;
    &lt;a aria-hidden="true" class="anchor" href="#operators" id="user-content-operators"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Operators
   &lt;/h4&gt;
   &lt;ul&gt;
    &lt;li&gt;
     &lt;code&gt;
      ~
     &lt;/code&gt;
     (tilde) used to match a string with a regular expression
    &lt;/li&gt;
   &lt;/ul&gt;
   &lt;div class="highlight highlight-source-shell"&gt;
    &lt;pre&gt;    $ awk &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;$1 ~ /J/&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt; file
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; matches line where the first field start with J&lt;/span&gt;&lt;/pre&gt;
   &lt;/div&gt;
   &lt;br/&gt;
   &lt;ul&gt;
    &lt;li&gt;
     &lt;code&gt;
      !~
     &lt;/code&gt;
     not match regular expression
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      ==
     &lt;/code&gt;
     is the equal operator
    &lt;/li&gt;
   &lt;/ul&gt;
   &lt;h3&gt;
    &lt;a aria-hidden="true" class="anchor" href="#useful-functions" id="user-content-useful-functions"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Useful functions
   &lt;/h3&gt;
   &lt;ul&gt;
    &lt;li&gt;
     length() returns the string length.
    &lt;/li&gt;
    &lt;li&gt;
     substr(s, m, n) produces substring of s beginning at position m and with length n
    &lt;/li&gt;
    &lt;li&gt;
     tolower(s) , toupper(s) transform text s to all lower or upper cases
    &lt;/li&gt;
    &lt;li&gt;
     sub("something", "withsomething")
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      getline
     &lt;/code&gt;
     read the next line from input, returns 1 if it finds a record, 0 if end of file and -1 if there are any errors.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      getline tmp
     &lt;/code&gt;
     reads the next line from input to a variable named
     &lt;code&gt;
      tmp
     &lt;/code&gt;
     , the variable
     &lt;code&gt;
      $0
     &lt;/code&gt;
     is not affected by this getline. This function allows to skip one line ahead.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      getlines var &amp;lt; 'file'
     &lt;/code&gt;
     reads the next line from file to a variable named
     &lt;code&gt;
      var
     &lt;/code&gt;
    &lt;/li&gt;
   &lt;/ul&gt;
   &lt;div class="highlight highlight-source-shell"&gt;
    &lt;pre&gt;    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; The following code copies all input files to the output, except for records that say @include filename&lt;/span&gt;
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; in this case it will replace such records with the content of the file `filename`&lt;/span&gt;
    &lt;span class="pl-k"&gt;if&lt;/span&gt; (NF 2 &lt;span class="pl-k"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="pl-smi"&gt;$1&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;@include&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) {
        &lt;span class="pl-k"&gt;while&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;((&lt;/span&gt;getline line &lt;span class="pl-k"&gt;&amp;lt;&lt;/span&gt; &lt;span class="pl-smi"&gt;$2&lt;/span&gt;) &lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;0&lt;/span&gt;)&lt;/span&gt;
&lt;span class="pl-s"&gt;            print line&lt;/span&gt;
&lt;span class="pl-s"&gt;        close(&lt;span class="pl-smi"&gt;$2&lt;/span&gt;)&lt;/span&gt;
&lt;span class="pl-s"&gt;    } else&lt;/span&gt;
&lt;span class="pl-s"&gt;        print&lt;/span&gt;&lt;/pre&gt;
   &lt;/div&gt;
   &lt;br/&gt;
   &lt;ul&gt;
    &lt;li&gt;
     &lt;code&gt;
      command | getline
     &lt;/code&gt;
     . In this case the string
     &lt;code&gt;
      command
     &lt;/code&gt;
     is run as a shell command and its output is piped to getline
    &lt;/li&gt;
   &lt;/ul&gt;
   &lt;div class="highlight highlight-source-shell"&gt;
    &lt;pre&gt;    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; line begins with @execute is replaced by the output of the command after that&lt;/span&gt;
    {
        &lt;span class="pl-k"&gt;if&lt;/span&gt; (&lt;span class="pl-smi"&gt;$1&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;@execute&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) {
            tmp = substr(&lt;span class="pl-smi"&gt;$0&lt;/span&gt;, 10)
            &lt;span class="pl-k"&gt;while&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;((&lt;/span&gt;tmp &lt;span class="pl-k"&gt;|&lt;/span&gt; getline) &lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;0&lt;/span&gt;)&lt;/span&gt;
&lt;span class="pl-s"&gt;                print&lt;/span&gt;
&lt;span class="pl-s"&gt;            close(tmp)&lt;/span&gt;
&lt;span class="pl-s"&gt;        } else&lt;/span&gt;
&lt;span class="pl-s"&gt;            print&lt;/span&gt;
&lt;span class="pl-s"&gt;    }&lt;/span&gt;&lt;/pre&gt;
   &lt;/div&gt;
   &lt;br/&gt;
   &lt;ul&gt;
    &lt;li&gt;
     &lt;code&gt;
      command | getline var
     &lt;/code&gt;
     , the output of
     &lt;code&gt;
      commands
     &lt;/code&gt;
     is sent through a pipe to getline and into variable
     &lt;code&gt;
      var
     &lt;/code&gt;
     .
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      print "some query" |&amp;amp; "db_server"
     &lt;/code&gt;
     sends a query to a process. (This maybe useful but we don't use it yet)
    &lt;/li&gt;
    &lt;li&gt;
     Mathematical functions such as: sqrt(), atan2(), rand().
     &lt;ul&gt;
      &lt;li&gt;
       DO NOT put a space between the function name and the parentheses. It can be confused with string concatenation
      &lt;/li&gt;
      &lt;li&gt;
       Operator precedence.
      &lt;/li&gt;
     &lt;/ul&gt;
    &lt;/li&gt;
   &lt;/ul&gt;
   &lt;h3&gt;
    &lt;a aria-hidden="true" class="anchor" href="#printing-and-output" id="user-content-printing-and-output"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Printing and output
   &lt;/h3&gt;
   &lt;ul&gt;
    &lt;li&gt;
     print something, something, ...
    &lt;/li&gt;
    &lt;li&gt;
     printf "format string", something, something .... Similar to C printf function
    &lt;/li&gt;
    &lt;li&gt;
     OMFT contains the default format specification when print converts a number to a string
    &lt;/li&gt;
    &lt;li&gt;
     OFS and ORS do not have any effects on printf
    &lt;/li&gt;
    &lt;li&gt;
     The print and printf function can be redirected just as in the shell
     &lt;ul&gt;
      &lt;li&gt;
       print items &amp;gt; file
      &lt;/li&gt;
      &lt;li&gt;
       print items &amp;gt;&amp;gt; file
      &lt;/li&gt;
      &lt;li&gt;
       print items | command
      &lt;/li&gt;
      &lt;li&gt;
       print items |&amp;amp; command: the output from command can be read with
       &lt;code&gt;
        getline
       &lt;/code&gt;
      &lt;/li&gt;
      &lt;li&gt;
       Some version of awk only allows one open pipe , so we can call print items &amp;gt; file multiple times to append more items to the file, unlike in the shell where we have to use &amp;gt;&amp;gt; the second time onwards.
      &lt;/li&gt;
     &lt;/ul&gt;
    &lt;/li&gt;
   &lt;/ul&gt;
   &lt;h3&gt;
    &lt;a aria-hidden="true" class="anchor" href="#standard-descriptors" id="user-content-standard-descriptors"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Standard descriptors
   &lt;/h3&gt;
   &lt;ul&gt;
    &lt;li&gt;
     Gawk supports special filenames for standard input, output and error streams
     &lt;ul&gt;
      &lt;li&gt;
       /dev/stdin
      &lt;/li&gt;
      &lt;li&gt;
       /dev/stdout
      &lt;/li&gt;
      &lt;li&gt;
       /dev/stderr
      &lt;/li&gt;
      &lt;li&gt;
       /dev/fd/N : file associated with descriptor N.
      &lt;/li&gt;
     &lt;/ul&gt;
    &lt;/li&gt;
   &lt;/ul&gt;
   &lt;div class="highlight highlight-source-shell"&gt;
    &lt;pre&gt;    print &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;serious error detected &lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/dev/stderr&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;
   &lt;/div&gt;
   &lt;br/&gt;
   &lt;h3&gt;
    &lt;a aria-hidden="true" class="anchor" href="#special-files-for-process-related-information" id="user-content-special-files-for-process-related-information"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Special files for process-related information
   &lt;/h3&gt;
   &lt;ul&gt;
    &lt;li&gt;
     Gwak supports special file for accessing information about the running gawk process.
    &lt;/li&gt;
   &lt;/ul&gt;
   &lt;h3&gt;
    &lt;a aria-hidden="true" class="anchor" href="#special-files-for-network-communication" id="user-content-special-files-for-network-communication"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Special files for network communication
   &lt;/h3&gt;
   &lt;ul&gt;
    &lt;li&gt;
     Gawk, awk can open two-way TCP-IP connection.
    &lt;/li&gt;
   &lt;/ul&gt;
   &lt;h3&gt;
    &lt;a aria-hidden="true" class="anchor" href="#close-input-and-output-redirection" id="user-content-close-input-and-output-redirection"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Close input and output redirection
   &lt;/h3&gt;
   &lt;ul&gt;
    &lt;li&gt;
     &lt;code&gt;
      close(filename)
     &lt;/code&gt;
     or
     &lt;code&gt;
      close(command)
     &lt;/code&gt;
     close the input or output redirection pipe
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      filename
     &lt;/code&gt;
     or
     &lt;code&gt;
      command
     &lt;/code&gt;
     must
     &lt;code&gt;
      exactly match
     &lt;/code&gt;
    &lt;/li&gt;
   &lt;/ul&gt;
   &lt;h3&gt;
    &lt;a aria-hidden="true" class="anchor" href="#piping-to-sh" id="user-content-piping-to-sh"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Piping to sh
   &lt;/h3&gt;
   &lt;p&gt;
    A good way to build command line and execute them in the shell is to pipe them to
    &lt;code&gt;
     sh
    &lt;/code&gt;
   &lt;/p&gt;
   &lt;div class="highlight highlight-source-shell"&gt;
    &lt;pre&gt;    { printf(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;mv %s %s\n&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-smi"&gt;$0&lt;/span&gt;, tolower(&lt;span class="pl-smi"&gt;$0&lt;/span&gt;)) &lt;span class="pl-k"&gt;|&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;sh&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; }
    END {close(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;sh&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)}&lt;/pre&gt;
   &lt;/div&gt;
   &lt;br/&gt;
   &lt;h3&gt;
    &lt;a aria-hidden="true" class="anchor" href="#change-the-content-of-a-field" id="user-content-change-the-content-of-a-field"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Change the content of a field
   &lt;/h3&gt;
   &lt;ul&gt;
    &lt;li&gt;
     The content of a field can be change during processing , like this
    &lt;/li&gt;
   &lt;/ul&gt;
   &lt;div class="highlight highlight-source-shell"&gt;
    &lt;pre&gt;    awk &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;{$2=$2-10; print $0}&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; will subtract 10 from the second field, and the second field should be&lt;/span&gt;
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; a number for this to work.&lt;/span&gt;&lt;/pre&gt;
   &lt;/div&gt;
   &lt;br/&gt;
   &lt;h4&gt;
    &lt;a aria-hidden="true" class="anchor" href="#variables" id="user-content-variables"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Variables
   &lt;/h4&gt;
   &lt;ul&gt;
    &lt;li&gt;
     Custom variables can be created and default to zero
    &lt;/li&gt;
   &lt;/ul&gt;
   &lt;div class="highlight highlight-source-shell"&gt;
    &lt;pre&gt;    {
        str = &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;hello&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;;&lt;/span&gt;
    }&lt;/pre&gt;
   &lt;/div&gt;
   &lt;br/&gt;
   &lt;ul&gt;
    &lt;li&gt;
     Variables can be assigned in the command line.
    &lt;/li&gt;
    &lt;li&gt;
     Strings and number conversions.
    &lt;/li&gt;
    &lt;li&gt;
     Arithmetic Operators.
    &lt;/li&gt;
    &lt;li&gt;
     String concatenation is done by placing the operands next to each other
     &lt;ul&gt;
      &lt;li&gt;
       &lt;code&gt;
        ()
       &lt;/code&gt;
       should be used around concatenation in all but the most common context
      &lt;/li&gt;
     &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;
     True and false in awk. Zero and null string is false, other values are true.
    &lt;/li&gt;
    &lt;li&gt;
     Boolean expressions:
     &lt;code&gt;
      !
     &lt;/code&gt;
     ,
     &lt;code&gt;
      &amp;amp;&amp;amp;
     &lt;/code&gt;
     and
     &lt;code&gt;
      ||
     &lt;/code&gt;
     . Tenary operator
     &lt;code&gt;
      condition?expression1:expression2
     &lt;/code&gt;
    &lt;/li&gt;
   &lt;/ul&gt;
   &lt;h3&gt;
    &lt;a aria-hidden="true" class="anchor" href="#patterns" id="user-content-patterns"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Patterns
   &lt;/h3&gt;
   &lt;ul&gt;
    &lt;li&gt;
     Patterns control the execution of rules, a rule is executed when its pattern matches the current input record (line).
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      Record range
     &lt;/code&gt;
     is specified in the form
     &lt;code&gt;
      beginpatter, endpattern
     &lt;/code&gt;
     . Every record between inclusive is processed.
     &lt;ul&gt;
      &lt;li&gt;
       The range pattern can be turned on and off by the same record.
      &lt;/li&gt;
      &lt;li&gt;
       Range pattern cannot be combined with other patterns.
      &lt;/li&gt;
     &lt;/ul&gt;
    &lt;/li&gt;
   &lt;/ul&gt;
   &lt;h3&gt;
    &lt;a aria-hidden="true" class="anchor" href="#control-statements" id="user-content-control-statements"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Control Statements
   &lt;/h3&gt;
   &lt;p&gt;
    if-else
   &lt;/p&gt;
   &lt;div class="highlight highlight-source-shell"&gt;
    &lt;pre&gt;    &lt;span class="pl-k"&gt;if&lt;/span&gt; (x % 2 0)
        print &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;x is even&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
    &lt;span class="pl-k"&gt;else&lt;/span&gt;
        print &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;x is odd&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;
   &lt;/div&gt;
   &lt;br/&gt;
   &lt;p&gt;
    while
   &lt;/p&gt;
   &lt;div class="highlight highlight-source-shell"&gt;
    &lt;pre&gt;    &lt;span class="pl-k"&gt;while&lt;/span&gt; (i &lt;span class="pl-k"&gt;&amp;lt;&lt;/span&gt;= 3) {
        print &lt;span class="pl-smi"&gt;$i&lt;/span&gt;
        i++
    }&lt;/pre&gt;
   &lt;/div&gt;
   &lt;br/&gt;
   &lt;p&gt;
    do while
   &lt;/p&gt;
   &lt;div class="highlight highlight-source-shell"&gt;
    &lt;pre&gt;    &lt;span class="pl-k"&gt;do&lt;/span&gt; {
        print &lt;span class="pl-smi"&gt;$0&lt;/span&gt;
        i++
    } &lt;span class="pl-k"&gt;while&lt;/span&gt; (i &lt;span class="pl-k"&gt;&amp;lt;&lt;/span&gt;= 10)&lt;/pre&gt;
   &lt;/div&gt;
   &lt;br/&gt;
   &lt;p&gt;
    for
   &lt;/p&gt;
   &lt;div class="highlight highlight-source-shell"&gt;
    &lt;pre&gt;    &lt;span class="pl-k"&gt;for&lt;/span&gt; (i = 1&lt;span class="pl-k"&gt;;&lt;/span&gt; i &lt;span class="pl-k"&gt;&amp;lt;&lt;/span&gt;= 3&lt;span class="pl-k"&gt;;&lt;/span&gt; i++)
        print &lt;span class="pl-smi"&gt;$i&lt;/span&gt;&lt;/pre&gt;
   &lt;/div&gt;
   &lt;br/&gt;
   &lt;p&gt;
    switch: break
   &lt;/p&gt;
   &lt;div class="highlight highlight-source-shell"&gt;
    &lt;pre&gt;    switch (NR &lt;span class="pl-k"&gt;*&lt;/span&gt; 2 + 1) {
    &lt;span class="pl-k"&gt;case&lt;/span&gt; 3:
        &lt;span class="pl-c1"&gt;break&lt;/span&gt;
    &lt;span class="pl-k"&gt;case&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;11&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;:
        print NR - 1
        &lt;span class="pl-c1"&gt;break&lt;/span&gt;
    &lt;span class="pl-k"&gt;case&lt;/span&gt; /2[[:digit:]]+/:
        print NR
        &lt;span class="pl-c1"&gt;break&lt;/span&gt;
    default:
        print NR + 1
        &lt;span class="pl-c1"&gt;break&lt;/span&gt;
    &lt;span class="pl-k"&gt;case&lt;/span&gt; -1:
        print NR &lt;span class="pl-k"&gt;*&lt;/span&gt; -1
        &lt;span class="pl-c1"&gt;break&lt;/span&gt;
    }&lt;/pre&gt;
   &lt;/div&gt;
   &lt;br/&gt;
   &lt;p&gt;
    switch: continue
   &lt;/p&gt;
   &lt;div class="highlight highlight-source-shell"&gt;
    &lt;pre&gt;    BEGIN {
        &lt;span class="pl-k"&gt;for&lt;/span&gt; (x = 0&lt;span class="pl-k"&gt;;&lt;/span&gt; x &lt;span class="pl-k"&gt;&amp;lt;&lt;/span&gt;= 20&lt;span class="pl-k"&gt;;&lt;/span&gt; x++) {
            &lt;span class="pl-k"&gt;if&lt;/span&gt; (x 5)
                &lt;span class="pl-k"&gt;continue&lt;/span&gt;
            &lt;span class="pl-c1"&gt;printf&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;%d &lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, x
        }
        print &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
    }&lt;/pre&gt;
   &lt;/div&gt;
   &lt;br/&gt;
   &lt;ul&gt;
    &lt;li&gt;
     next: stop processing the current record and go on to the next record
    &lt;/li&gt;
    &lt;li&gt;
     nextfile : stop processing the current file and go on to the next file
    &lt;/li&gt;
    &lt;li&gt;
     exit n: stops execution for the current rule and execute the END rule if any.
    &lt;/li&gt;
   &lt;/ul&gt;
   &lt;div class="highlight highlight-source-shell"&gt;
    &lt;pre&gt;    BEGIN {
    &lt;span class="pl-k"&gt;if&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;((&lt;/span&gt;"date" &lt;span class="pl-k"&gt;|&lt;/span&gt; getline date_now) &lt;span class="pl-k"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;0&lt;/span&gt;) {&lt;/span&gt;
&lt;span class="pl-s"&gt;    print "Canâ€™t get system date" &amp;gt; "/dev/stderr"&lt;/span&gt;
&lt;span class="pl-s"&gt;    exit &lt;span class="pl-c1"&gt;1&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-s"&gt;    }&lt;/span&gt;
&lt;span class="pl-s"&gt;    print "current date is", date_now&lt;/span&gt;
&lt;span class="pl-s"&gt;    close("date")&lt;/span&gt;
&lt;span class="pl-s"&gt;    }&lt;/span&gt;&lt;/pre&gt;
   &lt;/div&gt;
   &lt;br/&gt;
   &lt;h3&gt;
    &lt;a aria-hidden="true" class="anchor" href="#functions" id="user-content-functions"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Functions
   &lt;/h3&gt;
   &lt;ul&gt;
    &lt;li&gt;
     Controlling output buffering with
     &lt;code&gt;
      system
     &lt;/code&gt;
     &lt;ul&gt;
      &lt;li&gt;
       Use
       &lt;code&gt;
        system("")
       &lt;/code&gt;
       to fflush output buffering instead of
       &lt;code&gt;
        fflush
       &lt;/code&gt;
      &lt;/li&gt;
     &lt;/ul&gt;
    &lt;/li&gt;
   &lt;/ul&gt;
   &lt;h1&gt;
    &lt;a aria-hidden="true" class="anchor" href="#howtos" id="user-content-howtos"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    HOWTOS
   &lt;/h1&gt;
   &lt;h2&gt;
    &lt;a aria-hidden="true" class="anchor" href="#how-to-remove-special-characters-from-files" id="user-content-how-to-remove-special-characters-from-files"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    How to remove special characters from files
   &lt;/h2&gt;
   &lt;ul&gt;
    &lt;li&gt;
     Suppose you have a list of files starting with a certain number of special character that you want to remove
    &lt;/li&gt;
    &lt;li&gt;
     The idea is to generate the new file name for each of the files then use the
     &lt;code&gt;
      mv
     &lt;/code&gt;
     or
     &lt;code&gt;
      rename
     &lt;/code&gt;
     command to change the orginal file name
    &lt;/li&gt;
    &lt;li&gt;
     First, export the list of filenames to a first file test1
    &lt;/li&gt;
   &lt;/ul&gt;
   &lt;div class="highlight highlight-source-shell"&gt;
    &lt;pre&gt;    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Suppose that the original files are in folder original_files and we want to copy them to&lt;/span&gt;
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; folder new_files&lt;/span&gt;
    ls original_files &lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; list1 &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; generate list of files&lt;/span&gt;
    awk &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;{gsub(/[^a-zA-Z0-9 .]/, "", $0); print;}&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt; list1 &lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; list2 &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; removes all special characters and generate a second list&lt;/span&gt;

    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; combine list1 and list2 to a list of shell command in list3&lt;/span&gt;
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; We will use strong quoting&lt;/span&gt;
    awk &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;{gsub(/\47/, "\47\\\47\47", $0); str = $0; getline &amp;lt; "list2"; print "cp -f \47original_files/"str "\47 \47new_files/"$0"\47" &amp;gt; "list3";}&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt; list1

    sh list3 &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; run the list of commands in list3&lt;/span&gt;
    rm -frv list1 list2 list3 &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; remove all temporary files&lt;/span&gt;&lt;/pre&gt;
   &lt;/div&gt;
   &lt;br/&gt;
   &lt;h2&gt;
    &lt;a aria-hidden="true" class="anchor" href="#make-each-character-a-separate-field" id="user-content-make-each-character-a-separate-field"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Make each character a separate field
   &lt;/h2&gt;
   &lt;ul&gt;
    &lt;li&gt;
     By changing the field separtor to null string
    &lt;/li&gt;
   &lt;/ul&gt;
   &lt;div class="highlight highlight-source-shell"&gt;
    &lt;pre&gt;    BEGIN {FS=&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;}&lt;/pre&gt;
   &lt;/div&gt;
   &lt;br/&gt;
   &lt;h1&gt;
    &lt;a aria-hidden="true" class="anchor" href="#books" id="user-content-books"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    BOOKS
   &lt;/h1&gt;
   &lt;ul&gt;
    &lt;li&gt;
     &lt;a href="http://www.gnu.org/software/gawk/manual/gawk.pdf"&gt;
      Gwak Effective awk programming
     &lt;/a&gt;
     - Free book, great for understanding details about awk and gawk programming.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;a href="http://gregable.com/2010/09/why-you-should-know-just-little-awk.html"&gt;
      Why you should learn just a little Awk - An Awk Tutorial by Example
     &lt;/a&gt;
    &lt;/li&gt;
   &lt;/ul&gt;
   &lt;h1&gt;
    &lt;a aria-hidden="true" class="anchor" href="#articles" id="user-content-articles"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    ARTICLES
   &lt;/h1&gt;
   &lt;ul&gt;
    &lt;li&gt;
     &lt;a href="http://www.differencebetween.net/technology/software-technology/difference-between-gawk-and-awk/"&gt;
      Differences between different versions of awk
     &lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
     &lt;a href="http://www.thegeekstuff.com/2011/06/awk-nawk-gawk/"&gt;
      http://www.thegeekstuff.com/2011/06/awk-nawk-gawk/
     &lt;/a&gt;
     .
    &lt;/li&gt;
   &lt;/ul&gt;
  &lt;/article&gt;
 &lt;/div&gt;
&lt;/div&gt;

            &lt;div class="git-meta"&gt;
                
                &lt;span&gt;Brought to you by me &lt;a href="https://github.com/minhhh/pelican_git"&gt;pelican_git&lt;/a&gt;.&lt;/span&gt;
                
                &lt;span style="float: right; color: #369;"&gt;&lt;a href="https://github.com/minhhh/wiki/blob/master/awk.md"&gt;view original&lt;/a&gt;&lt;/span&gt;
                &lt;span style="float: right; margin-right: 8px;"&gt;
                    &lt;a style="color: rgb(102, 102, 102);" href="https://github.com/minhhh/wiki/blob/master/awk.md"&gt;awk.md&lt;/a&gt;&lt;/span&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;&lt;/p&gt;</summary><category term="awk"></category><category term="cli"></category></entry><entry><title>Python decorator tutorial</title><link href="http://minhhh.github.io/posts/python-decorator-tutorial" rel="alternate"></link><published>2014-10-05T00:00:00-04:00</published><updated>2014-10-05T00:00:00-04:00</updated><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2014-10-05:posts/python-decorator-tutorial</id><summary type="html">&lt;p&gt;&lt;div&gt;
    &lt;style type = "text/css" scoped&gt;
.git-content div {
    padding: 0;
    margin: 0;
}

.git-content .git-file {
    border: 1px solid #DEDEDE;
    margin-bottom: 1em;
}

.git-content .git-file .git-meta {
    background-color: #EAEAEA;
    color: #666666;
    font-size: 85%;
    overflow: hidden;
    padding: 0.5em;
}

.git-content .git-file .git-meta a {
    color: #336699;
}

.git-content .git-file .git-meta a:visited {
    color: #773377;
}

.git-content .git-file {
    background-color: #F8F8FF;
    border-bottom: 1px solid #DDDDDD;
    font-size: 100%;
    overflow: auto;
    word-wrap: normal;
}

.git-content .git-file pre {
    background: none repeat scroll 0 0 transparent !important;
    border: medium none !important;
    margin: 0 !important;
    padding: 0 !important;
}
    &lt;/style&gt;
    &lt;div class="git-content"&gt;
        &lt;div class="git-file"&gt;
            &lt;div class="file"&gt;
 &lt;div class="readme blob instapaper_body" id="readme"&gt;
  &lt;article class="markdown-body entry-content" itemprop="text"&gt;
   &lt;h1&gt;
    &lt;a aria-hidden="true" class="anchor" href="#python-decorator-tutorial" id="user-content-python-decorator-tutorial"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    PYTHON DECORATOR TUTORIAL
   &lt;/h1&gt;
   &lt;p&gt;
    Decorators are a powerful tool for getting rid of code duplication, aka following DRY principle. It also helps with standardization of code in a project without forcing developers to remember predefined snippets or patters. In this tutorial, we'll discover how to create and use them.
   &lt;/p&gt;
   &lt;p&gt;
    Another important point to note is I'm aiming for practical value of the decorators so there will be no
    &lt;code&gt;
     foo
    &lt;/code&gt;
    ,
    &lt;code&gt;
     bar
    &lt;/code&gt;
    examples, all examples must solve real world problem and/or taken from good source.
   &lt;/p&gt;
   &lt;h2&gt;
    &lt;a aria-hidden="true" class="anchor" href="#first-level" id="user-content-first-level"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    First level
   &lt;/h2&gt;
   &lt;p&gt;
    We all know memoization and probably implement it as a function that takes an arbitrary function and return a memoized function:
   &lt;/p&gt;
   &lt;div class="highlight highlight-source-python"&gt;
    &lt;pre&gt;    memoized_factorial &lt;span class="pl-k"&gt;=&lt;/span&gt; construct_memoize(factorial)&lt;/pre&gt;
   &lt;/div&gt;
   &lt;br/&gt;
   &lt;p&gt;
    This is extremely cumbersome if
    &lt;code&gt;
     factorial
    &lt;/code&gt;
    is a method of some class because then we have to use temporary variable to store the memoized function and somehow reassign it to the method. We want some way to elegantly do all the manual things to make a memoized version of a function, this is where
    &lt;code&gt;
     decorator
    &lt;/code&gt;
    comes in.
   &lt;/p&gt;
   &lt;p&gt;
    In its simplest form, a decorator is a function that takes the original function and returns a
    &lt;code&gt;
     decorated function
    &lt;/code&gt;
   &lt;/p&gt;
   &lt;div class="highlight highlight-source-python"&gt;
    &lt;pre&gt;    cache_obj &lt;span class="pl-k"&gt;=&lt;/span&gt; {}

    &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;cache&lt;/span&gt;(&lt;span class="pl-smi"&gt;func&lt;/span&gt;):
        &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;inner&lt;/span&gt;(&lt;span class="pl-k"&gt;*&lt;/span&gt;&lt;span class="pl-smi"&gt;args&lt;/span&gt;, &lt;span class="pl-k"&gt;**&lt;/span&gt;&lt;span class="pl-smi"&gt;kwargs&lt;/span&gt;):
            &lt;span class="pl-k"&gt;global&lt;/span&gt; cache_obj
            key &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;str&lt;/span&gt;(args) &lt;span class="pl-k"&gt;+&lt;/span&gt; &lt;span class="pl-c1"&gt;str&lt;/span&gt;(kwargs)
            &lt;span class="pl-k"&gt;if&lt;/span&gt; key &lt;span class="pl-k"&gt;not&lt;/span&gt; &lt;span class="pl-k"&gt;in&lt;/span&gt; cache_obj:
                cache_obj[key] &lt;span class="pl-k"&gt;=&lt;/span&gt; func(&lt;span class="pl-k"&gt;*&lt;/span&gt;args, &lt;span class="pl-k"&gt;**&lt;/span&gt;kwargs)
            &lt;span class="pl-k"&gt;else&lt;/span&gt;:
                &lt;span class="pl-c1"&gt;print&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Get from cache &lt;span class="pl-c1"&gt;{}&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;.format(key)
            &lt;span class="pl-k"&gt;return&lt;/span&gt; cache_obj[key]
        &lt;span class="pl-k"&gt;return&lt;/span&gt; inner

    &lt;span class="pl-en"&gt;@cache&lt;/span&gt;
    &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-c1"&gt;sum&lt;/span&gt;(&lt;span class="pl-smi"&gt;a&lt;/span&gt;, &lt;span class="pl-smi"&gt;b&lt;/span&gt;):
        &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"""&lt;/span&gt;Sum 2 numbers&lt;/span&gt;
&lt;span class="pl-s"&gt;        &lt;span class="pl-pds"&gt;"""&lt;/span&gt;&lt;/span&gt;
        &lt;span class="pl-k"&gt;return&lt;/span&gt; a &lt;span class="pl-k"&gt;+&lt;/span&gt; b&lt;/pre&gt;
   &lt;/div&gt;
   &lt;br/&gt;
   &lt;p&gt;
    The
    &lt;code&gt;
     @
    &lt;/code&gt;
    is a special syntax that applies the decorator function to the underneath function or class. Here,
    &lt;code&gt;
     cache(func)
    &lt;/code&gt;
    is called, passing original
    &lt;code&gt;
     func
    &lt;/code&gt;
    to the decorator, then replace
    &lt;code&gt;
     func
    &lt;/code&gt;
    with whatever function is returned from
    &lt;code&gt;
     cache(func)
    &lt;/code&gt;
    .
   &lt;/p&gt;
   &lt;p&gt;
    Using global cache object
    &lt;code&gt;
     cache_obj
    &lt;/code&gt;
    is not a great idea, because different functions can have the same arguments, then your cache is overwritten. It's better to assign the cache object directly to the original function
   &lt;/p&gt;
   &lt;div class="highlight highlight-source-python"&gt;
    &lt;pre&gt;    &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;memoize_2&lt;/span&gt;(&lt;span class="pl-smi"&gt;func&lt;/span&gt;):
        &lt;span class="pl-k"&gt;if&lt;/span&gt; &lt;span class="pl-k"&gt;not&lt;/span&gt; &lt;span class="pl-c1"&gt;hasattr&lt;/span&gt;(func, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;cache&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;):
            func.cache &lt;span class="pl-k"&gt;=&lt;/span&gt; {}
        &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;inner&lt;/span&gt;(&lt;span class="pl-k"&gt;*&lt;/span&gt;&lt;span class="pl-smi"&gt;args&lt;/span&gt;, &lt;span class="pl-k"&gt;**&lt;/span&gt;&lt;span class="pl-smi"&gt;kwargs&lt;/span&gt;):
            key &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;str&lt;/span&gt;(args) &lt;span class="pl-k"&gt;+&lt;/span&gt; &lt;span class="pl-c1"&gt;str&lt;/span&gt;(kwargs)
            &lt;span class="pl-k"&gt;if&lt;/span&gt; key &lt;span class="pl-k"&gt;not&lt;/span&gt; &lt;span class="pl-k"&gt;in&lt;/span&gt; func.cache:
                func.cache[key] &lt;span class="pl-k"&gt;=&lt;/span&gt; func(&lt;span class="pl-k"&gt;*&lt;/span&gt;args, &lt;span class="pl-k"&gt;**&lt;/span&gt;kwargs)
            &lt;span class="pl-k"&gt;else&lt;/span&gt;:
                &lt;span class="pl-c1"&gt;print&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Get from cache &lt;span class="pl-c1"&gt;{}&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;.format(key)
            &lt;span class="pl-k"&gt;return&lt;/span&gt; func.cache[key]
        &lt;span class="pl-k"&gt;return&lt;/span&gt; inner

    &lt;span class="pl-en"&gt;@memoize_2&lt;/span&gt;
    &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;multiply&lt;/span&gt;(&lt;span class="pl-smi"&gt;a&lt;/span&gt;, &lt;span class="pl-smi"&gt;b&lt;/span&gt;):
        &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"""&lt;/span&gt;Multiply 2 numbers&lt;/span&gt;
&lt;span class="pl-s"&gt;        &lt;span class="pl-pds"&gt;"""&lt;/span&gt;&lt;/span&gt;
        &lt;span class="pl-k"&gt;return&lt;/span&gt; a &lt;span class="pl-k"&gt;*&lt;/span&gt; b

    multiply(&lt;span class="pl-c1"&gt;1&lt;/span&gt;,&lt;span class="pl-c1"&gt;2&lt;/span&gt;)
    multiply(&lt;span class="pl-c1"&gt;1&lt;/span&gt;,&lt;span class="pl-c1"&gt;2&lt;/span&gt;)&lt;/pre&gt;
   &lt;/div&gt;
   &lt;br/&gt;
   &lt;p&gt;
    This decorator is nice, but in practice nobody does this, and it's too bad that a lot of tutorials keep giving these non-working examples. The reason is the new decorated function lose all its original information such as name, docstring, module name and so on.
   &lt;/p&gt;
   &lt;div class="highlight highlight-source-python"&gt;
    &lt;pre&gt;    &lt;span class="pl-c1"&gt;print&lt;/span&gt; multiply.&lt;span class="pl-c1"&gt;__doc__&lt;/span&gt; &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; None&lt;/span&gt;&lt;/pre&gt;
   &lt;/div&gt;
   &lt;br/&gt;
   &lt;p&gt;
    To keep these information, we use
    &lt;code&gt;
     functools.wrapper
    &lt;/code&gt;
   &lt;/p&gt;
   &lt;div class="highlight highlight-source-python"&gt;
    &lt;pre&gt;    &lt;span class="pl-k"&gt;import&lt;/span&gt; functools
    &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;memoize&lt;/span&gt;(&lt;span class="pl-smi"&gt;func&lt;/span&gt;):
        &lt;span class="pl-en"&gt;@functools.wraps&lt;/span&gt;(func)
        &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;inner&lt;/span&gt;(&lt;span class="pl-k"&gt;*&lt;/span&gt;&lt;span class="pl-smi"&gt;args&lt;/span&gt;, &lt;span class="pl-k"&gt;**&lt;/span&gt;&lt;span class="pl-smi"&gt;kwargs&lt;/span&gt;):
            key &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;str&lt;/span&gt;(args) &lt;span class="pl-k"&gt;+&lt;/span&gt; &lt;span class="pl-c1"&gt;str&lt;/span&gt;(kwargs)
            &lt;span class="pl-k"&gt;if&lt;/span&gt; &lt;span class="pl-k"&gt;not&lt;/span&gt; &lt;span class="pl-c1"&gt;hasattr&lt;/span&gt;(func, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;cache&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;):
                func.cache &lt;span class="pl-k"&gt;=&lt;/span&gt; {}
            &lt;span class="pl-k"&gt;if&lt;/span&gt; key &lt;span class="pl-k"&gt;not&lt;/span&gt; &lt;span class="pl-k"&gt;in&lt;/span&gt; func.cache:
                func.cache[key] &lt;span class="pl-k"&gt;=&lt;/span&gt; func(&lt;span class="pl-k"&gt;*&lt;/span&gt;args, &lt;span class="pl-k"&gt;**&lt;/span&gt;kwargs)
            &lt;span class="pl-k"&gt;else&lt;/span&gt;:
                &lt;span class="pl-c1"&gt;print&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Get from cache &lt;span class="pl-c1"&gt;{}&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;.format(key)
            &lt;span class="pl-k"&gt;return&lt;/span&gt; func.cache[key]
        &lt;span class="pl-k"&gt;return&lt;/span&gt; inner

    &lt;span class="pl-c1"&gt;print&lt;/span&gt; multiply.&lt;span class="pl-c1"&gt;__doc__&lt;/span&gt; &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Multiply 2 numbers&lt;/span&gt;&lt;/pre&gt;
   &lt;/div&gt;
   &lt;br/&gt;
   &lt;p&gt;
    Now the decorated function also retain important information from the original functions, that's neat!
   &lt;/p&gt;
   &lt;h2&gt;
    &lt;a aria-hidden="true" class="anchor" href="#higher-level" id="user-content-higher-level"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Higher level
   &lt;/h2&gt;
   &lt;p&gt;
    The
    &lt;code&gt;
     memoize
    &lt;/code&gt;
    decorator doesn't need any customization, but there are a lot of pattern that requires some kind of customization. For instance, we want to apply a retry pattern to a function that follows special protocol. Obviously, we have to specify the number of retries, the delay between retry, and maybe a backoff factor to scale up the delay between failed attempts. This is how we do it:
   &lt;/p&gt;
   &lt;div class="highlight highlight-source-python"&gt;
    &lt;pre&gt;    &lt;span class="pl-k"&gt;import&lt;/span&gt; time, math

    &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;retry&lt;/span&gt;(&lt;span class="pl-smi"&gt;tries&lt;/span&gt;, &lt;span class="pl-smi"&gt;delay&lt;/span&gt;&lt;span class="pl-k"&gt;=&lt;/span&gt;&lt;span class="pl-c1"&gt;3&lt;/span&gt;, &lt;span class="pl-smi"&gt;backoff&lt;/span&gt;&lt;span class="pl-k"&gt;=&lt;/span&gt;&lt;span class="pl-c1"&gt;2&lt;/span&gt;):
        &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'''&lt;/span&gt;Retries a function or method until it returns True.&lt;/span&gt;
&lt;span class="pl-s"&gt;        delay sets the initial delay in seconds, and backoff sets the factor by which&lt;/span&gt;
&lt;span class="pl-s"&gt;        the delay should lengthen after each failure. backoff must be greater than 1,&lt;/span&gt;
&lt;span class="pl-s"&gt;        or else it isn't really a backoff. tries must be at least 0, and delay&lt;/span&gt;
&lt;span class="pl-s"&gt;        greater than 0.&lt;span class="pl-pds"&gt;'''&lt;/span&gt;&lt;/span&gt;

        &lt;span class="pl-k"&gt;if&lt;/span&gt; backoff &lt;span class="pl-k"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;:
            &lt;span class="pl-k"&gt;raise&lt;/span&gt; &lt;span class="pl-c1"&gt;ValueError&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;backoff must be greater than 1&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)

        &lt;span class="pl-k"&gt;if&lt;/span&gt; tries &lt;span class="pl-k"&gt;&amp;lt;&lt;/span&gt; &lt;span class="pl-c1"&gt;0&lt;/span&gt;:
            &lt;span class="pl-k"&gt;raise&lt;/span&gt; &lt;span class="pl-c1"&gt;ValueError&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;tries must be 0 or greater&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)

        &lt;span class="pl-k"&gt;if&lt;/span&gt; delay &lt;span class="pl-k"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;0&lt;/span&gt;:
            &lt;span class="pl-k"&gt;raise&lt;/span&gt; &lt;span class="pl-c1"&gt;ValueError&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;delay must be greater than 0&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)

        &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;deco_retry&lt;/span&gt;(&lt;span class="pl-smi"&gt;f&lt;/span&gt;):
            &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;f_retry&lt;/span&gt;(&lt;span class="pl-k"&gt;*&lt;/span&gt;&lt;span class="pl-smi"&gt;args&lt;/span&gt;, &lt;span class="pl-k"&gt;**&lt;/span&gt;&lt;span class="pl-smi"&gt;kwargs&lt;/span&gt;):
                mtries, mdelay &lt;span class="pl-k"&gt;=&lt;/span&gt; tries, delay

                rv &lt;span class="pl-k"&gt;=&lt;/span&gt; f(&lt;span class="pl-k"&gt;*&lt;/span&gt;args, &lt;span class="pl-k"&gt;**&lt;/span&gt;kwargs)
                &lt;span class="pl-k"&gt;while&lt;/span&gt; mtries &lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;0&lt;/span&gt;:
                    &lt;span class="pl-k"&gt;if&lt;/span&gt; rv &lt;span class="pl-k"&gt;is&lt;/span&gt; &lt;span class="pl-c1"&gt;True&lt;/span&gt;:
                        &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-c1"&gt;True&lt;/span&gt;

                    mtries &lt;span class="pl-k"&gt;-=&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;
                    time.sleep(mdelay)
                    mdelay &lt;span class="pl-k"&gt;*=&lt;/span&gt; backoff

                    rv &lt;span class="pl-k"&gt;=&lt;/span&gt; f(&lt;span class="pl-k"&gt;*&lt;/span&gt;args, &lt;span class="pl-k"&gt;**&lt;/span&gt;kwargs)

                &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-c1"&gt;False&lt;/span&gt;
            &lt;span class="pl-k"&gt;return&lt;/span&gt; f_retry
        &lt;span class="pl-k"&gt;return&lt;/span&gt; deco_retry

    &lt;span class="pl-en"&gt;@retry&lt;/span&gt;(&lt;span class="pl-c1"&gt;1&lt;/span&gt;, &lt;span class="pl-v"&gt;delay&lt;/span&gt;&lt;span class="pl-k"&gt;=&lt;/span&gt;&lt;span class="pl-c1"&gt;1&lt;/span&gt;, &lt;span class="pl-v"&gt;backoff&lt;/span&gt;&lt;span class="pl-k"&gt;=&lt;/span&gt;&lt;span class="pl-c1"&gt;2&lt;/span&gt;)
    &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;get_data&lt;/span&gt;():
        &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-c1"&gt;False&lt;/span&gt;&lt;/pre&gt;
   &lt;/div&gt;
   &lt;br/&gt;
   &lt;p&gt;
    Here, we define
    &lt;code&gt;
     retry
    &lt;/code&gt;
    as a function that returns a
    &lt;code&gt;
     decorator
    &lt;/code&gt;
    which will do the actual decoration of our original function with the parameters provided by
    &lt;code&gt;
     retry
    &lt;/code&gt;
    . We consider that
    &lt;code&gt;
     retry(1, delay=1, backoff=2)
    &lt;/code&gt;
    is called first, returning a function, then the decorator syntax
    &lt;code&gt;
     @
    &lt;/code&gt;
    is applied. This is just an addition of another layer on the decoration stack. In theory, you can have unlimited number of nested layer, but in practice, most of the time you only use 2.
   &lt;/p&gt;
   &lt;h2&gt;
    &lt;a aria-hidden="true" class="anchor" href="#decorator-class" id="user-content-decorator-class"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Decorator class
   &lt;/h2&gt;
   &lt;p&gt;
    Using function as decorators is straight forward, and for storing persistent information we use closures over temporary variables. It'd be nice if the persistent information are class members.
   &lt;/p&gt;
   &lt;div class="highlight highlight-source-python"&gt;
    &lt;pre&gt;    &lt;span class="pl-k"&gt;import&lt;/span&gt; collections
    &lt;span class="pl-k"&gt;class&lt;/span&gt; &lt;span class="pl-en"&gt;memoized&lt;/span&gt;(&lt;span class="pl-c1"&gt;object&lt;/span&gt;):
        &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'''&lt;/span&gt;Decorator. Caches a function's return value each time it is called.&lt;/span&gt;
&lt;span class="pl-s"&gt;        If called later with the same arguments, the cached value is returned&lt;/span&gt;
&lt;span class="pl-s"&gt;        (not reevaluated).&lt;/span&gt;
&lt;span class="pl-s"&gt;        &lt;span class="pl-pds"&gt;'''&lt;/span&gt;&lt;/span&gt;
        &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-c1"&gt;__init__&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-smi"&gt;self&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-smi"&gt;func&lt;/span&gt;):
            &lt;span class="pl-c1"&gt;self&lt;/span&gt;.func &lt;span class="pl-k"&gt;=&lt;/span&gt; func
            &lt;span class="pl-c1"&gt;self&lt;/span&gt;.&lt;span class="pl-c1"&gt;__doc__&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; func.&lt;span class="pl-c1"&gt;__doc__&lt;/span&gt;
            &lt;span class="pl-c1"&gt;self&lt;/span&gt;.cache &lt;span class="pl-k"&gt;=&lt;/span&gt; {}
        &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-c1"&gt;__call__&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-smi"&gt;self&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-k"&gt;*&lt;/span&gt;&lt;span class="pl-smi"&gt;args&lt;/span&gt;, &lt;span class="pl-k"&gt;**&lt;/span&gt;&lt;span class="pl-smi"&gt;kwargs&lt;/span&gt;):
            &lt;span class="pl-k"&gt;if&lt;/span&gt; &lt;span class="pl-k"&gt;not&lt;/span&gt; &lt;span class="pl-c1"&gt;isinstance&lt;/span&gt;(args, collections.Hashable):
                &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; uncacheable. a list, for instance.&lt;/span&gt;
                &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; better to not cache than blow up.&lt;/span&gt;
                &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-c1"&gt;self&lt;/span&gt;.func(&lt;span class="pl-k"&gt;*&lt;/span&gt;args, &lt;span class="pl-k"&gt;**&lt;/span&gt;kwargs)
            &lt;span class="pl-k"&gt;if&lt;/span&gt; args &lt;span class="pl-k"&gt;in&lt;/span&gt; &lt;span class="pl-c1"&gt;self&lt;/span&gt;.cache:
                &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-c1"&gt;self&lt;/span&gt;.cache[args]
            &lt;span class="pl-k"&gt;else&lt;/span&gt;:
                value &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;self&lt;/span&gt;.func(&lt;span class="pl-k"&gt;*&lt;/span&gt;args, &lt;span class="pl-k"&gt;**&lt;/span&gt;kwargs)
                &lt;span class="pl-c1"&gt;self&lt;/span&gt;.cache[args] &lt;span class="pl-k"&gt;=&lt;/span&gt; value
                &lt;span class="pl-k"&gt;return&lt;/span&gt; value
        &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-c1"&gt;__repr__&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-smi"&gt;self&lt;/span&gt;&lt;/span&gt;):
            &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'''&lt;/span&gt;Return the function's docstring.&lt;span class="pl-pds"&gt;'''&lt;/span&gt;&lt;/span&gt;
            &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-c1"&gt;self&lt;/span&gt;.func.&lt;span class="pl-c1"&gt;__doc__&lt;/span&gt;
        &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-c1"&gt;__get__&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-smi"&gt;self&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-smi"&gt;obj&lt;/span&gt;, &lt;span class="pl-smi"&gt;objtype&lt;/span&gt;):
            &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'''&lt;/span&gt;Support instance methods.&lt;span class="pl-pds"&gt;'''&lt;/span&gt;&lt;/span&gt;
            &lt;span class="pl-k"&gt;return&lt;/span&gt; functools.partial(&lt;span class="pl-c1"&gt;self&lt;/span&gt;.&lt;span class="pl-c1"&gt;__call__&lt;/span&gt;, obj)&lt;/pre&gt;
   &lt;/div&gt;
   &lt;br/&gt;
   &lt;p&gt;
    Here, the decorator is an object of class
    &lt;code&gt;
     memoized
    &lt;/code&gt;
    and you can store all sort of information like you would a normal object.
   &lt;/p&gt;
   &lt;h2&gt;
    &lt;a aria-hidden="true" class="anchor" href="#class-decorator" id="user-content-class-decorator"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Class decorator
   &lt;/h2&gt;
   &lt;p&gt;
    Up to now we're working with function decorator, what if we want to operate at class level? It's actually quite simple, we only have to define a function that takes a class instead of a function as the parameter.
   &lt;/p&gt;
   &lt;p&gt;
    Let's have a look at
    &lt;a href="https://hg.python.org/cpython/file/8e838598eed1/Lib/functools.py"&gt;
     functool.total_ordering
    &lt;/a&gt;
    . This decorator makes it so that you only have to define one of the four functions
    &lt;code&gt;
     __lt__
    &lt;/code&gt;
    ,
    &lt;code&gt;
     __le__
    &lt;/code&gt;
    ,
    &lt;code&gt;
     __gt__
    &lt;/code&gt;
    ,
    &lt;code&gt;
     __ge__
    &lt;/code&gt;
    , and the other three will be defined based on the provided function.
   &lt;/p&gt;
   &lt;div class="highlight highlight-source-python"&gt;
    &lt;pre&gt;    &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;total_ordering&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-smi"&gt;cls&lt;/span&gt;&lt;/span&gt;):
        &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"""&lt;/span&gt;Class decorator that fills in missing ordering methods&lt;span class="pl-pds"&gt;"""&lt;/span&gt;&lt;/span&gt;
        convert &lt;span class="pl-k"&gt;=&lt;/span&gt; {
            &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;__lt__&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;: [(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;__gt__&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-k"&gt;lambda&lt;/span&gt; &lt;span class="pl-smi"&gt;self&lt;/span&gt;, &lt;span class="pl-smi"&gt;other&lt;/span&gt;: &lt;span class="pl-k"&gt;not&lt;/span&gt; (&lt;span class="pl-c1"&gt;self&lt;/span&gt; &lt;span class="pl-k"&gt;&amp;lt;&lt;/span&gt; other &lt;span class="pl-k"&gt;or&lt;/span&gt; &lt;span class="pl-c1"&gt;self&lt;/span&gt; &lt;span class="pl-k"&gt;==&lt;/span&gt; other)),
                    (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;__le__&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-k"&gt;lambda&lt;/span&gt; &lt;span class="pl-smi"&gt;self&lt;/span&gt;, &lt;span class="pl-smi"&gt;other&lt;/span&gt;: &lt;span class="pl-c1"&gt;self&lt;/span&gt; &lt;span class="pl-k"&gt;&amp;lt;&lt;/span&gt; other &lt;span class="pl-k"&gt;or&lt;/span&gt; &lt;span class="pl-c1"&gt;self&lt;/span&gt; &lt;span class="pl-k"&gt;==&lt;/span&gt; other),
                    (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;__ge__&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-k"&gt;lambda&lt;/span&gt; &lt;span class="pl-smi"&gt;self&lt;/span&gt;, &lt;span class="pl-smi"&gt;other&lt;/span&gt;: &lt;span class="pl-k"&gt;not&lt;/span&gt; &lt;span class="pl-c1"&gt;self&lt;/span&gt; &lt;span class="pl-k"&gt;&amp;lt;&lt;/span&gt; other)],
            &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;__le__&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;: [(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;__ge__&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-k"&gt;lambda&lt;/span&gt; &lt;span class="pl-smi"&gt;self&lt;/span&gt;, &lt;span class="pl-smi"&gt;other&lt;/span&gt;: &lt;span class="pl-k"&gt;not&lt;/span&gt; &lt;span class="pl-c1"&gt;self&lt;/span&gt; &lt;span class="pl-k"&gt;&amp;lt;=&lt;/span&gt; other &lt;span class="pl-k"&gt;or&lt;/span&gt; &lt;span class="pl-c1"&gt;self&lt;/span&gt; &lt;span class="pl-k"&gt;==&lt;/span&gt; other),
                    (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;__lt__&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-k"&gt;lambda&lt;/span&gt; &lt;span class="pl-smi"&gt;self&lt;/span&gt;, &lt;span class="pl-smi"&gt;other&lt;/span&gt;: &lt;span class="pl-c1"&gt;self&lt;/span&gt; &lt;span class="pl-k"&gt;&amp;lt;=&lt;/span&gt; other &lt;span class="pl-k"&gt;and&lt;/span&gt; &lt;span class="pl-k"&gt;not&lt;/span&gt; &lt;span class="pl-c1"&gt;self&lt;/span&gt; &lt;span class="pl-k"&gt;==&lt;/span&gt; other),
                    (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;__gt__&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-k"&gt;lambda&lt;/span&gt; &lt;span class="pl-smi"&gt;self&lt;/span&gt;, &lt;span class="pl-smi"&gt;other&lt;/span&gt;: &lt;span class="pl-k"&gt;not&lt;/span&gt; &lt;span class="pl-c1"&gt;self&lt;/span&gt; &lt;span class="pl-k"&gt;&amp;lt;=&lt;/span&gt; other)],
            &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;__gt__&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;: [(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;__lt__&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-k"&gt;lambda&lt;/span&gt; &lt;span class="pl-smi"&gt;self&lt;/span&gt;, &lt;span class="pl-smi"&gt;other&lt;/span&gt;: &lt;span class="pl-k"&gt;not&lt;/span&gt; (&lt;span class="pl-c1"&gt;self&lt;/span&gt; &lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; other &lt;span class="pl-k"&gt;or&lt;/span&gt; &lt;span class="pl-c1"&gt;self&lt;/span&gt; &lt;span class="pl-k"&gt;==&lt;/span&gt; other)),
                    (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;__ge__&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-k"&gt;lambda&lt;/span&gt; &lt;span class="pl-smi"&gt;self&lt;/span&gt;, &lt;span class="pl-smi"&gt;other&lt;/span&gt;: &lt;span class="pl-c1"&gt;self&lt;/span&gt; &lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; other &lt;span class="pl-k"&gt;or&lt;/span&gt; &lt;span class="pl-c1"&gt;self&lt;/span&gt; &lt;span class="pl-k"&gt;==&lt;/span&gt; other),
                    (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;__le__&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-k"&gt;lambda&lt;/span&gt; &lt;span class="pl-smi"&gt;self&lt;/span&gt;, &lt;span class="pl-smi"&gt;other&lt;/span&gt;: &lt;span class="pl-k"&gt;not&lt;/span&gt; &lt;span class="pl-c1"&gt;self&lt;/span&gt; &lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; other)],
            &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;__ge__&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;: [(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;__le__&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-k"&gt;lambda&lt;/span&gt; &lt;span class="pl-smi"&gt;self&lt;/span&gt;, &lt;span class="pl-smi"&gt;other&lt;/span&gt;: (&lt;span class="pl-k"&gt;not&lt;/span&gt; &lt;span class="pl-c1"&gt;self&lt;/span&gt; &lt;span class="pl-k"&gt;&amp;gt;=&lt;/span&gt; other) &lt;span class="pl-k"&gt;or&lt;/span&gt; &lt;span class="pl-c1"&gt;self&lt;/span&gt; &lt;span class="pl-k"&gt;==&lt;/span&gt; other),
                    (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;__gt__&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-k"&gt;lambda&lt;/span&gt; &lt;span class="pl-smi"&gt;self&lt;/span&gt;, &lt;span class="pl-smi"&gt;other&lt;/span&gt;: &lt;span class="pl-c1"&gt;self&lt;/span&gt; &lt;span class="pl-k"&gt;&amp;gt;=&lt;/span&gt; other &lt;span class="pl-k"&gt;and&lt;/span&gt; &lt;span class="pl-k"&gt;not&lt;/span&gt; &lt;span class="pl-c1"&gt;self&lt;/span&gt; &lt;span class="pl-k"&gt;==&lt;/span&gt; other),
                    (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;__lt__&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-k"&gt;lambda&lt;/span&gt; &lt;span class="pl-smi"&gt;self&lt;/span&gt;, &lt;span class="pl-smi"&gt;other&lt;/span&gt;: &lt;span class="pl-k"&gt;not&lt;/span&gt; &lt;span class="pl-c1"&gt;self&lt;/span&gt; &lt;span class="pl-k"&gt;&amp;gt;=&lt;/span&gt; other)]
        }
        &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Find user-defined comparisons (not those inherited from object).&lt;/span&gt;
        roots &lt;span class="pl-k"&gt;=&lt;/span&gt; [op &lt;span class="pl-k"&gt;for&lt;/span&gt; op &lt;span class="pl-k"&gt;in&lt;/span&gt; convert &lt;span class="pl-k"&gt;if&lt;/span&gt; &lt;span class="pl-c1"&gt;getattr&lt;/span&gt;(&lt;span class="pl-c1"&gt;cls&lt;/span&gt;, op, &lt;span class="pl-c1"&gt;None&lt;/span&gt;) &lt;span class="pl-k"&gt;is&lt;/span&gt; &lt;span class="pl-k"&gt;not&lt;/span&gt; &lt;span class="pl-c1"&gt;getattr&lt;/span&gt;(&lt;span class="pl-c1"&gt;object&lt;/span&gt;, op, &lt;span class="pl-c1"&gt;None&lt;/span&gt;)]
        &lt;span class="pl-k"&gt;if&lt;/span&gt; &lt;span class="pl-k"&gt;not&lt;/span&gt; roots:
            &lt;span class="pl-k"&gt;raise&lt;/span&gt; &lt;span class="pl-c1"&gt;ValueError&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;must define at least one ordering operation: &amp;lt; &amp;gt; &amp;lt;= &amp;gt;=&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;)
        root &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;max&lt;/span&gt;(roots)       &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; prefer __lt__ to __le__ to __gt__ to __ge__&lt;/span&gt;
        &lt;span class="pl-k"&gt;for&lt;/span&gt; opname, opfunc &lt;span class="pl-k"&gt;in&lt;/span&gt; convert[root]:
            &lt;span class="pl-k"&gt;if&lt;/span&gt; opname &lt;span class="pl-k"&gt;not&lt;/span&gt; &lt;span class="pl-k"&gt;in&lt;/span&gt; roots:
                opfunc.&lt;span class="pl-c1"&gt;__name__&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; opname
                opfunc.&lt;span class="pl-c1"&gt;__doc__&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;getattr&lt;/span&gt;(&lt;span class="pl-c1"&gt;int&lt;/span&gt;, opname).&lt;span class="pl-c1"&gt;__doc__&lt;/span&gt;
                &lt;span class="pl-c1"&gt;setattr&lt;/span&gt;(&lt;span class="pl-c1"&gt;cls&lt;/span&gt;, opname, opfunc)
        &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-c1"&gt;cls&lt;/span&gt;&lt;/pre&gt;
   &lt;/div&gt;
   &lt;br/&gt;
   &lt;p&gt;
    This code is pretty simple. It defines 3 other operators based on 2 operators:
    &lt;code&gt;
     __eq__
    &lt;/code&gt;
    and one of the four functions
    &lt;code&gt;
     __lt__
    &lt;/code&gt;
    ,
    &lt;code&gt;
     __le__
    &lt;/code&gt;
    ,
    &lt;code&gt;
     __gt__
    &lt;/code&gt;
    ,
    &lt;code&gt;
     __ge__
    &lt;/code&gt;
    .
   &lt;/p&gt;
   &lt;h2&gt;
    &lt;a aria-hidden="true" class="anchor" href="#useful-decorators" id="user-content-useful-decorators"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Useful decorators
   &lt;/h2&gt;
   &lt;ul&gt;
    &lt;li&gt;
     property - used to quickly create a field from appropriate getter, setter and deleter.
    &lt;/li&gt;
   &lt;/ul&gt;
   &lt;h1&gt;
    &lt;a aria-hidden="true" class="anchor" href="#references" id="user-content-references"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    REFERENCES
   &lt;/h1&gt;
   &lt;ul&gt;
    &lt;li&gt;
     &lt;a href="https://wiki.python.org/moin/PythonDecoratorLibrary" title="Python Decorator Library"&gt;
      Python Decorator Library
     &lt;/a&gt;
    &lt;/li&gt;
   &lt;/ul&gt;
  &lt;/article&gt;
 &lt;/div&gt;
&lt;/div&gt;

            &lt;div class="git-meta"&gt;
                
                &lt;span&gt;Brought to you by me &lt;a href="https://github.com/minhhh/pelican_git"&gt;pelican_git&lt;/a&gt;.&lt;/span&gt;
                
                &lt;span style="float: right; color: #369;"&gt;&lt;a href="https://github.com/minhhh/wiki/blob/master/py_decorators.md"&gt;view original&lt;/a&gt;&lt;/span&gt;
                &lt;span style="float: right; margin-right: 8px;"&gt;
                    &lt;a style="color: rgb(102, 102, 102);" href="https://github.com/minhhh/wiki/blob/master/py_decorators.md"&gt;py_decorators.md&lt;/a&gt;&lt;/span&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;&lt;/p&gt;</summary><category term="python"></category><category term="decorator"></category></entry><entry><title>How to rebase in Git</title><link href="http://minhhh.github.io/posts/how-to-rebase-in-git" rel="alternate"></link><published>2014-09-09T00:00:00-04:00</published><updated>2014-09-09T00:00:00-04:00</updated><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2014-09-09:posts/how-to-rebase-in-git</id><summary type="html">&lt;p&gt;&lt;div&gt;
    &lt;style type = "text/css" scoped&gt;
.git-content div {
    padding: 0;
    margin: 0;
}

.git-content .git-file {
    border: 1px solid #DEDEDE;
    margin-bottom: 1em;
}

.git-content .git-file .git-meta {
    background-color: #EAEAEA;
    color: #666666;
    font-size: 85%;
    overflow: hidden;
    padding: 0.5em;
}

.git-content .git-file .git-meta a {
    color: #336699;
}

.git-content .git-file .git-meta a:visited {
    color: #773377;
}

.git-content .git-file {
    background-color: #F8F8FF;
    border-bottom: 1px solid #DDDDDD;
    font-size: 100%;
    overflow: auto;
    word-wrap: normal;
}

.git-content .git-file pre {
    background: none repeat scroll 0 0 transparent !important;
    border: medium none !important;
    margin: 0 !important;
    padding: 0 !important;
}
    &lt;/style&gt;
    &lt;div class="git-content"&gt;
        &lt;div class="git-file"&gt;
            &lt;div class="file"&gt;
 &lt;div class="readme blob instapaper_body" id="readme"&gt;
  &lt;article class="markdown-body entry-content" itemprop="text"&gt;
   &lt;h1&gt;
    &lt;a aria-hidden="true" class="anchor" href="#rebase-feature-branch-into-develop-branch" id="user-content-rebase-feature-branch-into-develop-branch"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Rebase feature branch into develop branch
   &lt;/h1&gt;
   &lt;p&gt;
    If you follow
    &lt;a href="http://nvie.com/posts/a-successful-git-branching-model/"&gt;
     A successful Git branching model
    &lt;/a&gt;
    , you will have to merge feature branches into develop from time to time. To make a beautiful linear tree in the develop branch, you would rebase instead of just merging. The following guide will outline the rebase process from beginning to end.
   &lt;/p&gt;
   &lt;h2&gt;
    &lt;a aria-hidden="true" class="anchor" href="#rebasing-one-branch-into-develop" id="user-content-rebasing-one-branch-into-develop"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Rebasing one branch into develop
   &lt;/h2&gt;
   &lt;p&gt;
    Suppose your feature branch is
    &lt;code&gt;
     feature/add_css
    &lt;/code&gt;
   &lt;/p&gt;
   &lt;pre&gt;&lt;code&gt;    # This will merge the latest develop to feature/css
    git checkout develop
    git pull
    git checkout feature/add_css
    git pull
    git merge develop
    git push

    # Create a temporary rebase branch
    git checkout develop
    git checkout -b temp

    # Merge feature branch and resolve a lot of conflicts
    git merge feature/add_css

    # Perform the rebase, you may have to resolve the conflict again
    git rebase develop

    # NOTE: Do not use git checkout (--theirs|â€“ours) path/to/file
    # as it will cause trouble when you resolved a bad conflict then
    # the subsequent merge may not be correct.

    # This will merge the rebased item to develop.
    git checkout develop
    git merge feature/something_rebase

    # (Important) Checks that there are no difference. This should resolve in no difference in the ideal case
    git diff develop..feature/something

    # (Important) Checks that the logs have been correctly integrated.
    git log --graph

    # Push once all checks have been completed.
    git push

    # Delete the temporary merge branch
    git branch -D temp
&lt;/code&gt;&lt;/pre&gt;
   &lt;br/&gt;
   &lt;h2&gt;
    &lt;a aria-hidden="true" class="anchor" href="#rebasing-multiple-branches-into-develop" id="user-content-rebasing-multiple-branches-into-develop"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Rebasing multiple branches into develop
   &lt;/h2&gt;
   &lt;p&gt;
    The correct way to do this is to rebase each branch one by one, but the next one will have to rebase based on the result of the last rebase. Suppose you're going to merge these 2 branches:
    &lt;code&gt;
     feature/add_css
    &lt;/code&gt;
    and
    &lt;code&gt;
     feature/add_html
    &lt;/code&gt;
   &lt;/p&gt;
   &lt;pre&gt;&lt;code&gt;    # This will merge the latest develop to feature/css
    git checkout develop
    git pull
    git checkout feature/add_css
    git pull
    git merge develop
    git push

    # Create a temporary rebase branch
    git checkout develop
    git checkout -b main_rebase

    # Merge feature branch and resolve a lot of conflicts
    git merge feature/add_css

    # Perform the rebase, you may have to resolve the conflict again
    git rebase main_rebase

    # Push this branch to remote so we can rebase other branch based on it
    git push

    # Now checkout another temporary branch
    git checkout -b temp

    # Merge feature branch and resolve a lot of conflicts
    git merge feature/add_css

    # (IMPORTANT) Perform the rebase based on the main rebase branch
    git rebase main_rebase

    # Merge the rebase items into main rebase branch
    git checkout main_rebase
    git merge temp

    # (IMPORTANT) Checks that the logs have been correctly integrated.
    git log --graph

    # (IMPORTANT) Push main rebase branch to remote
    git push

    # Delete the temporary merge branch
    git branch -D temp
&lt;/code&gt;&lt;/pre&gt;
   &lt;br/&gt;
   &lt;p&gt;
    Then repeat this process with the next branches one by one.
   &lt;/p&gt;
  &lt;/article&gt;
 &lt;/div&gt;
&lt;/div&gt;

            &lt;div class="git-meta"&gt;
                
                &lt;span&gt;Brought to you by me &lt;a href="https://github.com/minhhh/pelican_git"&gt;pelican_git&lt;/a&gt;.&lt;/span&gt;
                
                &lt;span style="float: right; color: #369;"&gt;&lt;a href="https://github.com/minhhh/git-manual/blob/master/git_rebase.md"&gt;view original&lt;/a&gt;&lt;/span&gt;
                &lt;span style="float: right; margin-right: 8px;"&gt;
                    &lt;a style="color: rgb(102, 102, 102);" href="https://github.com/minhhh/git-manual/blob/master/git_rebase.md"&gt;git_rebase.md&lt;/a&gt;&lt;/span&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;&lt;/p&gt;</summary><category term="git"></category><category term="rebase"></category></entry><entry><title>Git cheat sheet</title><link href="http://minhhh.github.io/posts/git-cheat-sheet" rel="alternate"></link><published>2014-09-05T00:00:00-04:00</published><updated>2014-09-05T00:00:00-04:00</updated><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2014-09-05:posts/git-cheat-sheet</id><summary type="html">&lt;p&gt;&lt;div&gt;
    &lt;style type = "text/css" scoped&gt;
.git-content div {
    padding: 0;
    margin: 0;
}

.git-content .git-file {
    border: 1px solid #DEDEDE;
    margin-bottom: 1em;
}

.git-content .git-file .git-meta {
    background-color: #EAEAEA;
    color: #666666;
    font-size: 85%;
    overflow: hidden;
    padding: 0.5em;
}

.git-content .git-file .git-meta a {
    color: #336699;
}

.git-content .git-file .git-meta a:visited {
    color: #773377;
}

.git-content .git-file {
    background-color: #F8F8FF;
    border-bottom: 1px solid #DDDDDD;
    font-size: 100%;
    overflow: auto;
    word-wrap: normal;
}

.git-content .git-file pre {
    background: none repeat scroll 0 0 transparent !important;
    border: medium none !important;
    margin: 0 !important;
    padding: 0 !important;
}
    &lt;/style&gt;
    &lt;div class="git-content"&gt;
        &lt;div class="git-file"&gt;
            &lt;div class="file"&gt;
 &lt;div class="readme blob instapaper_body" id="readme"&gt;
  &lt;article class="markdown-body entry-content" itemprop="text"&gt;
   &lt;h1&gt;
    &lt;a aria-hidden="true" class="anchor" href="#git-manual" id="user-content-git-manual"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Git Manual
   &lt;/h1&gt;
   &lt;p&gt;
    Git manual and related topics such as branching process.
   &lt;/p&gt;
   &lt;h2&gt;
    &lt;a aria-hidden="true" class="anchor" href="#toc" id="user-content-toc"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    &lt;a id="user-content-toc"&gt;
     TOC
    &lt;/a&gt;
   &lt;/h2&gt;
   &lt;a id="user-content-toc"&gt;
   &lt;/a&gt;
   &lt;ul&gt;
    &lt;a id="user-content-toc"&gt;
    &lt;/a&gt;
    &lt;li&gt;
     &lt;a id="user-content-toc"&gt;
     &lt;/a&gt;
     &lt;a href="#user-content-installation"&gt;
      Installation
     &lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
     &lt;a href="#user-content-basics"&gt;
      Basics
     &lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
     &lt;a href="#user-content-info"&gt;
      Info
     &lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
     &lt;a href="#user-content-exports"&gt;
      Exports
     &lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
     &lt;a href="#user-content-branching"&gt;
      Branching
     &lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
     &lt;a href="#user-content-undoing"&gt;
      Undoing
     &lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
     &lt;a href="#user-content-remotes"&gt;
      Remotes
     &lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
     &lt;a href="#user-content-submodules"&gt;
      Submodules
     &lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
     &lt;a href="#user-content-additional-resources"&gt;
      Additional resources
     &lt;/a&gt;
    &lt;/li&gt;
   &lt;/ul&gt;
   &lt;h3&gt;
    &lt;a aria-hidden="true" class="anchor" href="#installation" id="user-content-installation"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    &lt;a id="user-content-installation"&gt;
    &lt;/a&gt;
    Installation
   &lt;/h3&gt;
   &lt;ul&gt;
    &lt;li&gt;
     &lt;a href="http://git-scm.com/book"&gt;
      Pro Git
     &lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
     &lt;a href="http://serverfault.com/questions/194567/how-to-i-tell-git-for-windows-where-to-find-my-private-rsa-key"&gt;
      Set tortoisegit with SSH private key
     &lt;/a&gt;
    &lt;/li&gt;
   &lt;/ul&gt;
   &lt;h3&gt;
    &lt;a aria-hidden="true" class="anchor" href="#branching-model" id="user-content-branching-model"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Branching model
   &lt;/h3&gt;
   &lt;ul&gt;
    &lt;li&gt;
     &lt;a href="http://nvie.com/posts/a-successful-git-branching-model/"&gt;
      Successful git branching model
     &lt;/a&gt;
    &lt;/li&gt;
   &lt;/ul&gt;
   &lt;pre&gt;&lt;code&gt;    origin/feature/update_layout
    origin/hotfix/r20130305-1.1
    origin/master
    origin/develop
&lt;/code&gt;&lt;/pre&gt;
   &lt;br/&gt;
   &lt;h3&gt;
    &lt;a aria-hidden="true" class="anchor" href="#basics" id="user-content-basics"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    &lt;a id="user-content-basics"&gt;
    &lt;/a&gt;
    Basics
   &lt;/h3&gt;
   &lt;ul&gt;
    &lt;li&gt;
     &lt;a href="http://niklasschlimm.blogspot.com/2011/07/top-10-git-commands-for-newbie.html%7C"&gt;
      10 commands
     &lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
     &lt;a href="http://git.or.cz/course/svn.html"&gt;
      Git SVN crash course
     &lt;/a&gt;
    &lt;/li&gt;
   &lt;/ul&gt;
   &lt;pre&gt;&lt;code&gt;    # pull rebase create nicer merge tree, but be careful with it
    git stash # stash any change
    git pull --rebase
    git stash pop # stash pop any change

    git fetch -p # Bring the repository up to date without executing merge on the current branch

    git add -u # add modified files but not new files
    git add -A # add all untracked files

    # Diff with remote
    git diff master origin/master
&lt;/code&gt;&lt;/pre&gt;
   &lt;br/&gt;
   &lt;h4&gt;
    &lt;a aria-hidden="true" class="anchor" href="#tagging" id="user-content-tagging"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Tagging
   &lt;/h4&gt;
   &lt;pre&gt;&lt;code&gt;    git tag -a &amp;lt;tagname&amp;gt; -m "Tag message"
    
    # delete tag on remote
    git tag --delete &amp;lt;tagname&amp;gt;
    git push origin :&amp;lt;tagname&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
   &lt;br/&gt;
   &lt;h3&gt;
    &lt;a aria-hidden="true" class="anchor" href="#info" id="user-content-info"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    &lt;a id="user-content-info"&gt;
    &lt;/a&gt;
    Info
   &lt;/h3&gt;
   &lt;h4&gt;
    &lt;a aria-hidden="true" class="anchor" href="#find-commits-where-files-were-deleted" id="user-content-find-commits-where-files-were-deleted"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Find commits where files were deleted
   &lt;/h4&gt;
   &lt;pre&gt;&lt;code&gt;    git log --diff-filter=D --summary --stat
&lt;/code&gt;&lt;/pre&gt;
   &lt;br/&gt;
   &lt;h4&gt;
    &lt;a aria-hidden="true" class="anchor" href="#checkout-deleted-file-in-the-working-tree" id="user-content-checkout-deleted-file-in-the-working-tree"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Checkout deleted file in the working tree
   &lt;/h4&gt;
   &lt;pre&gt;&lt;code&gt;    git checkout &amp;lt;sha1&amp;gt;^ &amp;lt;file&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
   &lt;br/&gt;
   &lt;h4&gt;
    &lt;a aria-hidden="true" class="anchor" href="#search-for-a-file-in-project-commit-history" id="user-content-search-for-a-file-in-project-commit-history"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Search for a file in project commit history
   &lt;/h4&gt;
   &lt;pre&gt;&lt;code&gt;    git log --all --full-history -- **/&amp;lt;filename&amp;gt;.*
&lt;/code&gt;&lt;/pre&gt;
   &lt;br/&gt;
   &lt;h4&gt;
    &lt;a aria-hidden="true" class="anchor" href="#only-show-the-content-of-a-file-from-a-specific-revision" id="user-content-only-show-the-content-of-a-file-from-a-specific-revision"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Only show the content of a file from a specific revision
   &lt;/h4&gt;
   &lt;pre&gt;&lt;code&gt;    git show &amp;lt;sha1&amp;gt;:&amp;lt;file&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
   &lt;br/&gt;
   &lt;h4&gt;
    &lt;a aria-hidden="true" class="anchor" href="#diff-2-files-at-specific-revisions-or-branches" id="user-content-diff-2-files-at-specific-revisions-or-branches"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Diff 2 files at specific revisions or branches
   &lt;/h4&gt;
   &lt;pre&gt;&lt;code&gt;    git diff &amp;lt;revision_1&amp;gt;..&amp;lt;revision_2&amp;gt; -- &amp;lt;file&amp;gt;
    git diff &amp;lt;branch_1&amp;gt; &amp;lt;branch_2&amp;gt; -- &amp;lt;file&amp;gt;
    git diff &amp;lt;branch_2&amp;gt; -- &amp;lt;file&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
   &lt;br/&gt;
   &lt;h4&gt;
    &lt;a aria-hidden="true" class="anchor" href="#show-changes-on-a-branch-that-is-not-merged-upstream" id="user-content-show-changes-on-a-branch-that-is-not-merged-upstream"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Show changes on a branch that is not merged upstream
   &lt;/h4&gt;
   &lt;pre&gt;&lt;code&gt;    git cherry &amp;lt;upstream_branch&amp;gt; &amp;lt;new_branch&amp;gt;
    git log &amp;lt;upstream_branch&amp;gt;..&amp;lt;new_branch&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
   &lt;br/&gt;
   &lt;h4&gt;
    &lt;a aria-hidden="true" class="anchor" href="#show-log-with-changed-files" id="user-content-show-log-with-changed-files"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Show log with changed files
   &lt;/h4&gt;
   &lt;pre&gt;&lt;code&gt;    git log --name-only
    git log --name-status
    git log --stat
    git log --decorate --graph --oneline --date-order # better visual
&lt;/code&gt;&lt;/pre&gt;
   &lt;br/&gt;
   &lt;h4&gt;
    &lt;a aria-hidden="true" class="anchor" href="#get-latest-tag-in-the-current-branch" id="user-content-get-latest-tag-in-the-current-branch"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Get latest tag in the current branch
   &lt;/h4&gt;
   &lt;pre&gt;&lt;code&gt;    git describe --exact-match --abbrev=0
    git describe --abbrev=0 --tags
&lt;/code&gt;&lt;/pre&gt;
   &lt;br/&gt;
   &lt;h4&gt;
    &lt;a aria-hidden="true" class="anchor" href="#get-tag-with-messages" id="user-content-get-tag-with-messages"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Get tag with messages
   &lt;/h4&gt;
   &lt;pre&gt;&lt;code&gt;    git tag -l -n9
&lt;/code&gt;&lt;/pre&gt;
   &lt;br/&gt;
   &lt;h4&gt;
    &lt;a aria-hidden="true" class="anchor" href="#show-log-graph" id="user-content-show-log-graph"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Show log graph
   &lt;/h4&gt;
   &lt;pre&gt;&lt;code&gt;    git log origin master # Show log of a specific branch on remote
    git log origin master --graph --decorate # to show colorful text and graph and the branch name of each log.

    # A beautiful version
    git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&amp;lt;%an&amp;gt;%Creset' --abbrev-commit

    # Show git log then exit
    git log | cat -

    # Show log of a particular hash
    git show &amp;lt;hash&amp;gt;
    git show &amp;lt;hash&amp;gt; --stat # show only oneline for each change
&lt;/code&gt;&lt;/pre&gt;
   &lt;br/&gt;
   &lt;h4&gt;
    &lt;a aria-hidden="true" class="anchor" href="#get-current-url" id="user-content-get-current-url"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Get current URL
   &lt;/h4&gt;
   &lt;pre&gt;&lt;code&gt;    git remote show origin
&lt;/code&gt;&lt;/pre&gt;
   &lt;br/&gt;
   &lt;h4&gt;
    &lt;a aria-hidden="true" class="anchor" href="#get-brief-info-about-branches" id="user-content-get-brief-info-about-branches"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Get brief info about branches
   &lt;/h4&gt;
   &lt;pre&gt;&lt;code&gt;    git branch -lvv
&lt;/code&gt;&lt;/pre&gt;
   &lt;br/&gt;
   &lt;h4&gt;
    &lt;a aria-hidden="true" class="anchor" href="#finding-what-branch-a-commit-came-from" id="user-content-finding-what-branch-a-commit-came-from"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Finding what branch a commit came from
   &lt;/h4&gt;
   &lt;pre&gt;&lt;code&gt;    git branch --contains &amp;lt;commit&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
   &lt;br/&gt;
   &lt;h4&gt;
    &lt;a aria-hidden="true" class="anchor" href="#finding-who-committed-which-line" id="user-content-finding-who-committed-which-line"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Finding who committed which line
   &lt;/h4&gt;
   &lt;pre&gt;&lt;code&gt;    git blame &amp;lt;file&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
   &lt;br/&gt;
   &lt;h4&gt;
    &lt;a aria-hidden="true" class="anchor" href="#applying-a-range-of-commits" id="user-content-applying-a-range-of-commits"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Applying a range of commits
   &lt;/h4&gt;
   &lt;pre&gt;&lt;code&gt;    # A should be older than B, this DOES NOT include A
    git cherry-pick A..B

    # Include A
    git cherry-pick A^..B
&lt;/code&gt;&lt;/pre&gt;
   &lt;br/&gt;
   &lt;h3&gt;
    &lt;a aria-hidden="true" class="anchor" href="#exports" id="user-content-exports"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    &lt;a id="user-content-exports"&gt;
    &lt;/a&gt;
    Exports
   &lt;/h3&gt;
   &lt;pre&gt;&lt;code&gt;    # From a repository
    git checkout-index -a -f --prefix=/destination/path/

    # Export remote
    git archive --format=tar --remote=ssh://remote_server/remote_repository master | tar -xf -
&lt;/code&gt;&lt;/pre&gt;
   &lt;br/&gt;
   &lt;p&gt;
    &lt;a href="#user-content-toc"&gt;
     TOC
    &lt;/a&gt;
   &lt;/p&gt;
   &lt;h3&gt;
    &lt;a aria-hidden="true" class="anchor" href="#branching" id="user-content-branching"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    &lt;a id="user-content-branching"&gt;
    &lt;/a&gt;
    Branching
   &lt;/h3&gt;
   &lt;h4&gt;
    &lt;a aria-hidden="true" class="anchor" href="#branch-and-create-new-branch" id="user-content-branch-and-create-new-branch"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Branch and Create new branch
   &lt;/h4&gt;
   &lt;pre&gt;&lt;code&gt;    git checkout -b experimental
&lt;/code&gt;&lt;/pre&gt;
   &lt;br/&gt;
   &lt;h4&gt;
    &lt;a aria-hidden="true" class="anchor" href="#delete-unused-branch" id="user-content-delete-unused-branch"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Delete unused branch
   &lt;/h4&gt;
   &lt;pre&gt;&lt;code&gt;    git branch -d experimental
    git push origin --delete newfeature
&lt;/code&gt;&lt;/pre&gt;
   &lt;br/&gt;
   &lt;h4&gt;
    &lt;a aria-hidden="true" class="anchor" href="#rename-a-local-branch" id="user-content-rename-a-local-branch"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Rename a local branch
   &lt;/h4&gt;
   &lt;pre&gt;&lt;code&gt;    git branch -m &amp;lt;oldname&amp;gt; &amp;lt;newname&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
   &lt;br/&gt;
   &lt;p&gt;
    &lt;a href="#user-content-toc"&gt;
     TOC
    &lt;/a&gt;
   &lt;/p&gt;
   &lt;h3&gt;
    &lt;a aria-hidden="true" class="anchor" href="#undoing" id="user-content-undoing"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    &lt;a id="user-content-undoing"&gt;
    &lt;/a&gt;
    Undoing
   &lt;/h3&gt;
   &lt;h4&gt;
    &lt;a aria-hidden="true" class="anchor" href="#undo-a-merge-or-pull" id="user-content-undo-a-merge-or-pull"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Undo a merge or pull
   &lt;/h4&gt;
   &lt;p&gt;
    Check out
    &lt;a href="http://www.kernel.org/pub/software/scm/git/docs/git-reset.html"&gt;
     git reset
    &lt;/a&gt;
    for great explanation and
    &lt;a href="http://www.kernel.org/pub/software/scm/git/docs/git-reset.html#_examples"&gt;
     examples
    &lt;/a&gt;
    .
   &lt;/p&gt;
   &lt;pre&gt;&lt;code&gt;    git reset --hard
&lt;/code&gt;&lt;/pre&gt;
   &lt;br/&gt;
   &lt;h4&gt;
    &lt;a aria-hidden="true" class="anchor" href="#undo-a-merge-or-pull-inside-a-dirty-work-tree" id="user-content-undo-a-merge-or-pull-inside-a-dirty-work-tree"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Undo a merge or pull inside a dirty work tree
   &lt;/h4&gt;
   &lt;p&gt;
    Check out
    &lt;a href="http://www.kernel.org/pub/software/scm/git/docs/git-reset.html"&gt;
     git reset
    &lt;/a&gt;
    for great explanation and
    &lt;a href="http://www.kernel.org/pub/software/scm/git/docs/git-reset.html#_examples"&gt;
     examples
    &lt;/a&gt;
    .
   &lt;/p&gt;
   &lt;pre&gt;&lt;code&gt;    git reset --merge ORIG_HEAD
&lt;/code&gt;&lt;/pre&gt;
   &lt;br/&gt;
   &lt;h4&gt;
    &lt;a aria-hidden="true" class="anchor" href="#revert-a-bad-commit" id="user-content-revert-a-bad-commit"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Revert a bad commit
   &lt;/h4&gt;
   &lt;pre&gt;&lt;code&gt;    git revert &amp;lt;sha1&amp;gt;

    # Revert single file
    git checkout -- filename

    # Revert all files in current folder
    git checkout .

    # Remove all new files or folder
    git clean -df

    # Revert to a commit with a new commit
    git revert --no-commit xxxxxx..HEAD
    git commit -m "revert to xxxxxx"
    git diff HEAD xxxxxx
&lt;/code&gt;&lt;/pre&gt;
   &lt;br/&gt;
   &lt;h4&gt;
    &lt;a aria-hidden="true" class="anchor" href="#checkout-a-deleted-file-into-the-work-tree" id="user-content-checkout-a-deleted-file-into-the-work-tree"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Checkout a deleted file into the work tree
   &lt;/h4&gt;
   &lt;pre&gt;&lt;code&gt;    git checkout &amp;lt;sha1&amp;gt;^ -- &amp;lt;file&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
   &lt;br/&gt;
   &lt;h4&gt;
    &lt;a aria-hidden="true" class="anchor" href="#rewrite-authorcommiter-name-and-email" id="user-content-rewrite-authorcommiter-name-and-email"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Rewrite author/commiter name and email
   &lt;/h4&gt;
   &lt;pre&gt;&lt;code&gt;    git filter-branch --commit-filter '
            if [ "$GIT_COMMITTER_NAME" = "Ha.Minh" ];
            then
                    GIT_COMMITTER_NAME="Ha.Minh";
                    GIT_AUTHOR_NAME="Ha.Minh";
                    GIT_COMMITTER_EMAIL="minhhh@minhhuyha.info";
                    GIT_AUTHOR_EMAIL="minhhh@minhhuyha.info";
                    git commit-tree "$@";
            else
                    git commit-tree "$@";
            fi' HEAD
&lt;/code&gt;&lt;/pre&gt;
   &lt;br/&gt;
   &lt;p&gt;
    &lt;a href="#user-content-toc"&gt;
     TOC
    &lt;/a&gt;
   &lt;/p&gt;
   &lt;h3&gt;
    &lt;a aria-hidden="true" class="anchor" href="#remotes" id="user-content-remotes"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    &lt;a id="user-content-remotes"&gt;
    &lt;/a&gt;
    Remotes
   &lt;/h3&gt;
   &lt;h4&gt;
    &lt;a aria-hidden="true" class="anchor" href="#create-local-branch-then-push-to-the-remote-without-tracking-" id="user-content-create-local-branch-then-push-to-the-remote-without-tracking-"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Create local branch then push to the remote (without tracking !!!)
   &lt;/h4&gt;
   &lt;pre&gt;&lt;code&gt;    git checkout -b &amp;lt;branch_name&amp;gt;
    git push origin &amp;lt;branch_name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
   &lt;br/&gt;
   &lt;h4&gt;
    &lt;a aria-hidden="true" class="anchor" href="#crete-a-new-local-branch-by-pulling-a-remote-branch" id="user-content-crete-a-new-local-branch-by-pulling-a-remote-branch"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Crete a new local branch by pulling a remote branch
   &lt;/h4&gt;
   &lt;pre&gt;&lt;code&gt;    git pull origin &amp;lt;branch_name&amp;gt;                                 # without tracking
    git checkout --track -b &amp;lt;branch_name&amp;gt; origin/&amp;lt;branch_name&amp;gt;    # with tracking
&lt;/code&gt;&lt;/pre&gt;
   &lt;br/&gt;
   &lt;h4&gt;
    &lt;a aria-hidden="true" class="anchor" href="#track-a-remote-branch-with-an-existing-local" id="user-content-track-a-remote-branch-with-an-existing-local"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Track a remote branch with an existing local
   &lt;/h4&gt;
   &lt;pre&gt;&lt;code&gt;    git branch --set-upstream &amp;lt;branch_name&amp;gt; origin/&amp;lt;branch_name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
   &lt;br/&gt;
   &lt;h4&gt;
    &lt;a aria-hidden="true" class="anchor" href="#delete-remote-branch" id="user-content-delete-remote-branch"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Delete remote branch
   &lt;/h4&gt;
   &lt;pre&gt;&lt;code&gt;    git push origin :heads/&amp;lt;branch_name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
   &lt;br/&gt;
   &lt;p&gt;
    or
   &lt;/p&gt;
   &lt;pre&gt;&lt;code&gt;    git push origin :&amp;lt;branch_name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
   &lt;br/&gt;
   &lt;h4&gt;
    &lt;a aria-hidden="true" class="anchor" href="#prune-remote-tracking-branches-that-are-deleted-from-a-remote-repo" id="user-content-prune-remote-tracking-branches-that-are-deleted-from-a-remote-repo"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Prune remote-tracking branches that are deleted from a remote repo
   &lt;/h4&gt;
   &lt;pre&gt;&lt;code&gt;    git remote prune origin
&lt;/code&gt;&lt;/pre&gt;
   &lt;br/&gt;
   &lt;h4&gt;
    &lt;a aria-hidden="true" class="anchor" href="#change-remote-url" id="user-content-change-remote-url"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Change remote URL
   &lt;/h4&gt;
   &lt;pre&gt;&lt;code&gt;    git remote set-url origin http://new-example.com/repo.git
&lt;/code&gt;&lt;/pre&gt;
   &lt;br/&gt;
   &lt;h4&gt;
    &lt;a aria-hidden="true" class="anchor" href="#merge-upstream-from-fork-repo" id="user-content-merge-upstream-from-fork-repo"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Merge upstream from fork repo
   &lt;/h4&gt;
   &lt;pre&gt;&lt;code&gt;    git checkout master
    git pull https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY.git BRANCH_NAME
&lt;/code&gt;&lt;/pre&gt;
   &lt;br/&gt;
   &lt;p&gt;
    &lt;a href="#user-content-toc"&gt;
     TOC
    &lt;/a&gt;
   &lt;/p&gt;
   &lt;h3&gt;
    &lt;a aria-hidden="true" class="anchor" href="#submodules" id="user-content-submodules"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    &lt;a id="user-content-submodules"&gt;
    &lt;/a&gt;
    Submodules
   &lt;/h3&gt;
   &lt;pre&gt;&lt;code&gt;    # Add submodule to subdirectory
    git submodule add &amp;lt;git@github ...&amp;gt; snipmate-snippets/snippets/

    # update submodule
    git submodule update --recursive

    # Update submodules

    git submodule foreach 'git checkout master &amp;amp;&amp;amp; git pull origin master'

    # Update submodule's URL
    # Edit the *.gitmodules* file, then run:
    git submodule sync

    # Delete submodule
    git submodule deinit asubmodule
    git rm asubmodule

    # Note: asubmodule (no trailing slash)
    # or, if you want to leave it in your working tree
    git rm --cached asubmodule

    #Get submodule hash
    git ls-tree a9a796a [submodule_dir]
&lt;/code&gt;&lt;/pre&gt;
   &lt;br/&gt;
   &lt;p&gt;
    &lt;a href="#user-content-toc"&gt;
     TOC
    &lt;/a&gt;
   &lt;/p&gt;
   &lt;h4&gt;
    &lt;a aria-hidden="true" class="anchor" href="#migrate-from-bitbucket-to-github" id="user-content-migrate-from-bitbucket-to-github"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Migrate from bitbucket to github
   &lt;/h4&gt;
   &lt;pre&gt;&lt;code&gt;    cd &amp;lt;path_to_repo&amp;gt;
    git remote rename origin bitbucket
    git remote add origin &amp;lt;new_repo_url&amp;gt; # add the new origin
    git push -u origin --all # pushes up the repo and its refs for the first time
    git push -u origin --tags # pushes up any tags
&lt;/code&gt;&lt;/pre&gt;
   &lt;br/&gt;
   &lt;h4&gt;
    &lt;a aria-hidden="true" class="anchor" href="#rename-github-repo" id="user-content-rename-github-repo"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Rename github repo
   &lt;/h4&gt;
   &lt;p&gt;
    Create a new git repo with the new name
   &lt;/p&gt;
   &lt;pre&gt;&lt;code&gt;    cd &amp;lt;path_to_repo&amp;gt;
    git remote rename origin old
    git remote add origin &amp;lt;new_repo_url&amp;gt;
    git push -u origin --all # pushes up the repo and its refs for the first time
    git push -u origin --tags # pushes up any tags
&lt;/code&gt;&lt;/pre&gt;
   &lt;br/&gt;
   &lt;h3&gt;
    &lt;a aria-hidden="true" class="anchor" href="#additional-resources" id="user-content-additional-resources"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    &lt;a id="user-content-additional-resources"&gt;
    &lt;/a&gt;
    Additional resources
   &lt;/h3&gt;
   &lt;ul&gt;
    &lt;li&gt;
     &lt;p&gt;
      &lt;a href="http://stackoverflow.com/questions/9529497/what-is-origin-in-git"&gt;
       What is origin in GIT
      &lt;/a&gt;
      - By saying
      &lt;code&gt;
       git push origin branchname
      &lt;/code&gt;
      you're saying to push to the origin repository. There's no requirement to name the remote repository origin, and there can be multiple remote repositories.
     &lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
     &lt;p&gt;
      &lt;a href="http://longair.net/blog/2009/04/16/git-fetch-and-merge/"&gt;
       Fetch and Merge
      &lt;/a&gt;
     &lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
     &lt;p&gt;
      &lt;a href="http://stackoverflow.com/questions/5683253/distributed-version-control-systems-and-the-enterprise-a-good-mix/5685757#5685757"&gt;
       Distributed Version Control Systems and the Enterprise
      &lt;/a&gt;
     &lt;/p&gt;
     &lt;ul&gt;
      &lt;li&gt;
       Explain how git fits into the enterprise environment
      &lt;/li&gt;
      &lt;li&gt;
       It seems that the only way to have fine-grained access control in git is to add another layer, such as
       &lt;code&gt;
        gitolite
       &lt;/code&gt;
      &lt;/li&gt;
     &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;
     &lt;p&gt;
      &lt;a href="http://stackoverflow.com/questions/1662205/how-to-make-a-git-repository-read-only"&gt;
       How to make a git repository read-only?
      &lt;/a&gt;
     &lt;/p&gt;
     &lt;ul&gt;
      &lt;li&gt;
       Seems that there's no way to limit read access at folder level.
      &lt;/li&gt;
     &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;
     &lt;p&gt;
      &lt;a href="http://stackoverflow.com/questions/2602546/how-do-i-git-fetch-and-git-merge-from-a-remote-tracking-branch-like-git-pu"&gt;
       Difference between git pull and fetch
      &lt;/a&gt;
     &lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
     &lt;p&gt;
      &lt;a href="http://scottchacon.com/2011/08/31/github-flow.html"&gt;
       Github flow
      &lt;/a&gt;
     &lt;/p&gt;
    &lt;/li&gt;
   &lt;/ul&gt;
   &lt;p&gt;
    &lt;a href="#user-content-toc"&gt;
     TOC
    &lt;/a&gt;
   &lt;/p&gt;
  &lt;/article&gt;
 &lt;/div&gt;
&lt;/div&gt;

            &lt;div class="git-meta"&gt;
                
                &lt;span&gt;Brought to you by me &lt;a href="https://github.com/minhhh/pelican_git"&gt;pelican_git&lt;/a&gt;.&lt;/span&gt;
                
                &lt;span style="float: right; color: #369;"&gt;&lt;a href="https://github.com/minhhh/git-manual/blob/master/README.md"&gt;view original&lt;/a&gt;&lt;/span&gt;
                &lt;span style="float: right; margin-right: 8px;"&gt;
                    &lt;a style="color: rgb(102, 102, 102);" href="https://github.com/minhhh/git-manual/blob/master/README.md"&gt;README.md&lt;/a&gt;&lt;/span&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;&lt;/p&gt;</summary><category term="git"></category></entry></feed>