<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Ha.Minh's Blog</title><link>http://minhhh.github.io/</link><description></description><atom:link href="http://minhhh.github.io/feeds/haminh.rss.xml" rel="self"></atom:link><lastBuildDate>Tue, 09 Sep 2014 00:00:00 -0400</lastBuildDate><item><title>How to rebase in Git</title><link>http://minhhh.github.io/posts/how-to-rebase-in-git</link><description>&lt;div class="gist"&gt;
    &lt;script src='https://gist.github.com/fb5c5cb7a4a18559b25a.js'&gt;&lt;/script&gt;
    &lt;noscript&gt;
        &lt;pre&gt;&lt;code&gt;Rebase feature branch into develop branch&lt;/code&gt;&lt;/pre&gt;
    &lt;/noscript&gt;
&lt;/div&gt;
&lt;p&gt;&amp;lt;script src=&amp;quot;&lt;a class="reference external" href="http://gistit-minhhh.appspot.com/github/robertkrimen/gist-it-example/blob/master/example.js"&gt;http://gistit-minhhh.appspot.com/github/robertkrimen/gist-it-example/blob/master/example.js&lt;/a&gt;&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ha.Minh</dc:creator><pubDate>Tue, 09 Sep 2014 00:00:00 -0400</pubDate><guid>tag:minhhh.github.io,2014-09-09:posts/how-to-rebase-in-git</guid><category>git</category><category>rebase</category></item><item><title>Git cheat sheet</title><link>http://minhhh.github.io/posts/git-cheat-sheet</link><description>&lt;div class="gist"&gt;
    &lt;script src='https://gist.github.com/9908022.js'&gt;&lt;/script&gt;
    &lt;noscript&gt;
        &lt;pre&gt;&lt;code&gt;# Git Cheat Sheet

## &lt;a id="toc"&gt;&lt;/a&gt;TOC
  * [Installation](#installation)
  * [Basics](#basics)
  * [Info](#info)
  * [Exports](#exports)
  * [Branching](#branching)
  * [Undoing](#undoing)
  * [Remotes](#remotes)
  * [Submodules](#submodules)
  * [Additional resources](#additional-resources)

### &lt;a id="installation"&gt;&lt;/a&gt;Installation
  * [Pro Git](http://git-scm.com/book)
  * [Set tortoisegit with SSH private key](http://serverfault.com/questions/194567/how-to-i-tell-git-for-windows-where-to-find-my-private-rsa-key)

### Branching model
[Successful git branching model](http://nvie.com/posts/a-successful-git-branching-model/)

    origin/feature/update_layout
    origin/hotfix/r20130305-1.1
    origin/master
    origin/release/r20130305

### &lt;a id="basics"&gt;&lt;/a&gt;Basics
[10 commands](http://niklasschlimm.blogspot.com/2011/07/top-10-git-commands-for-newbie.html|)

[Git SVN crash course](http://git.or.cz/course/svn.html)

    # pull rebase create nicer merge tree, but be careful with it
    git stash # stash any change
    git pull --rebase
    git stash pop # stash pop any change

    git fetch -p # Bring the repository up to date without executing merge on the current branch

    git add -u # add modified files but not new files
    git add -A # add all untracked files

    # Diff with remote
    git diff master origin/master


### &lt;a id="info"&gt;&lt;/a&gt;Info

#### Find commits where files were deleted

    git log --diff-filter=D --summary

#### Checkout deleted file in the working tree

    git checkout &lt;sha1&gt;^ &lt;file&gt;

#### Only show the content of a file from a specific revision

    git show &lt;sha1&gt;^:&lt;file&gt;

#### Show file's history

    git log -p &lt;file&gt;

#### Show changes on a branch that is not merged upstream

    git cherry &lt;upstream_branch&gt; &lt;new_branch&gt;
    git log &lt;upstream_branch&gt;..&lt;new_branch&gt;

#### Show log with changed files

    git log --name-only
    git log --name-status
    git log --stat
    git log --decorate --graph --oneline --date-order # better visual

#### Get latest tag in the current branch

    git describe --exact-match --abbrev=0
    git describe --abbrev=0 --tags

#### Show log graph
    git log origin master # Show log of a specific branch on remote
    git log origin master --graph --decorate # to show colorful text and graph and the branch name of each log.

    # A beautiful version
    git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset' --abbrev-commit

    # Show git log then exit
    git log | cat -

    # Show log of a particular hash
    git show &lt;hash&gt;
    git show &lt;hash&gt; --stat # show only oneline for each change

#### Get current URL

    git remote show origin

#### Get brief info about branches

    git branch -lvv


### &lt;a id="exports"&gt;&lt;/a&gt;Exports

    # From a repository
    git checkout-index -a -f --prefix=/destination/path/

    # Export remote
    git archive --format=tar --remote=ssh://remote_server/remote_repository master | tar -xf -



[TOC](#toc)

### &lt;a id="branching"&gt;&lt;/a&gt;Branching

    # branch and create new branch
    git checkout -b experimental

    # delete unused branch
    git branch -d experimental

    # also delete on remote
    git push origin --delete newfeature

    # Rename a local branch
    git branch -m &lt;oldname&gt; &lt;newname&gt;

[TOC](#toc)

### &lt;a id="undoing"&gt;&lt;/a&gt;Undoing

#### Undo a merge or pull

Check out [git reset](http://www.kernel.org/pub/software/scm/git/docs/git-reset.html) for great explanation and [examples](http://www.kernel.org/pub/software/scm/git/docs/git-reset.html#_examples).

    git reset --hard

#### Undo a merge or pull inside a dirty work tree

Check out [git reset](http://www.kernel.org/pub/software/scm/git/docs/git-reset.html) for great explanation and [examples](http://www.kernel.org/pub/software/scm/git/docs/git-reset.html#_examples).

    git reset --merge ORIG_HEAD

#### Revert a bad commit

    git revert &lt;sha1&gt;

    # Revert single file
    git checkout -- filename

    # Revert all files in current folder
    git checkout .

    # Remove all new files or folder
    git clean -df


#### Checkout a deleted file into the work tree

    git checkout &lt;sha1&gt;^ -- &lt;file&gt;

[TOC](#toc)


### &lt;a id="remotes"&gt;&lt;/a&gt;Remotes

#### Create local branch then push to the remote (without tracking !!!)

    git checkout -b &lt;branch_name&gt;
    git push origin &lt;branch_name&gt;

#### Crete a new local branch by pulling a remote branch

    git pull origin &lt;branch_name&gt;                                 # without tracking
    git checkout --track -b &lt;branch_name&gt; origin/&lt;branch_name&gt;    # with tracking

#### Track a remote branch with an existing local

    git branch --set-upstream &lt;branch_name&gt; origin/&lt;branch_name&gt;

#### Delete remote branch

    git push origin :heads/&lt;branch_name&gt;

or

    git push origin :&lt;branch_name&gt;

#### Prune remote-tracking branches that are deleted from a remote repo

    git remote prune origin

#### Change remote URL

    git remote set-url origin http://new-example.com/repo.git

[TOC](#toc)


### &lt;a id="submodules"&gt;&lt;/a&gt;Submodules

    # Add submodule to subdirectory
    git submodule add &lt;git@github ...&gt; snipmate-snippets/snippets/

    # update submodule
    git submodule update --recursive

    # Update submodules

    git submodule foreach 'git checkout master &amp;&amp; git pull origin master'

    # Update submodule's URL
    #Edit the *.gitmodules* file, then run:
    git submodule sync

    # Delete submodule
    git submodule deinit asubmodule
    git rm asubmodule

    # Note: asubmodule (no trailing slash)
    # or, if you want to leave it in your working tree
    git rm --cached asubmodule

    #Get submodule hash
    git ls-tree a9a796a [submodule_dir]

[TOC](#toc)

#### Move from bitbucket to github

    cd $HOME/dev/Pipelines
    git remote rename origin bitbucket
    git remote add origin https://github.com/edwardaux/Pipelines.git
    git push -u origin --all # pushes up the repo and its refs for the first time
    git push -u origin --tags # pushes up any tags

### &lt;a id="additional-resources"&gt;&lt;/a&gt;Additional resources

  * [What is origin in GIT](http://stackoverflow.com/questions/9529497/what-is-origin-in-git)

By saying `git push origin branchname` you're saying to push to the origin repository. There's no requirement to name the remote repository origin, and there can be multiple remote repositories.

  * [Fetch and Merge](http://longair.net/blog/2009/04/16/git-fetch-and-merge/)
  * [Distributed Version Control Systems and the Enterprise](http://stackoverflow.com/questions/5683253/distributed-version-control-systems-and-the-enterprise-a-good-mix/5685757#5685757)
    * Explain how git fits into the enterprise environment
    * It seems that the only way to have fine-grained access control in git is to add another layer, such as `gitolite`
  * [How to make a git repository read-only?](http://stackoverflow.com/questions/1662205/how-to-make-a-git-repository-read-only)
    * Seems that there's no way to limit read access at folder level.
  * [Difference between git pull and fetch](http://stackoverflow.com/questions/2602546/how-do-i-git-fetch-and-git-merge-from-a-remote-tracking-branch-like-git-pu)
  * [Github flow](http://scottchacon.com/2011/08/31/github-flow.html)

[TOC](#toc)

&lt;/code&gt;&lt;/pre&gt;
    &lt;/noscript&gt;
&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ha.Minh</dc:creator><pubDate>Fri, 05 Sep 2014 00:00:00 -0400</pubDate><guid>tag:minhhh.github.io,2014-09-05:posts/git-cheat-sheet</guid><category>pelican</category><category>blog</category><category>git</category></item><item><title>Creating this blog</title><link>http://minhhh.github.io/posts/creating-this-blog</link><description>&lt;p&gt;When creating this blog, I used the following references:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="http://ntanjerome.org/blog/how-to-setup-github-user-page-with-pelican"&gt;Setup github page with pelican&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://mathamy.com/migrating-to-github-pages-using-pelican.html"&gt;Migrating to github pages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.macdrifter.com/2012/08/pelican-guide-moving-from-wordpress-and-initial-setup.html"&gt;Pelican Guide initial setup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.macdrifter.com/2012/08/moving-to-pelican-design-planning.html"&gt;Moving to Pelican planning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/streeter/pelican-gist"&gt;pelican-gist&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ha.Minh</dc:creator><pubDate>Sat, 07 Jun 2014 00:00:00 -0400</pubDate><guid>tag:minhhh.github.io,2014-06-07:posts/creating-this-blog</guid><category>pelican</category><category>blog</category><category>github</category></item></channel></rss>