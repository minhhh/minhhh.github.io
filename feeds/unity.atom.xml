<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Ha.Minh's Blog</title><link href="http://minhhh.github.io/" rel="alternate"></link><link href="http://minhhh.github.io/feeds/unity.atom.xml" rel="self"></link><id>http://minhhh.github.io/</id><updated>2017-04-25T00:00:00-04:00</updated><entry><title>Using Unity Assert</title><link href="http://minhhh.github.io/posts/using-unity-assert" rel="alternate"></link><published>2017-04-25T00:00:00-04:00</published><updated>2017-04-25T00:00:00-04:00</updated><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2017-04-25:posts/using-unity-assert</id><summary type="html">&lt;p&gt;Even though Unity's &lt;a href="http://blog.theknightsofunity.com/unity-5-1-assertion-library/"&gt;UnityEngine.Assertions&lt;/a&gt; is great, it has two major disadvantages&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We cannot extend it&lt;/li&gt;
&lt;li&gt;It does not have the concept of error code. Using error code, we can force developers to explicitly think about how they will categorize the error so it's easier to analyze the error when the game crashes&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Therefore I put together a simple script to do assertion here: &lt;a href="https://github.com/minhhh/UBootstrap.Assert"&gt;https://github.com/minhhh/UBootstrap.Assert&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Our &lt;code&gt;CUSTOM_ASSERT&lt;/code&gt; class provides the almost the same interface as &lt;code&gt;UnityEngine.Assertions.Assert&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;IsTrue (bool condition, int errorCode, string message = "", params object[] args)&lt;/code&gt; - Asserts that the condition is true.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IsFalse (bool condition, int errorCode, string message = "", params object[] args)&lt;/code&gt; - Assert that condition is false&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IsNull (object value, int errorCode, string message = "", params object[] args)&lt;/code&gt; - Assert that value is null.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IsNotNull (object value, int errorCode, string message = "", params object[] args)&lt;/code&gt; - Assert that value is not null.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;AreEqual&amp;lt;T&amp;gt; (T expected, T actual, int errorCode, string message = "", params object[] args)&lt;/code&gt; - Assert that the values are equal.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;AreNotEqual&amp;lt;T&amp;gt; (T expected, T actual, int errorCode, string message = "", params object[] args)&lt;/code&gt; - Assert that the values are not equal.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;AreApproximatelyEqual (float expected, float actual, int errorCode, float tolerance, string message = "", params object[] args)&lt;/code&gt; - Asserts that the values are approximately equal. An absolute error check is used for approximate equality check (|a-b| &amp;lt; tolerance). Default tolerance is 0.00001f.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;AreNotApproximatelyEqual (float expected, float actual, int errorCode, float tolerance, string message = "", params object[] args)&lt;/code&gt; - Asserts that the values are approximately not equal. An absolute error check is used for approximate equality check (|a-b| &amp;lt; tolerance). Default tolerance is 0.00001f.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Fail (int errorCode, string message = "", params object[] args)&lt;/code&gt; - Just fail the assertion.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The reason it's named &lt;code&gt;CUSTOM_ASSERT&lt;/code&gt; is to make it look like a macro definition. In fact, you have to define a macro named &lt;code&gt;CUSTOM_ASSERT&lt;/code&gt; to include it in your build, similarly to the macro &lt;code&gt;UNITY_ASSERTIONS&lt;/code&gt; from Unity.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;CUSTOM_ASSERT&lt;/code&gt; class is defined as a partial class. It is expected that you define your part of the partial class, so that you can provide some default error code for common functions. You can find an example in &lt;code&gt;Assets/MY_ASSERT.cs&lt;/code&gt;. It is also recommended that you define your own sets of error codes.&lt;/p&gt;
&lt;p&gt;There is no way to include the assertion without throwing exception, because it does not make sense to assert something that does not crash the build if its not true. Those set of errors belong to a logger, not an assert utility.&lt;/p&gt;</summary><category term="unity"></category><category term="assert"></category></entry><entry><title>Resources for learning Blender</title><link href="http://minhhh.github.io/posts/resources-for-learning-blender" rel="alternate"></link><published>2017-03-21T00:00:00-04:00</published><updated>2017-03-21T00:00:00-04:00</updated><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2017-03-21:posts/resources-for-learning-blender</id><summary type="html">&lt;p&gt;This is collection of resources for learning Blender from the beginning&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://gryllus.net/Blender/3D.html"&gt;Blender 3D Design Course&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=JmVxCDZ6lEM"&gt;Unity Mega-Tutorial: Blender 3D Modelling Tricks, High-Speed Physics, and Real-Time Reflections!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=lY6KPrc4uMw&amp;amp;list=PLda3VoSoc_TR7X7wfblBGiRz-bvhKpGkS"&gt;Blender 2.7 Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/gamedev/comments/43kes4/learning_3d_modelling_as_a_single_indie_developer/"&gt;Learning 3D modelling as a single indie developer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.blenderguru.com/articles/12-useful-blender-addons-everyone-should-use/"&gt;12 (More) Blender Addons Everyone Should Use&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Low poly&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=w38wzDREnKk&amp;amp;index=3&amp;amp;list=PLv1DCiCg2KQLpl6mzDHsWZ70016emDfUu"&gt;Low Poly Planet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=_pK2Ya0CMww"&gt;Learn to Create Geometric Assets in Blender&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=oDWfB9JAZ9s"&gt;GAME ASSET TUTORIAL&lt;/a&gt; In this Video Tutorial series for Beginners, we will create Low Poly Barrel Game Asset using Blender, Photoshop, and Unity.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=JjW6r10Mlqs"&gt;Create any low poly animal | Blender | 10 mins&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="blender"></category></entry><entry><title>Unity Jelly Physics</title><link href="http://minhhh.github.io/posts/unity-jelly-physics" rel="alternate"></link><published>2017-03-14T00:00:00-04:00</published><updated>2017-03-14T00:00:00-04:00</updated><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2017-03-14:posts/unity-jelly-physics</id><summary type="html">&lt;p&gt;There are several plugins to help creating a jelly like physics in Unity:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.assetstore.unity3d.com/en/#!/content/13327"&gt;Jelly Sprites&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.assetstore.unity3d.com/en/#!/content/15685"&gt;Jelly Mesh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.assetstore.unity3d.com/en/#!/content/68777"&gt;2D Soft Body&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/kwanchangnim/Jello-Physics"&gt;Jello Physics&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="unity"></category><category term="jelly"></category></entry><entry><title>Unity Mesh Morphing</title><link href="http://minhhh.github.io/posts/unity-mesh-morphing" rel="alternate"></link><published>2017-03-09T00:00:00-05:00</published><updated>2017-03-09T00:00:00-05:00</updated><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2017-03-09:posts/unity-mesh-morphing</id><summary type="html">&lt;p&gt;There are several ways to do mesh morphing in Unity.&lt;/p&gt;
&lt;p&gt;One way is to use a commercial plugins like &lt;a href="https://www.assetstore.unity3d.com/en/#!/content/3428"&gt;Megafier&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You can use a simple script to do mesh morphing as well: https://github.com/minhhh/unity-meshmorphing. Remember to make all your mesh have the same number of vertices.&lt;/p&gt;</summary><category term="unity"></category><category term="mesh"></category></entry><entry><title>Unity Object Pooling</title><link href="http://minhhh.github.io/posts/unity-object-pooling" rel="alternate"></link><published>2017-02-24T00:00:00-05:00</published><updated>2017-02-24T00:00:00-05:00</updated><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2017-02-24:posts/unity-object-pooling</id><summary type="html">&lt;p&gt;An object pool provides an efficient way to reuse objects, and thus keep the memory foot print of all dynamically created objects within fixed bounds. This is crucial for maintianing consistent framerates in realtime games (especially on mobile), as frequent garbage collection spikes would likley lead to inconsistent performance.&lt;/p&gt;
&lt;p&gt;Implementing object pool is quite straight forward. There are several open-source solutions already so don't bother looking into AssetStore.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/minhhh/unity-leanpool"&gt;Leanpool&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/thefuntastic/unity-object-pool"&gt;Unity Object Pool&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/prime31/RecyclerKit"&gt;RecyclerKit&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="unity"></category><category term="pool"></category></entry><entry><title>Unity Unit testing</title><link href="http://minhhh.github.io/posts/unity-unit-testing" rel="alternate"></link><published>2017-02-21T00:00:00-05:00</published><updated>2017-02-21T00:00:00-05:00</updated><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2017-02-21:posts/unity-unit-testing</id><summary type="html">&lt;p&gt;&lt;a href="https://bitbucket.org/Unity-Technologies/unitytesttools/wiki/IntegrationTestsRunner"&gt;How to use the Integration Test Framework&lt;/a&gt; is the guide from offical repo&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://ilkinulas.github.io/programming/unity/2016/03/12/integration-tests-unity3d.html"&gt;Writing Integration Tests For Unity3D Projects&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Suggests writing dynamic integration test on real game scene. This might be hard to maintain if you don't have discipline.&lt;/li&gt;
&lt;/ul&gt;</summary><category term="unity"></category><category term="unittest"></category></entry><entry><title>Property Backing Field Drawer</title><link href="http://minhhh.github.io/posts/property-backing-field-drawer" rel="alternate"></link><published>2017-02-14T00:00:00-05:00</published><updated>2017-02-14T00:00:00-05:00</updated><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2017-02-14:posts/property-backing-field-drawer</id><summary type="html">&lt;p&gt;Property is not supported by Unity Editor by default, fortunately, there is a free plugin called &lt;a href="https://www.assetstore.unity3d.com/en/#!/content/18253"&gt;Property Backing Field Drawer&lt;/a&gt; that supports drawing custom editor for properties. The plugin's code is extracted &lt;a href="https://github.com/minhhh/property-backing-field-drawer"&gt;here&lt;/a&gt; for easy inclusion in your project.&lt;/p&gt;</summary><category term="unity"></category><category term="property"></category></entry><entry><title>Better Unity workflow with command line</title><link href="http://minhhh.github.io/posts/better-unity-workflow-with-command-line" rel="alternate"></link><published>2017-02-02T00:00:00-05:00</published><updated>2017-02-02T00:00:00-05:00</updated><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2017-02-02:posts/better-unity-workflow-with-command-line</id><summary type="html">&lt;p&gt;To do certain tasks for our game workflow, we will need to use other external tools that can only called from the command line. One way to do this is to switch back and forth between Unity and the command line, obviously this is not the best way. Our goal is to use only 1 click, or one action to execute a series of tasks in Unity and in the command line.&lt;/p&gt;
&lt;p&gt;There are 2 ways to achieve this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create an editor script and call the command line, along with other Editor scripts. This is good if you want to stay in Unity all the time.&lt;/li&gt;
&lt;li&gt;Create a command line script that call other command line scripts and some Unity scripts. This is good for continuous integration.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To launch Unity from the command line, look at these references:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://effectiveunity.com/articles/making-most-of-unitys-command-line.html"&gt;Making most of Unity's command line&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.unity3d.com/Manual/CommandLineArguments.html"&gt;Command line arguments&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To run command line scripts from Unity, look at these references:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://web.archive.org/web/20170202150301/https://effectiveunity.com/articles/making-most-of-unitys-command-line.html"&gt;Running command line action through C# script&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="unity"></category><category term="commandline"></category></entry><entry><title>Using Webp texture format in Unity</title><link href="http://minhhh.github.io/posts/using-webp-texture-format-in-unity" rel="alternate"></link><published>2017-01-18T00:00:00-05:00</published><updated>2017-01-18T00:00:00-05:00</updated><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2017-01-18:posts/using-webp-texture-format-in-unity</id><summary type="html">&lt;p&gt;Webp is a very optimized image format. It will produce smaller image size with almost the same quality as other compression format such as: &lt;code&gt;ETC2&lt;/code&gt;, &lt;code&gt;DXT5&lt;/code&gt;, &lt;code&gt;ETC1&lt;/code&gt;, &lt;code&gt;PVRTC&lt;/code&gt;. Below is some comparison between &lt;code&gt;Webp&lt;/code&gt; and popular compression format in Unity&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;512x512 Image&lt;/th&gt;
&lt;th align="right"&gt;Size in KB&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Original&lt;/td&gt;
&lt;td align="right"&gt;480&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ETC1 4bits&lt;/td&gt;
&lt;td align="right"&gt;128&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ETC2 8bits&lt;/td&gt;
&lt;td align="right"&gt;256&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Dxt5 Crunched&lt;/td&gt;
&lt;td align="right"&gt;64&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PVRTC 2 bit&lt;/td&gt;
&lt;td align="right"&gt;64&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PVRTC 4 bit&lt;/td&gt;
&lt;td align="right"&gt;128&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Webp Lossless&lt;/td&gt;
&lt;td align="right"&gt;287&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Webp Lossy 80&lt;/td&gt;
&lt;td align="right"&gt;23&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;1024x1024 Image&lt;/th&gt;
&lt;th align="right"&gt;Size in KB&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Original&lt;/td&gt;
&lt;td align="right"&gt;1800&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ETC1 4bits&lt;/td&gt;
&lt;td align="right"&gt;512&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ETC2 8bits&lt;/td&gt;
&lt;td align="right"&gt;1000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Dxt5 Crunched&lt;/td&gt;
&lt;td align="right"&gt;183&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PVRTC 2 bit&lt;/td&gt;
&lt;td align="right"&gt;256&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PVRTC 4 bit&lt;/td&gt;
&lt;td align="right"&gt;512&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Webp Lossless&lt;/td&gt;
&lt;td align="right"&gt;1200&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Webp Lossy 80&lt;/td&gt;
&lt;td align="right"&gt;113&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;I've written a simple plugin to include Webp textures into your Unity game here: https://github.com/minhhh/UBootstrap.Webp&lt;/p&gt;
&lt;p&gt;Ref: &lt;a href="https://www.andrewmunsell.com/blog/png-vs-webp/"&gt;png vs webp&lt;/a&gt;&lt;/p&gt;</summary><category term="unity"></category><category term="texture"></category><category term="webp"></category></entry><entry><title>Unity package management</title><link href="http://minhhh.github.io/posts/unity-package-management" rel="alternate"></link><published>2017-01-09T00:00:00-05:00</published><updated>2017-01-09T00:00:00-05:00</updated><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2017-01-09:posts/unity-package-management</id><summary type="html">&lt;p&gt;A robust package management system is quite important when developing in Unity. People have been asking for one in the Unity &lt;a href="https://forum.unity3d.com/threads/any-robust-package-dependency-management-systems-for-unity.276329/"&gt;forum&lt;/a&gt;. The following survey will list some popular options.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/modesttree/Projeny"&gt;Projeny&lt;/a&gt; The purpose of Projeny is to allow your Unity3D project to easily scale in size without heavily impacting development time. Only available in Windows&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Share any Unity assets (code, scenes, prefabs, etc.) across multiple different Unity projects without copy and pasting&lt;/li&gt;
&lt;li&gt;Instantly switch between platforms&lt;/li&gt;
&lt;li&gt;Easily upgrade or downgrade installed asset store packages&lt;/li&gt;
&lt;li&gt;Optimize compile time of your project by getting Unity to only recompile the code that changes most often&lt;/li&gt;
&lt;li&gt;Split up your project into discrete packages, so that you can manage the dependencies between each, instead of having one giant Unity project of inter-related files&lt;/li&gt;
&lt;li&gt;Declare dependencies between packages, so that you always get the packages that you need without needing to hunt down missing libraries or broken links&lt;/li&gt;
&lt;li&gt;Generate a more intelligent Visual Studio solution than the Unity default, using package dependencies to create csproj dependencies&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/shadowmint/unity-package-template/blob/master/docs/npm.md"&gt;NPM can be used to manage packages and their dependencies&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It's very easy to use and install.&lt;/li&gt;
&lt;li&gt;Can be used with private repo&lt;/li&gt;
&lt;li&gt;Cannot distribute &lt;code&gt;.unitypackage&lt;/code&gt; file&lt;/li&gt;
&lt;li&gt;However, without using private registry, it cannot force resolve to the latest versions of all dependencies. This issue can be resolved using &lt;code&gt;yarn install --flat&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;Some people suggests &lt;a href="http://mymobiledevelopment.blogspot.com/2015/03/unity3d-package-manager.html"&gt;using NuGet&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Seems can download packages correctly&lt;/li&gt;
&lt;li&gt;Have to install a central server to make it work&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://wooga.github.io/Paket.Unity3D/"&gt;Paket.Unity3D&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Same problem as nuget&lt;/li&gt;
&lt;li&gt;Seems to work better in Windows&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/Unity-Technologies/kaizen"&gt;Unity Kaizen&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Deliver packages via a central repository and zip&lt;/li&gt;
&lt;li&gt;Require more work from package maintainer&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://bitbucket.org/Zeroto/upm"&gt;UPM&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;UPM is a package manager designed to work with the Unity game engine. It allows rapid install of unity extension and assets using a command line interface. Packages support dependencies, which will be auto-downloaded when installing a package.&lt;/li&gt;
&lt;li&gt;Seems to be unmaintained&lt;/li&gt;
&lt;li&gt;No MacOS binary&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://github.com/appetizermonster/unity-packman"&gt;unity-packman&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A command-line client to manage Unity package&lt;/li&gt;
&lt;li&gt;Does not support version and nested versions&lt;/li&gt;
&lt;li&gt;Can only export 1 directory, which is really limited&lt;/li&gt;
&lt;/ul&gt;</summary><category term="unity"></category></entry><entry><title>Dither Unity textures to save memory</title><link href="http://minhhh.github.io/posts/dither-unity-textures-to-save-memory" rel="alternate"></link><published>2017-01-05T00:00:00-05:00</published><updated>2017-01-05T00:00:00-05:00</updated><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2017-01-05:posts/dither-unity-textures-to-save-memory</id><summary type="html">&lt;p&gt;The project code is here: https://github.com/minhhh/unity-texture-dither&lt;/p&gt;
&lt;p&gt;In many cases, we want to dither textures so that we can use more compact texture import format to save memory. This project aims to provide a workflow for dithering imported texture automatically, based on settings that can be swapped easily. Note that this has nothing to do with using dithering to achieve some artistic goal or the real time dithering effect to solve color banding problem.&lt;/p&gt;
&lt;p&gt;The algorithms are explained in a &lt;a href="http://www.tannerhelland.com/4660/dithering-eleven-algorithms-source-code/"&gt;blog post&lt;/a&gt; by Tanner Helland and the reference implementations are taken from https://github.com/mcraiha/Dithering-Unity3d with some slight modification.&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;To dither images, put them in a folder whose name ended with &lt;code&gt;Dither&lt;/code&gt;. Then click on the folder and &lt;code&gt;Reimport&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The dither setting, i.e. algorithm and output color space is defined in ScriptableObjects &lt;code&gt;DitheringAlgorithmSetting&lt;/code&gt;. You can find them in the &lt;code&gt;Assets&lt;/code&gt; folder. To change dither setting, select &lt;code&gt;Settings &amp;gt; TextureDitherSetting&lt;/code&gt; and change the field &lt;code&gt;Dither Algorithm Setting&lt;/code&gt; accordingly.&lt;/p&gt;
&lt;p&gt;Supported algorithms are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Atkinson&lt;/li&gt;
&lt;li&gt;Burkes&lt;/li&gt;
&lt;li&gt;FloydSteinberg&lt;/li&gt;
&lt;li&gt;JarvisJudiceNinke&lt;/li&gt;
&lt;li&gt;Sierra&lt;/li&gt;
&lt;li&gt;SierraLite&lt;/li&gt;
&lt;li&gt;SierraTwoRow&lt;/li&gt;
&lt;li&gt;Stucki&lt;/li&gt;
&lt;li&gt;No Dithering (for testing purpose)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Supported color spaces are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;RGBA4444&lt;/li&gt;
&lt;li&gt;Websafe&lt;/li&gt;
&lt;li&gt;TrueColor (for testing purpose)&lt;/li&gt;
&lt;/ul&gt;</summary><category term="unity"></category><category term="dither"></category></entry><entry><title>Using Unity Mecanim animation system</title><link href="http://minhhh.github.io/posts/using-unity-mecanim-animation-system" rel="alternate"></link><published>2017-01-02T00:00:00-05:00</published><updated>2017-01-02T00:00:00-05:00</updated><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2017-01-02:posts/using-unity-mecanim-animation-system</id><summary type="html">&lt;p&gt;See &lt;a href="https://github.com/minhhh/unity-mecanim.git"&gt;unity-mecanim&lt;/a&gt; for sample code of this article&lt;/p&gt;
&lt;h2&gt;Mechanim basics&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=wdOk5QXYC6Y"&gt;Unity 5 Tutorial - Animation Control&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=7-OUZecgXv0"&gt;Unity Third Person Control: Mecanim Nodes - Tutorial 5&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://community.mixamo.com/hc/en-us/articles/203879268"&gt;Unity: Mecanim Animation Basics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://docs.unity3d.com/Manual/animeditor-UsingAnimationEditor.html"&gt;Animation Editor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://docs.unity3d.com/Manual/AnimationSoloMute.html"&gt;Solo and mute&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href="http://docs.unity3d.com/Manual/AnimationParameters.html"&gt;animation parameters&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Animation Parameters are variables that are defined within an Animator Controller that can be accessed and assigned values from scripts. This is how a script can control or affect the flow of the state machine.&lt;/li&gt;
&lt;li&gt;Parameters can be assigned values from a script using functions in the Animator class: SetFloat, SetInt, SetBool, SetTrigger and ResetTrigger&lt;/li&gt;
&lt;li&gt;&lt;a href="http://answers.unity3d.com/questions/600268/mecanim-animation-parameter-types-boolean-vs-trigg.html"&gt;Mecanim Animation Parameter Types: Boolean vs. Trigger&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Parameters can also be controlled animation using Curve and read in script&lt;ul&gt;
&lt;li&gt;You cannot control an Animation parameter from both Curve and Script, so you have to structure your code correspondingly.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Root motion, Blend Tree&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=k12w-rEbuXI&amp;amp;index=1&amp;amp;list=PL_eGgISVYZkeD-q83hLtPESTB-lPKnfjH"&gt;RPG Character Controller 001 - Unity 5 Root Motion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Layer, Layer Mask&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Layer Usages (&lt;a href="https://unity3d.com/learn/tutorials/topics/animation/animator-controller-layers"&gt;Animator Controller Layers&lt;/a&gt;)&lt;ul&gt;
&lt;li&gt;Additional layer for handling different body parts while the base layer handles the base movement, such as: wave hand while moving&lt;/li&gt;
&lt;li&gt;Blending mode can be: Override or Additive. Normally &lt;code&gt;Override&lt;/code&gt; will be used because using &lt;code&gt;Additive&lt;/code&gt; can be highly unpredictable unless you're an advanced animator. (&lt;a href="https://community.mixamo.com/hc/en-us/articles/204581427-Unity-Mecanim-Advanced-Animation"&gt;advanced animation&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Blend additional movement based on character state such as: heavy breathing when tired&lt;/li&gt;
&lt;li&gt;Sync layer when you have a set of animation for when the character state changes such as: wounded animations&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Avatar Mask(&lt;a href="https://unity3d.com/learn/tutorials/topics/animation/avatar-masks"&gt;Avatar Masks&lt;/a&gt;)&lt;ul&gt;
&lt;li&gt;Could be set in animation to see the effect of Masking only part of the body&lt;/li&gt;
&lt;li&gt;Normally apply to layer which controls part of the body (&lt;a href="https://community.mixamo.com/hc/en-us/articles/204581427-Unity-Mecanim-Advanced-Animation"&gt;advanced animation&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Equip weapon&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Equip immediately without animation&lt;ul&gt;
&lt;li&gt;For models created in Unity&lt;ul&gt;
&lt;li&gt;Create weapon holder node&lt;/li&gt;
&lt;li&gt;Attach the weapons to it&lt;/li&gt;
&lt;li&gt;Hide/Unhide the correct weapon when switching weapon&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;For models created outside Unity&lt;ul&gt;
&lt;li&gt;Find the correct node in the model OR create a weapon holder node like before&lt;/li&gt;
&lt;li&gt;Attach the weapons to it&lt;/li&gt;
&lt;li&gt;Hide/Unhide the correct weapon when switching weapon&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Equip with equip/unequip animations. All weapons are treated the same when equipped (&lt;a href="https://www.youtube.com/watch?v=7gsl43thTsk"&gt;Sword equipping&lt;/a&gt;)&lt;ul&gt;
&lt;li&gt;Create equip/unequip animation for each weapons&lt;/li&gt;
&lt;li&gt;Using layer/layer mask to blend the equip/unequip animations, masking only the necessary parts of the body, such as the arm movement&lt;/li&gt;
&lt;li&gt;Using Animation Event to set value to flags such as: sword_equipped, sword_unequipped&lt;/li&gt;
&lt;li&gt;Attach the corresponding weapon using Animation Event calling functions and/or flags&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Weapons affect whole animation when equiped (&lt;a href="https://www.youtube.com/watch?v=Is9C4i4XyXk"&gt;Applied Mecanim : Character Animation and Combat State Machines&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Using mechanim as state machine&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://forum.unity3d.com/threads/mecanim-as-generic-state-machine.311201/"&gt;Mecanim as generic state machine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pekalicious.com/blog/unity3d-reusing-animator-controllers-with-animatoroverridecontroller/"&gt;Reusing animator controllers with AnimatorOverrideController&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=Is9C4i4XyXk"&gt;Applied Mecanim : Character Animation and Combat State Machines&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;A character with&lt;ul&gt;
&lt;li&gt;8 weapon types&lt;ul&gt;
&lt;li&gt;9-12 ground attacks&lt;/li&gt;
&lt;li&gt;5 aerial attacks&lt;/li&gt;
&lt;li&gt;3 defensive maneuvers&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;4 throwable items&lt;/li&gt;
&lt;li&gt;6 classes of magic each with 3-6 abilities&lt;/li&gt;
&lt;li&gt;Basic locomotion, jump, hit react, death&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;One way is to use SubStateMachine, with several depth layers&lt;/li&gt;
&lt;li&gt;An alternative organization is to use BaseLayer with Overrides Layer and Additive Layer&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=HOURak6BpSo"&gt;Leveraging Unity 5.2's Advanced Animation Features&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;You can manage all transitions between attacks manually&lt;/li&gt;
&lt;li&gt;Or you can use a blend tree. This is slightly better. One problem is if you change the Blend parameter while playing animation, it will change the animation immediately.&lt;/li&gt;
&lt;li&gt;Solution in Unity 5: StateMachineBehaviour on a State. This way you can have code that run at the Start or End of your blendtree.&lt;/li&gt;
&lt;li&gt;You could also have StateMachineBehaviour on a StateMachine. Then you can override &lt;code&gt;OnStateMachineEnter&lt;/code&gt; and &lt;code&gt;OnStateMachineExit&lt;/code&gt; functions&lt;/li&gt;
&lt;li&gt;When the SubStateMachine is a sequence of animations, you can have code on &lt;code&gt;OnStateMachineEnter&lt;/code&gt; to equip weapon&lt;/li&gt;
&lt;li&gt;Can also check for Input in &lt;code&gt;StateMachineBehaviour&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Best Practices&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://answers.unity3d.com/questions/806949/animation-events-not-firing.html"&gt;Animation events not firing&lt;/a&gt; when the event is near the endframe, so either use a third party event dispatcher, or use &lt;code&gt;StateMachineBehaviour&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;When importing animations, make sure to &lt;code&gt;Bake into pose&lt;/code&gt; the part where you don't want to move by Root motion. Also use &lt;code&gt;Offset&lt;/code&gt; to fix Average velocity not zero problems, e.g. walking animation that has a X speed&lt;/li&gt;
&lt;li&gt;Change the animation speed of specific layer&lt;ul&gt;
&lt;li&gt;There's no way to change the animation speed of specific layer. The current best way is to Use blend tree to control the speed of a particular layer based on parameter. See &lt;a href="http://forum.unity3d.com/threads/mecanim-change-animation-speed-of-specific-animation-or-layers.160395/"&gt;Mecanim - Change animation speed of specific animation or layers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;You can also change the speed of particular state in Editor and via script&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Use int parameter instead of boolean or trigger. This way you can use AnyState to transition using condition such as &lt;code&gt;skill=1&lt;/code&gt;, then when entering the mecanim state we set it to another number immediately &lt;a href="https://www.youtube.com/watch?v=Is9C4i4XyXk"&gt;Applied Mecanim : Character Animation and Combat State Machines&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Use substate to simplify your state machine. However, becareful when constructing AnyState transition to deeper substate, since AnyState is global. In this way, we can ignore the immediate substate and only care about the final subtate. We use the most specific condition, such as &lt;code&gt;skill=1 and subskill=2&lt;/code&gt; to trigger the final substate from AnyState. This way we don't have to configure transition to immediate substate and only care about the final state&lt;/li&gt;
&lt;li&gt;Use SMB: &lt;a href="https://www.youtube.com/watch?v=Is9C4i4XyXk"&gt;Applied Mecanim : Character Animation and Combat State Machines&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://answers.unity3d.com/questions/685968/running-an-animation-completely-before-transitioni.html"&gt;Running an animation completely before transitioning back&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Make sure Exit time is 1.00, with FixedDuration unchecked.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;How to Run the death animation then destroy GameObject&lt;ul&gt;
&lt;li&gt;Use a timer. This is quite a robust solution but maybe not visually correct in some cases, i.e. the animation might be stopped too soon.&lt;/li&gt;
&lt;li&gt;Use animation event. Add an Exit event to the animation at the last frame. This is not very robust, since Unity might skip Animation event&lt;/li&gt;
&lt;li&gt;Use auto transition to a fake after death state. Then use StateMachineBehaviour to detect when we exit the Death state. This is also a robust solution, but requires you to modify the structure of the Animator.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;How to transition out of a substate machine (&lt;a href="https://www.youtube.com/watch?v=lpekqN4_4xg"&gt;Using substate machine&lt;/a&gt;)&lt;ul&gt;
&lt;li&gt;Using Up node: Transition to state or StateMachine&lt;/li&gt;
&lt;li&gt;Using Entry/Exit nodes: Transition to/from StateMachine. This facilitates better reusability&lt;/li&gt;
&lt;li&gt;Try to only use one way&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="unity"></category><category term="mecanim"></category></entry><entry><title>Finite state machine for Unity</title><link href="http://minhhh.github.io/posts/finite-state-machine-for-unity" rel="alternate"></link><published>2016-12-28T00:00:00-05:00</published><updated>2016-12-28T00:00:00-05:00</updated><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2016-12-28:posts/finite-state-machine-for-unity</id><summary type="html">&lt;p&gt;Finite State Machine (FSM) is an important technique in game programming. Most games that have some sort of battle will have to design an FSM for its entities. FSM can be applied in UI as well. For example, instead of using flags to enable/disable certain UI elements, we can use a full FSM for all possible states of the targetted UI and its interactions with user inputs.&lt;/p&gt;
&lt;p&gt;The main elements of a FSM include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A representation of a state&lt;/li&gt;
&lt;li&gt;A representation of a transition between 2 state&lt;/li&gt;
&lt;li&gt;A central system that hosts the states and facilitates their transitions&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://unity3d.com/learn/tutorials/topics/scripting/using-interfaces-make-state-machine-ai"&gt;Using Interfaces to Make a State Machine for AI&lt;/a&gt; has a simplest implementation of FSM. A state is represented like this:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public interface IEnemyState
{
    void UpdateState();
    void OnTriggerEnter (Collider other);
    void ToPatrolState();
    void ToAlertState();
    void ToChaseState();
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This implementation hardcodes all state transitions in the interface, thus it's a bad example and should not be used in a serious game.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.voidinspace.com/2013/05/a-simple-finite-state-machine-with-c-delegates-in-unity/"&gt;A simple finite state machine with C# delegates in Unity&lt;/a&gt; provides a slightly better implementation. Instead of hardcoding, it calls a single delegate function when making a transition. Still, it does not separate actions to be executed upon entering and exiting states, so it's not very useful for serious purpose.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://wiki.unity3d.com/index.php?title=Finite_State_Machine"&gt;Finite State Machine&lt;/a&gt; by Unity Wiki does provide overridable functions to be executed when entering and exiting states. However, we also need to perform actions in &lt;code&gt;Update&lt;/code&gt;, &lt;code&gt;FixedUpdate&lt;/code&gt; and similar functions for entities that have time-based changes such as a player, enemies, NPC and so on. So this implementation is not sufficient.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/thefuntastic/Unity3d-Finite-State-Machine"&gt;Unity3D Finite State Machine&lt;/a&gt; satisfies functionality requirements. It provides on enter/exit functions as well as &lt;code&gt;Update&lt;/code&gt;, &lt;code&gt;FixedUpdate&lt;/code&gt;, &lt;code&gt;LateUpdate&lt;/code&gt;. It does not use separate &lt;code&gt;State&lt;/code&gt; class, instead, it uses reflection to call the correct function in the main Component for each state. Therefore, all functions of all states must be defined in the main Component, for instance, &lt;code&gt;Play_Enter&lt;/code&gt;, &lt;code&gt;Play_Exit&lt;/code&gt;, &lt;code&gt;Init_Enter&lt;/code&gt;, &lt;code&gt;Init_Exit&lt;/code&gt;, &lt;code&gt;Move_Enter&lt;/code&gt;, &lt;code&gt;Move_Exit&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;My own implementation of &lt;a href="https://github.com/minhhh/unity-fsm"&gt;Finite State Machine&lt;/a&gt; is similar to the above method, except that I don't want to use generics, since it will make it harder to refer to the &lt;code&gt;FSM&lt;/code&gt; using code.&lt;/p&gt;
&lt;p&gt;Another way to implement FSM is to make each state a separate MonoBehaviour. In this way, you can separate the functions for each state in its own file. In addition, you can examine the states in the Editor easily, like other MonoBehaviour. One issue which needs to be solved is how to access the members of the main Component. So you have to pass in the main Component to the state via constructor and make the members public. An alternative way is to write generic singletons which can be accessed from anywhere.&lt;/p&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/thefuntastic/Unity3d-Finite-State-Machine"&gt;Unity3D Finite State Machine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://wiki.unity3d.com/index.php?title=Finite_State_Machine"&gt;Finite State Machine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.voidinspace.com/2013/05/a-simple-finite-state-machine-with-c-delegates-in-unity/"&gt;A simple finite state machine with C# delegates in Unity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://unity3d.com/learn/tutorials/topics/scripting/using-interfaces-make-state-machine-ai"&gt;Using Interfaces to Make a State Machine for AI&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="unity"></category><category term="fsm"></category></entry><entry><title>Understanding Unity Editor Extensions</title><link href="http://minhhh.github.io/posts/understanding-unity-editor-extensions" rel="alternate"></link><published>2016-12-22T00:00:00-05:00</published><updated>2016-12-22T00:00:00-05:00</updated><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2016-12-22:posts/understanding-unity-editor-extensions</id><summary type="html">&lt;p&gt;Unity Editor offers many ways for extending its functionality to suit your project's specific needs and workflow. Have a look at &lt;a href="https://github.com/minhhh/unity-editorextension-manual"&gt;unity-editorextension-manual&lt;/a&gt; for a complete list of ways you can extend the Unity Editor.&lt;/p&gt;</summary><category term="unity"></category><category term="editor"></category></entry><entry><title>Understanding Unity ScriptableObject</title><link href="http://minhhh.github.io/posts/understanding-unity-scriptableobject" rel="alternate"></link><published>2016-12-15T00:00:00-05:00</published><updated>2016-12-15T00:00:00-05:00</updated><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2016-12-15:posts/understanding-unity-scriptableobject</id><summary type="html">&lt;p&gt;In the &lt;a href="https://unity3d.com/learn/tutorials/modules/beginner/live-training-archive/scriptable-objects"&gt;Introduction to Scriptable Objects&lt;/a&gt; tutorial, they claim that &lt;code&gt;Scriptable Objects are amazing data containers&lt;/code&gt;. However, it's not clear how useful Scriptable Objects really is, and what problems they're trying to solve. In this article we will look at all usecases of Scriptable Objects, what issues they're trying to solve, what the original solutions are, and what the pros and cons of each approach are.&lt;/p&gt;
&lt;h2&gt;Overall&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;What is a Scriptable Object&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Data Container&lt;/li&gt;
&lt;li&gt;Can NOT be attached to GameObject/Prefab&lt;/li&gt;
&lt;li&gt;Can be serialized and inspected like MonoBehaviour&lt;/li&gt;
&lt;li&gt;Can be put into .asset file&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pros&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Built into Unity&lt;/li&gt;
&lt;li&gt;Can be saved as assets&lt;/li&gt;
&lt;li&gt;Can save during runtime&lt;/li&gt;
&lt;li&gt;Can be referenced instead of copied like MonoBehaviour&lt;/li&gt;
&lt;li&gt;Internal solution (no files/parsing). Performance is quite fast.&lt;/li&gt;
&lt;li&gt;Add to structure as you go. No need to go through a large file/multiple files to replace schema.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cons&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Requires Editor Scripting&lt;/li&gt;
&lt;li&gt;Can't edit outside Unity&lt;/li&gt;
&lt;li&gt;Can't save once deployed&lt;/li&gt;
&lt;li&gt;Cannot optimize loading speed since this is Unity code&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Use case 1: Global Game Settings&lt;/h2&gt;
&lt;p&gt;Every game has global settings for various aspects such as: Sounds, Video, Game play. There are some options to store these settings:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Scattered throughout the code, or maybe centralized into one source file.&lt;ol&gt;
&lt;li&gt;Pros: Easy to code&lt;/li&gt;
&lt;li&gt;Cons: Designers cannot find these settings easily. Change cannot persist if you quit &lt;code&gt;Play&lt;/code&gt; mode&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Stored in config files: text/binary.&lt;ol&gt;
&lt;li&gt;Pros: Easy to code. Designers can look at them if they're text files.&lt;/li&gt;
&lt;li&gt;Cons: Cannot change settings while playing. Might be hard for designers to understand and change the settings files since there's no validation method.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Stored in Prefabs&lt;ol&gt;
&lt;li&gt;Pros: Prefab can be stored as assets&lt;/li&gt;
&lt;li&gt;Cons: It might be too heavy for pure data purpose. Duplicate memory if you create instance.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;ScriptableObject can be used to store global settings in &lt;code&gt;.asset&lt;/code&gt; files.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pros&lt;ol&gt;
&lt;li&gt;Easy to find them in Unity&lt;/li&gt;
&lt;li&gt;Easy to change and test&lt;/li&gt;
&lt;li&gt;Can change while playing. Changes persist after quitting play mode&lt;/li&gt;
&lt;li&gt;Can have custom editor so it's easy to note the meaning of each field&lt;/li&gt;
&lt;li&gt;Can be validated using custom editor code.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Implementation&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create a base class for all the global game Settings. It will have a static property &lt;code&gt;Instance&lt;/code&gt;, which provides a way to create a singleton instance in a fixed location. This location will be customized on a project basis.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public class Setting&amp;lt;T&amp;gt; : ScriptableObject where T : Setting&amp;lt;T&amp;gt;
{
...
}
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;Create subclass the &lt;code&gt;Setting&lt;/code&gt; class. Provide a MenuItem for accessing it.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[MenuItem (&amp;quot;Settings/TextureSetting&amp;quot;)]&lt;/span&gt;
&lt;span class="err"&gt;public&lt;/span&gt; &lt;span class="err"&gt;static&lt;/span&gt; &lt;span class="err"&gt;void&lt;/span&gt; &lt;span class="err"&gt;Edit&lt;/span&gt; &lt;span class="err"&gt;()&lt;/span&gt;
&lt;span class="err"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;Selection.activeObject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;Instance;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Use case 2: Swappable Global Game Settings or Scene Settings&lt;/h2&gt;
&lt;p&gt;Sometimes we don't want to have to change some global settings back and forth between a set of parameters since it's very time-consuming. So we might want to store several pre-defined settings and swap between them quickly.&lt;/p&gt;
&lt;p&gt;Another case is scene settings. These settings only affect the scene, not the whole game, and they usually change between scene reload, for instance, game mode settings: Easy, Medium, Difficult.&lt;/p&gt;
&lt;p&gt;ScriptableObject can deal with this situation:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;To be able to swap setting, create a wrapper setting which references the specific setting&lt;/li&gt;
&lt;li&gt;To swap scene setting, simply load the specific setting in &lt;code&gt;Assets&lt;/code&gt; then assign it to specific field in a &lt;code&gt;MonoBehaviour&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Implementation&lt;/strong&gt;
&lt;em&gt; Create multiple settings
&lt;/em&gt; Define a field in &lt;code&gt;MonoBehaviour&lt;/code&gt; or parent ScriptableObject, referring to the settings ScriptableObject&lt;/p&gt;
&lt;h2&gt;Use case 3: Scriptable Objects as MasterData or Item Database&lt;/h2&gt;
&lt;p&gt;For any sufficiently large game, the game data will be so big that you have to separate them from the code, and they will be referred to as &lt;code&gt;MasterData&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Popular solutions for storing &lt;code&gt;MasterData&lt;/code&gt; include:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Text/Binary files. E.g &lt;a href="https://www.youtube.com/watch?v=nYWlB7HRNSE"&gt;Unity XML Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Database&lt;/li&gt;
&lt;li&gt;Network&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Cons&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;One common disadvantage with these approach is you will need an external viewer to be able to see and modify &lt;code&gt;masterdata&lt;/code&gt; conveniently.&lt;/li&gt;
&lt;li&gt;You will have to replicate the schema in code&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;ScriptableObject can offer a way to create and edit &lt;code&gt;masterdata&lt;/code&gt; inside Unity Editor.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ScriptableObject Pros&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Can have references to Resources&lt;/li&gt;
&lt;li&gt;View, Add, Delete and Edit entities/items conveniently in Unity Editor&lt;/li&gt;
&lt;li&gt;Use ScriptableObject directly in &lt;code&gt;MonoBehaviour&lt;/code&gt; instead of having to create an additional layer of MonoBehaviour&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Implementation&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://unity3d.com/learn/tutorials/modules/beginner/live-training-archive/scriptable-objects"&gt;Introduction to Scriptable Objects&lt;/a&gt; shows how you use Scriptable Object to create and edit Inventory Lists.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=ItZbTYO0Mnw"&gt;Saving Data in Unity: ScriptableObjects&lt;/a&gt; shows how you can create multiple &lt;code&gt;Enemy&lt;/code&gt; ScriptableObject and use them in the &lt;code&gt;EnemyMove&lt;/code&gt; MonoBehaviour.&lt;/p&gt;
&lt;h2&gt;Use case 4: Scriptable Objects as Dynamic Behaviour&lt;/h2&gt;
&lt;p&gt;Another usecase of ScriptableObject is using them as game behaviour which has data that can be modified by designer. They have some instance functions, like &lt;code&gt;MonoBehaviour&lt;/code&gt;, but unlike &lt;code&gt;MonoBehaviour&lt;/code&gt; which cannot be saved independently without prefabs, ScriptableObject can be saved as if they're just pure data. Game programmers can change the code of the behaviour without affecting game designers.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Implementation&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;These ScriptableObjects are similar to the ones in Usecase 3, but they have functions which can act arbitrarily on &lt;code&gt;GameObject&lt;/code&gt;, &lt;code&gt;MonoBehaviour&lt;/code&gt; and so on.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://unity3d.com/learn/tutorials/topics/scripting/ability-system-scriptable-objects?playlist=17117"&gt;Ability System with Scriptable Objects&lt;/a&gt; shows how you implement an Ability System, where &lt;code&gt;Ability&lt;/code&gt; is ScriptableObject with its own behaviour functions.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;Ability&lt;/code&gt; class contains data and abstracts methods which act on &lt;code&gt;GameObject&lt;/code&gt; based on those data.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public abstract class Ability : ScriptableObject
{
    public string aName = &amp;quot;New Ability&amp;quot;;
    public Sprite aSprite;
    public AudioClip aSound;
    public float aBaseCoolDown = 1f;

    public abstract void Initialize (GameObject obj);
    public abstract void TriggerAbility ();
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;ProjectileAbility&lt;/code&gt; is a concrete &lt;code&gt;Ability&lt;/code&gt; subclass, which modifies the target &lt;code&gt;GameObject&lt;/code&gt; as needed and trigger the projectile action.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;using UnityEngine;
using System.Collections;

[CreateAssetMenu (menuName = &amp;quot;Abilities/ProjectileAbility&amp;quot;)]
public class ProjectileAbility : Ability
{
    public float projectileForce = 500f;
    public Rigidbody projectile;

    private ProjectileShootTriggerable launcher;

    public override void Initialize (GameObject obj)
    {
        launcher = obj.GetComponent&amp;lt;ProjectileShootTriggerable&amp;gt; ();
        launcher.projectileForce = projectileForce;
        launcher.projectile = projectile;
    }

    public override void TriggerAbility ()
    {
        launcher.Launch ();
    }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href="https://bitbucket.org/richardfine/scriptableobjectdemo"&gt;ScriptableObjectDemo&lt;/a&gt; is a more comprehensive demo.&lt;/p&gt;
&lt;h2&gt;Other notes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;MasterData can include global settings, constants and any kind of game data. This really depends on the developers/designers to choose.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ScriptableObjects can help you to load some specific items in an Item Database quickly, if the items are stored as individual assets. Refactoring multiple ScriptableObject assets into a collection is simple.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Other Methods to store data&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;From source code&lt;ol&gt;
&lt;li&gt;A lot of code for storing data&lt;/li&gt;
&lt;li&gt;Large binary size&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;From GameObject&lt;ol&gt;
&lt;li&gt;We can store data in &lt;code&gt;Component&lt;/code&gt; inside Prefabs, or in Scene.&lt;/li&gt;
&lt;li&gt;This way is mostly heavier than ScriptableObject&lt;/li&gt;
&lt;li&gt;However, you can pack multiple &lt;code&gt;Component&lt;/code&gt; arbitrarily so it might be helpful.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;From XML, JSON, CSV, Excel&lt;ol&gt;
&lt;li&gt;Cannot have resources reference&lt;/li&gt;
&lt;li&gt;Might be good to have a workflow to convert into ScriptableObject&lt;/li&gt;
&lt;li&gt;To update data in saved data, text/binary are more suitable than ScriptableObject, which cannot be saved once deployed.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;PlayerPrefs&lt;ol&gt;
&lt;li&gt;Can be used to save data&lt;/li&gt;
&lt;li&gt;Not suitable for very large amount of data&lt;/li&gt;
&lt;li&gt;Cannot control the save process easily&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;From embedded DB&lt;ol&gt;
&lt;li&gt;Cannot have resources reference&lt;/li&gt;
&lt;li&gt;Might be good to have a workflow to convert into ScriptableObject&lt;/li&gt;
&lt;li&gt;To update data in saved data, database is very convenient. But we must care about performance.&lt;/li&gt;
&lt;li&gt;We must be aware of encryption capabilities of the DB.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;From Network&lt;ol&gt;
&lt;li&gt;Cannot have resources reference&lt;/li&gt;
&lt;li&gt;Usually used in combination with a text/binary persisted in local storage&lt;/li&gt;
&lt;li&gt;To update data via Network with ScriptableObject, AssetBundle is needed. So the general-purpose text/binary format might be better.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://medium.com/@mormo_music/game-settings-with-scriptable-objects-in-unity3d-6f753fe508fd#.tb9ahxiej"&gt;Game Settings with Scriptable Objects in Unity3D&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://unity3d.com/learn/tutorials/modules/beginner/live-training-archive/scriptable-objects"&gt;Introduction to Scriptable Objects&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://unity3d.com/learn/tutorials/topics/scripting/ability-system-scriptable-objects?playlist=17117"&gt;Ability System with Scriptable Objects&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=ItZbTYO0Mnw"&gt;Saving Data in Unity: ScriptableObjects&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=VBA1QCoEAX4"&gt;Overthrowing the MonoBehaviour tyranny in a glorious ScriptableObject revolution&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://tsubakit1.hateblo.jp/entry/2014/07/24/030607"&gt;Scriptable Object&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://bitbucket.org/richardfine/scriptableobjectdemo"&gt;ScriptableObjectDemo&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://ivanozanchetta.com/gamedev/unity3d/unity-serialization-behind-scriptableobject/"&gt;Unity Serialization… behind the mistery of ScriptableObject&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="unity"></category><category term="scriptableobject"></category></entry><entry><title>Unity Texture compression and optimization</title><link href="http://minhhh.github.io/posts/unity-texture-compression-and-optimization" rel="alternate"></link><published>2016-12-03T00:01:00-05:00</published><updated>2016-12-03T00:01:00-05:00</updated><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2016-12-03:posts/unity-texture-compression-and-optimization</id><summary type="html">&lt;p&gt;A common question when building Unity games is which texture compression format will be the best. The criteria are: size on disk, memory footprint, performance.&lt;/p&gt;
&lt;p&gt;We have many options in the Unity Engine: ETC1, ETC2, DXT3, DXT5, and so on. How do we choose? Let's look at some optimization tricks to see how others choose their formats.&lt;/p&gt;
&lt;p&gt;First you need to understand &lt;a href="http://gamedev.stackexchange.com/questions/5171/how-much-memory-does-a-texture-take-up-on-the-gpu"&gt;How much memory does a texture take up on the GPU?&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;many modern engines opt to store the same format on disk as they do in memory, leading to files that are the same size as the texture's memory requirements&lt;/li&gt;
&lt;li&gt;Uncompresed image of 256x256 is 256KB. A DXT1 image of 256x256 is 32KB. And DXT3 or DXT5 is 64KB&lt;/li&gt;
&lt;li&gt;&lt;a href="http://mainroach.blogspot.com/2014/03/the-png-vs-gpu-battle-on-android.html"&gt;http://mainroach.blogspot.com/2014/03/the-png-vs-gpu-battle-on-android.html&lt;/a&gt; also explains why you don't want to use plain &lt;code&gt;png&lt;/code&gt; textures. Instead, export them to &lt;code&gt;DXT1&lt;/code&gt;, &lt;code&gt;PVR&lt;/code&gt; or &lt;code&gt;ETC&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://web.archive.org/web/20160826092252/http://android-developers.blogspot.com/2015/01/efficient-game-textures-with-hardware.html"&gt;Efficient Game Textures with Hardware Compression&lt;/a&gt; examines preferable compression formats which are supported on the GPU to help you reduce .apk size and loading times of your game:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;As you can see, with higher OpenGL support you gain access to better formats. There are proprietary formats to replace ETC1, delivering higher quality and alpha channel support. These are shown in the following table:&lt;ul&gt;
&lt;li&gt;ATC   Available with Adreno GPU.&lt;/li&gt;
&lt;li&gt;PVRTC Available with a PowerVR GPU.&lt;/li&gt;
&lt;li&gt;DXT1  S3 DXT1 texture compression. Supported on devices running Nvidia Tegra platform.&lt;/li&gt;
&lt;li&gt;S3TC  S3 texture compression, nonspecific to DXT variant. Supported on devices running Nvidia Tegra platform.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Using hardware accelerated textures in your games will help you reduce the size of your .apk, runtime memory use as well as loading times.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://web.archive.org/web/20160507141202/http://biobeasts.artix.com/unity-2d-texture-optimization/"&gt;Unity 2D Texture Optimization&lt;/a&gt; explains how they group textures by type instead of logical groups to save memory:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2048x2048 sprite sheet above, even with compression applied, took up 4mb in Texture2D memory&lt;/li&gt;
&lt;li&gt;assets fail to render and appear like black shapes&lt;/li&gt;
&lt;li&gt;organize sprite sheets into three compression types: Solids, Fades, and Alpha Punchouts.&lt;/li&gt;
&lt;li&gt;Solids are any rectangular assets with NO alpha. Here we can get a major savings by selecting a 4-bit compression that doesn't support alpha.&lt;/li&gt;
&lt;li&gt;Alpha Punchouts are any other shapes that use binary alpha, meaning the area of the image is either 100% or 0% alpha. Here we select a 5-bit compression&lt;/li&gt;
&lt;li&gt;Fades are reserved for our most complex objects that contain variable degrees of alpha. We use these sparingly and compress them using a minimum of 8-bit RGBA to look best.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://web.archive.org/web/20160513225925/http://forum.unity3d.com/threads/etc1-vs-etc2-texture-compression.219842/"&gt;ETC1 vs ETC2 vs DXT5&lt;/a&gt; discuss which is the best texture format&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ETC2 only for devices supporting ES 3.0&lt;/li&gt;
&lt;li&gt;But if your targeting all devices... which u should consider doing in 2015, then it doesnt matter if you pick ETC2 or DXT5 Crunched because theyre both getting decompressed. Which makes sense for ARGB. And then for RGB just ETC1&lt;/li&gt;
&lt;li&gt;Most devices support ETC1 &lt;a href="http://developer.android.com/guide/topics/graphics/opengl.html#textures"&gt;http://developer.android.com/guide/topics/graphics/opengl.html#textures&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;I was able to remove 25% of my file size this weekend, thanks to switching to ETC1 + DXT5 Crunched&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://web.archive.org/web/20150610061237/https://software.intel.com/en-us/articles/android-texture-compression-a-comparison-study-with-code-sample"&gt;Android Texture Compression - a comparison study with code sample&lt;/a&gt; compares the quality and sizes of different formats on Android devices including: &lt;code&gt;png, etc, etc2, pvrtc and s3tc&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://web.archive.org/web/20160513225136/http://forum.unity3d.com/threads/etc2-as-default-texture-compression-on-android.348582/"&gt;ETC2 as default texture compression on Android&lt;/a&gt; discuss usage of ETC2 format&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We use DXT5 on our sprites to save space on apk file. When the device does not support your texture type, Unity uses software decompression on load and your textures become 32bit RGBA.&lt;/li&gt;
&lt;li&gt;Use ETC2 to save memory. It might be bad for some low-spec device if they don't support ETC2. Also one more reason to pack your own sheets instead of using Unity packer, since you can do dithering yourself&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Some texture optimization recommendations&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Don't use mipmap for 2D &lt;a href="https://web.archive.org/web/20160422114629/http://forum.unity3d.com/threads/is-it-possible-to-turn-on-mip-maps-for-a-sprite.219054/"&gt;Is it possible to turn on Mip Maps for a sprite&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Compress your textures to DXT1 or DXT5 &lt;a href="https://web.archive.org/web/20160428065248/http://forum.unity3d.com/threads/tips-and-tricks-make-sure-to-profile-your-phone-apps-memory-usage.202952/"&gt;Memory optimization tricks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://web.archive.org/web/20160520084556/http://forum.unity3d.com/threads/what-resolution-should-i-be-painting-sprites-in.225845/"&gt;What Resolution should I be painting sprites in?&lt;/a&gt; 2048x2048 seems a bit big already on mobile device&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://support.unity3d.com/hc/en-us/articles/207051116-How-can-I-add-Alpha-to-ETC1-Compression-"&gt;How Can I Add Alpha To ETC1 Compression?&lt;/a&gt; attempts to answer the question about ETC1 + Alpha channel&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sprites placed on some atlas by specifying them with a packing tag&lt;/li&gt;
&lt;li&gt;Make sure to mark the Override for Android checkbox as well as the Compress using ETC1 checkbox. Unity will split the resulting atlas into two textures, each without Alpha and then combine them in the final parts of the RenderPipeline.&lt;/li&gt;
&lt;li&gt;The UI shaders in Unity 5.3.0 and earlier do not support ETC1 + Alpha&lt;/li&gt;
&lt;li&gt;Yes. The UI elements do not work well with ETC1. We have a bug on it. (http://forum.unity3d.com/threads/etc1-alpha-feature.350184/)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://web.archive.org/web/20160726041743/http://developers.mobage.jp/blog/texture-compression"&gt;Unity mobile Splitalpha&lt;/a&gt;. This blogs has solved the issue with ETC1 + Alpha and provided a solution for both Android and iOS devices.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ETC1 with Alpha channel splitalpha&lt;ul&gt;
&lt;li&gt;Split Alpha texture&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;                        合計サイズ (MiB) RGBA       16bit 比のサイズ削減率 (%)
RGBA 16bit              879                         0
RGBA PVRTC 4bit         229                         74
RGBA ETC2 8bit          431                         51
Split Alpha (Android)   249                         72
Split Alpha (iOS)       272                         69
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;https://github.com/keijiro/unity-alphamask&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In conclusion, use ETC + Alpha channel whenever you can because it provides the best build size and memory footprint in most cases, at reasonable quality.&lt;/p&gt;</summary><category term="unity"></category><category term="texture"></category><category term="splitalpha"></category><category term="optimization"></category></entry><entry><title>Unity geometry distortion on child object</title><link href="http://minhhh.github.io/posts/unity-geometry-distortion-on-child-object" rel="alternate"></link><published>2016-12-03T00:00:00-05:00</published><updated>2016-12-03T00:00:00-05:00</updated><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2016-12-03:posts/unity-geometry-distortion-on-child-object</id><summary type="html">&lt;p&gt;In Unity there is a geometry issue with the child object of non-uniformly scaled parent. When the parent object does not have (1,1,1) scale, then the child object will be skewed weirdly when they rotate. This issue has been mentioned in the below references:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;http://answers.unity3d.com/questions/197739/object-skewing-on-rotation.html&lt;/li&gt;
&lt;li&gt;http://answers.unity3d.com/questions/21645/geometry-distortion-on-child-objects.html&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The solution is to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Make the parent uniform, OR&lt;/li&gt;
&lt;li&gt;Child the objects to another uniformly scaled parent&lt;/li&gt;
&lt;/ol&gt;</summary><category term="unity"></category></entry><entry><title>Scale Shuriken Particle System</title><link href="http://minhhh.github.io/posts/scale-shuriken-particle-system" rel="alternate"></link><published>2016-11-29T00:00:00-05:00</published><updated>2016-11-29T00:00:00-05:00</updated><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2016-11-29:posts/scale-shuriken-particle-system</id><summary type="html">&lt;p&gt;Unity does not provide a way to scale Shuriken particle system in Editor. The process to scale each particle system manually is very inconvenient.&lt;/p&gt;
&lt;p&gt;There are some plugins on the Asset Store which can help you with this tasks:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.assetstore.unity3d.com/en/#!/content/9703"&gt;Simple Particle Scaler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.assetstore.unity3d.com/en/#!/content/4400"&gt;Particle Scaler&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I've also written a tool to scale Shuriken Particles in the Editor: &lt;a href="https://github.com/minhhh/unity-particle-scaler"&gt;unity-particle-scaler&lt;/a&gt;. It's very convenient and simple to use.&lt;/p&gt;</summary><category term="unity"></category><category term="particlesystem"></category></entry><entry><title>Unity Asset Bundle</title><link href="http://minhhh.github.io/posts/unity-asset-bundle" rel="alternate"></link><published>2016-11-29T00:00:00-05:00</published><updated>2016-11-29T00:00:00-05:00</updated><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2016-11-29:posts/unity-asset-bundle</id><summary type="html">&lt;p&gt;Asset Bundle is a big topic in Unity. Initially, you want to grasp the basic setup and make something work. As your games get bigger, you might want to do more customization to make sure you have full control of the lifecycle. Here are some documents I've studied while learning about asset bundle. Ultimately, my goal is to make a full asset bundle workflow for big online game, so this blog will be a work in progress until I can transfer it into a working repository.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Asset bundle and AssetBundleManager&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://unity3d.com/learn/tutorials/topics/scripting/assetbundles-and-assetbundle-manager"&gt;AssetBundles and the AssetBundle Manager&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;AssetBundles are downloaded and cached in their entirety.&lt;/li&gt;
&lt;li&gt;AssetBundles do not need to be loaded in their entirety.&lt;/li&gt;
&lt;li&gt;Assets in AssetBundles can have dependencies on other assets.&lt;/li&gt;
&lt;li&gt;Assets in AssetBundles can share dependencies with other assets.&lt;/li&gt;
&lt;li&gt;Each AssetBundle has some technical overhead, both in the size of the file and the need to manage that file.&lt;/li&gt;
&lt;li&gt;AssetBundles should be built for each target platform.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The steps of working with AssetBundles in the editor fall roughly into these steps:&lt;ul&gt;
&lt;li&gt;Organizing &amp;amp; Setting-up AssetBundles in the editor.&lt;/li&gt;
&lt;li&gt;Building AssetBundles.&lt;/li&gt;
&lt;li&gt;Uploading AssetBundles to external storage.&lt;/li&gt;
&lt;li&gt;Downloading AssetBundles at run-time.&lt;/li&gt;
&lt;li&gt;Loading objects from AssetBundles.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Using Asset Variants to support different resolution&lt;ul&gt;
&lt;li&gt;Create Variants folder&lt;/li&gt;
&lt;li&gt;Create corresponding SD and HD folder (must be same structure)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Pack sprites into AssetBundle&lt;ul&gt;
&lt;li&gt;Use packing tag normally. Remember to set Sprite Mode: Single. Then set the AssetBundle&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Load sprite sheet from Asset Bundle&lt;ul&gt;
&lt;li&gt;Can load Sprite or Texture2D, but it can't load Sprite from a SpriteSheet directly&lt;/li&gt;
&lt;li&gt;http://forum.unity3d.com/threads/packing-a-texture-sprite-sheet-in-an-asset-bundle-with-already-sliced-subtextures-possible.313186/&lt;/li&gt;
&lt;li&gt;Basically use LoadAssetWithSubAssets&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Issues&lt;ul&gt;
&lt;li&gt;No subfolder inside AssetBundle&lt;/li&gt;
&lt;li&gt;Clear cache in &lt;code&gt;~/Library/Caches/Unity/&lt;/code&gt; &lt;a href="http://www.leandro.co.uk/unity/caching-assetbundles-in-unity/"&gt;http://www.leandro.co.uk/unity/caching-assetbundles-in-unity/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Loading prefabs with script references from assetbundle&lt;ul&gt;
&lt;li&gt;http://answers.unity3d.com/questions/1032495/loading-prefabs-with-script-references-from-assetb.html&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Variants with prefab&lt;ul&gt;
&lt;li&gt;http://forum.unity3d.com/threads/official-how-did-asset-bundle-variant-fail-to-satisfy-your-hd-sd-use-case.375716/&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Bundles have to be updated across unity version: http://forum.unity3d.com/threads/end-of-the-resources-folder.363800/&lt;ul&gt;
&lt;li&gt;Or force player to update their client&lt;/li&gt;
&lt;li&gt;Client has to update and redownload ALL bundles&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="https://unity3d.com/learn/tutorials/topics/best-practices/assetbundle-usage-patterns"&gt;AssetBundle usage patterns&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If an AssetBundle is unloaded improperly, it can cause Object duplication in memory&lt;/li&gt;
&lt;li&gt;Most projects should use AssetBundle.Unload(true) and adopt a method to ensure that Objects are not duplicated&lt;/li&gt;
&lt;li&gt;&lt;a href="https://unity3d.com/ru/learn/tutorials/topics/best-practices/assetbundle-fundamentals#Loading_Asset_Bundles"&gt;AssetBundle.CreateFromMemory&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;loads an AssetBundle from a managed-code byte array (byte[] in C#)&lt;/li&gt;
&lt;li&gt;If the AssetBundle is LZMA compressed, it will decompress the AssetBundle while copying&lt;/li&gt;
&lt;li&gt;Uncompressed and LZ4-compressed AssetBundles will be copied verbatim&lt;/li&gt;
&lt;li&gt;The peak amount of memory consumed by this API will be at least twice the size of the AssetBundle: one copy in native memory created by the API, and one copy in the managed byte array passed to the API&lt;/li&gt;
&lt;li&gt;Assets loaded from an AssetBundle created via this API will therefore be duplicated three times in memory&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://unity3d.com/ru/learn/tutorials/topics/best-practices/assetbundle-fundamentals#Loading_Asset_Bundles"&gt;AssetBundle.CreateFromFile&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;If the AssetBundles are uncompressed or LZ4&lt;ul&gt;
&lt;li&gt;On device: only load the AssetBundle's header. Objects are loaded on-demand. No excess memory will be consumed.&lt;/li&gt;
&lt;li&gt;On Editor: load the entire AssetBundle into memory&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Calls to AssetBundle.LoadFromFile will always fail for LZMA-compressed AssetBundles.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://unity3d.com/ru/learn/tutorials/topics/best-practices/assetbundle-fundamentals#Loading_Asset_Bundles"&gt;WWW.LoadFromCacheOrDownload&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;WWW object will keep a full copy of the AssetBundle's bytes in native memory&lt;/li&gt;
&lt;li&gt;3 ways to avoid&lt;ul&gt;
&lt;li&gt;Keep AssetBundles small&lt;/li&gt;
&lt;li&gt;If using Unity 5.3 or newer, switch to using the new UnityWebRequest API's DownloadHandlerAssetBundle, which does not cause memory spikes during downloads.&lt;/li&gt;
&lt;li&gt;Write a custom downloader. For more information, see the Custom downloaders section.&lt;/li&gt;
&lt;li&gt;Write a custom downloader&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://unity3d.com/ru/learn/tutorials/topics/best-practices/assetbundle-fundamentals#Loading_Asset_Bundles"&gt;AssetBundleDownloadHandler&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;LZMA-compressed AssetBundles will be decompressed during download and cached uncompressed.&lt;/li&gt;
&lt;li&gt;does not keep a native-code copy of all downloaded bytes&lt;/li&gt;
&lt;li&gt;supports caching in a manner identical to WWW.LoadFromCacheOrDownload&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Examples of situations which may prevent the use of UnityWebRequest or WWW.LoadFromCacheOrDownload:&lt;ul&gt;
&lt;li&gt;When fine-grained control over the AssetBundle cache is required&lt;/li&gt;
&lt;li&gt;When a project needs to implement a custom compression strategy&lt;/li&gt;
&lt;li&gt;When a project wishes to use platform-specific APIs to satisfy certain requirements, such as the need to stream data while inactive. Example: Using iOS' Background Tasks API to download data while in the background.&lt;/li&gt;
&lt;li&gt;When AssetBundles must be delivered over SSL on platforms where Unity does not have proper SSL support (such as PC).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;AssetBundles in the caching system are identified only by their file names&lt;/li&gt;
&lt;li&gt;LZ4 decompress individual Objects without needing to decompress the entire AssetBundle&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="https://docs.unity3d.com/Manual/AssetBundleCompression.html"&gt;Asset Bundle Compression&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="https://matome.naver.jp/odai/2139114084705385001"&gt;Unity AssetBundle summary&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[Unite Japan 2013] Scene / Memory / Asset Bundle&lt;ul&gt;
&lt;li&gt;【process】&lt;ul&gt;
&lt;li&gt;① Build the asset bundle (A).&lt;/li&gt;
&lt;li&gt;② Download the asset bundle (A).&lt;/li&gt;
&lt;li&gt;③ Load the asset bundle (A).&lt;/li&gt;
&lt;li&gt;④ Load the asset (B) from the asset bundle.&lt;/li&gt;
&lt;li&gt;⑤ Generate an instance (C) of the asset.&lt;/li&gt;
&lt;li&gt;⑥ Unload the asset bundle (A).&lt;/li&gt;
&lt;li&gt;(Note that unloaded assets can not depend on other assets)&lt;/li&gt;
&lt;li&gt;⑦ Discard instance (C).&lt;/li&gt;
&lt;li&gt;⑧ Unload asset (B).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;AssetBundle placement place】&lt;ul&gt;
&lt;li&gt;① Server&lt;/li&gt;
&lt;li&gt;② In the StreemingAsset folder&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Minimize size of AssetBundle】&lt;ul&gt;
&lt;li&gt;① It does not depend on others (Include all referenced assets in AssetBundle.)&lt;/li&gt;
&lt;li&gt;② It depends on in-app scripts and basic components.&lt;/li&gt;
&lt;li&gt;③ It depends on another AssetBundle.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;【Correspondence by Platform】&lt;ul&gt;
&lt;li&gt;① Editor (If you are looking at bundled assets bundle, it will be difficult to test, so let's do something.)&lt;/li&gt;
&lt;li&gt;② Android&lt;/li&gt;
&lt;li&gt;③ IOS&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;【How to Load Asset Bundle】&lt;ul&gt;
&lt;li&gt;① Use the cache. 'WWW.LoadFromCacheOrDownload'&lt;/li&gt;
&lt;li&gt;(Note: 150 days deletion and caching can not be deleted.)&lt;/li&gt;
&lt;li&gt;② One time only "WWW (" http: // ... "), WWW (" file: // ... ")"&lt;/li&gt;
&lt;li&gt;③ Save locally and do not use cache. "AssetBundle.CreateFromFile, AssetBundle.CreateFromMemory"&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Supplement 1: How to summarize asset bundles&lt;ul&gt;
&lt;li&gt;① Compressed or uncompressed&lt;/li&gt;
&lt;li&gt;② Individual or large quantity&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Supplement 2&lt;ul&gt;
&lt;li&gt;① Individual synchronous load&lt;/li&gt;
&lt;li&gt;② Individual asynchronous load&lt;/li&gt;
&lt;li&gt;③ bulk synchronous load&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;【Efficient Build】&lt;ul&gt;
&lt;li&gt;① Automation&lt;/li&gt;
&lt;li&gt;② Folder structure&lt;/li&gt;
&lt;li&gt;③ Adjustment of property at build time · · ·&lt;/li&gt;
&lt;li&gt;(Side street: property adjustment at asset import)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;【Correspondence at the time of version up】 · · · I do not use it so I omit it&lt;ul&gt;
&lt;li&gt;① Cash on the URL&lt;/li&gt;
&lt;li&gt;② Compatibility&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;【Others】 · · · I do not use it so I omit it&lt;ul&gt;
&lt;li&gt;① To use binary data.&lt;/li&gt;
&lt;li&gt;② Include the script in the asset bundle. (It is impossible in IOS, so it is omitted)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="unity"></category><category term="assetbundle"></category></entry><entry><title>Game backends</title><link href="http://minhhh.github.io/posts/game-backends" rel="alternate"></link><published>2016-11-25T00:00:00-05:00</published><updated>2016-11-25T00:00:00-05:00</updated><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2016-11-25:posts/game-backends</id><summary type="html">&lt;p&gt;&lt;strong&gt;&lt;a href="http://blog.soom.la/2016/02/top-10-parse-alternatives-game-backend.html"&gt;Top 10 Parse Alternatives For Your Game Backend&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GameSparks&lt;/li&gt;
&lt;li&gt;PlayFab&lt;/li&gt;
&lt;li&gt;HeroicLabs&lt;/li&gt;
&lt;li&gt;Gamedonia&lt;/li&gt;
&lt;li&gt;Kii&lt;/li&gt;
&lt;li&gt;Kinvey&lt;/li&gt;
&lt;li&gt;BrainCloud&lt;/li&gt;
&lt;li&gt;GamuaFlox&lt;/li&gt;
&lt;li&gt;App42&lt;/li&gt;
&lt;li&gt;Photon&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="http://www.pocketgamer.biz/feature/59149/12-reasons-to-use-gamesparks/"&gt;Why should you use GameSparks&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;GameSparks vs PlayFab&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/gamedev/comments/4otyeb/gamesparks_vs_playfab/"&gt;Gamesparks vs PlayFab?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://spaceteamadmirals.club/blog/spaceteam-is-coming-to-your-library/"&gt;Spaceteam&lt;/a&gt; uses GameSparks&lt;/li&gt;
&lt;/ul&gt;</summary><category term="game"></category><category term="backend"></category></entry><entry><title>Writing Unity iOS plugin</title><link href="http://minhhh.github.io/posts/writing-unity-ios-plugin" rel="alternate"></link><published>2016-11-25T00:00:00-05:00</published><updated>2016-11-25T00:00:00-05:00</updated><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2016-11-25:posts/writing-unity-ios-plugin</id><summary type="html">&lt;p&gt;&lt;a href="https://docs.unity3d.com/Manual/PluginsForIOS.html"&gt;Building Plugins for iOS&lt;/a&gt; is a guide from Unity.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Two approaches&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Approach 1: Put plugin source code &lt;code&gt;.mm,.c,.cpp&lt;/code&gt; files in &lt;code&gt;Assets/Plugins/iOS&lt;/code&gt; folder.&lt;/li&gt;
&lt;li&gt;Approach 2: Build plugin library to &lt;code&gt;.a&lt;/code&gt; file then put it in &lt;code&gt;Assets/Plugins/iOS&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="http://stackoverflow.com/questions/14834626/how-to-build-unity3d-plugin-for-ios"&gt;How to build Unity3d Plugin for iOS&lt;/a&gt; experience from a developer&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blogs.shephertz.com/2013/08/23/bridging-the-gap-plugin-for-unity-and-ios/"&gt;Plugin for Unity and iOS&lt;/a&gt; iOS plugin with source code inside Asset folder&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.slideshare.net/kaijungchen/unity3-d-plugins-development-guide-29659247"&gt;Unity3D Plugins Development Guide&lt;/a&gt;&lt;/p&gt;</summary><category term="unity"></category><category term="ios"></category></entry><entry><title>How to do blur effect in Unity</title><link href="http://minhhh.github.io/posts/how-to-do-blur-effect-in-unity" rel="alternate"></link><published>2016-11-24T00:00:00-05:00</published><updated>2016-11-24T00:00:00-05:00</updated><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2016-11-24:posts/how-to-do-blur-effect-in-unity</id><summary type="html">&lt;p&gt;&lt;strong&gt;Image Blur&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;can use a camera which render to a rendered texture&lt;/li&gt;
&lt;li&gt;add the images to be rendered to a second canvas, which uses the new camera with screenspace-camera&lt;/li&gt;
&lt;li&gt;Add blur shader to the Camera, or a parent object which contains all images&lt;/li&gt;
&lt;li&gt;Add the rendered texture to anywhere you like in the first camera&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Dynamic Background Blur&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://answers.unity3d.com/questions/21699/unity-blur-behind-window.html"&gt;Blur Behind Window&lt;/a&gt; Use Camera post effect&lt;/li&gt;
&lt;li&gt;&lt;a href="http://forum.unity3d.com/threads/solved-dynamic-blurred-background-on-ui.345083/"&gt;Dynamic Blurred Background on UI&lt;/a&gt; Use Grabpass&lt;/li&gt;
&lt;li&gt;http://blog.ivank.net/fastest-gaussian-blur.html&lt;/li&gt;
&lt;/ul&gt;</summary><category term="unity"></category><category term="blur"></category></entry><entry><title>Unity local network multiplayer</title><link href="http://minhhh.github.io/posts/unity-local-network-multiplayer" rel="alternate"></link><published>2016-11-21T00:00:00-05:00</published><updated>2016-11-21T00:00:00-05:00</updated><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2016-11-21:posts/unity-local-network-multiplayer</id><summary type="html">&lt;p&gt;iOS device can connect to iOS device via Bluetooth using:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.assetstore.unity3d.com/en/#!/content/2739"&gt;MultiPeer Local Multiplayer Plugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://prime31.com/docs#iosGCMP"&gt;GameCenter Multiplayer plugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;U3DXT&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Android device can connect to Android device via Bluetooth using:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Android Bluetooth Multiplayer (Pro)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://github.com/DarkRay/Unity3D-bluetooth"&gt;https://github.com/DarkRay/Unity3D-bluetooth&lt;/a&gt; A low level bluetooth library.&lt;/p&gt;
&lt;p&gt;Android and iOS cannot connect to each other via iOS as mentioned &lt;a href="http://stackoverflow.com/questions/18884705/transfer-data-between-ios-and-android-via-bluetooth"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://stackoverflow.com/questions/13032540/unity3d-for-ios-and-android-multiplayer-bluetooth-connection"&gt;Unity3D for iOS and Android: Multiplayer&lt;/a&gt;. Options for multiplayer game&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;via Bluetooth (using Prime31 plugin)&lt;ul&gt;
&lt;li&gt;iOS&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;via LAN (using Unity RPC) The players can start combats in a Local Area Network with any of above devices: iOS vs iOS, iOS vs Android, Android vs Mac, and so on.&lt;ul&gt;
&lt;li&gt;iOS&lt;/li&gt;
&lt;li&gt;Android&lt;/li&gt;
&lt;li&gt;Mac&lt;/li&gt;
&lt;li&gt;Web (Kongregate)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;via Game Center (using Prime31 plugin): Uses the Game Center multiplayer to match combats.&lt;ul&gt;
&lt;li&gt;iOS&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;via Global Server (an in-house solution): The players can start combats around the world with any of above devices: iOS vs iOS, iOS vs Android, Android vs Mac, and so on.&lt;ul&gt;
&lt;li&gt;iOS&lt;/li&gt;
&lt;li&gt;Android&lt;/li&gt;
&lt;li&gt;Mac&lt;/li&gt;
&lt;li&gt;Web (Kongregate)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://docs.unity3d.com/Manual/UNetOverview.html"&gt;UNET&lt;/a&gt; the new Unity Networking library.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://forum.unity3d.com/threads/unet-sample-projects.331978/"&gt;Unet sample projects&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://unity3d.com/learn/tutorials/topics/multiplayer-networking/introduction-simple-multiplayer-example?playlist=29690"&gt;Multiplayer Networking Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://forum.unity3d.com/threads/unity-5-unet-multiplayer-tutorials-making-a-basic-survival-co-op.325692/"&gt;Unity 5 UNET Multiplayer Tutorials&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="http://www.tasharen.com/?page_id=4518"&gt;TNET&lt;/a&gt; Another option which uses UDP for multiplayer game.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://allseenalliance.org/framework"&gt;Alljoyn&lt;/a&gt; makes it easy for devices to communicate. Unfortunately it does not support Unity.&lt;/p&gt;</summary><category term="unity"></category><category term="bluetooth"></category><category term="multiplayer"></category></entry><entry><title>Setting sorting layer and order in layer of Mesh Renderer</title><link href="http://minhhh.github.io/posts/setting-sorting-layer-and-order-in-layer-of-mesh-renderer" rel="alternate"></link><published>2016-10-30T00:00:00-04:00</published><updated>2016-10-30T00:00:00-04:00</updated><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2016-10-30:posts/setting-sorting-layer-and-order-in-layer-of-mesh-renderer</id><summary type="html">&lt;p&gt;Unity 5.x exposes the sorting layer and order in layer of &lt;code&gt;SpriterRenderer&lt;/code&gt;, but not &lt;code&gt;MeshRenderer&lt;/code&gt;. Fortunately, it's very easy setting these property of the &lt;code&gt;MeshRenderer&lt;/code&gt; in code. I've created a simple solution for setting sorting layer and order in layer of any &lt;code&gt;Renderer&lt;/code&gt; component using a simple component called &lt;a href="https://github.com/minhhh/unity-sortinglayer-setter"&gt;SortingLayerSetter&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It looks like this in the Editor&lt;/p&gt;
&lt;p&gt;&lt;img alt="example 1" src="https://raw.githubusercontent.com/minhhh/unity-sortinglayer-setter/master/images/example1.png" /&gt;&lt;/p&gt;</summary><category term="unity"></category></entry><entry><title>When to use Script Execution Order</title><link href="http://minhhh.github.io/posts/when-to-use-script-execution-order" rel="alternate"></link><published>2016-10-28T00:01:00-04:00</published><updated>2016-10-28T00:01:00-04:00</updated><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2016-10-28:posts/when-to-use-script-execution-order</id><summary type="html">&lt;p&gt;Normally we don't control the execution order of &lt;code&gt;MonoBehaviour&lt;/code&gt; scripts, and we should not. However, there are cases where we do want some scripts to be executed before others. Some usecases include:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A &lt;code&gt;Controller&lt;/code&gt; script that should be executed as the entry point to the scene&lt;/li&gt;
&lt;li&gt;Scripts which use &lt;code&gt;LateUpdate&lt;/code&gt; and must be executed in specific order&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For these cases, we will assign an integer number to those scripts in &lt;code&gt;Edit &amp;gt; Project Settings &amp;gt; Script Execution Order&lt;/code&gt;. It's best practice to use large and discrete number such as &lt;code&gt;100&lt;/code&gt;, &lt;code&gt;200&lt;/code&gt;, &lt;code&gt;-100&lt;/code&gt; instead of &lt;code&gt;1&lt;/code&gt;, &lt;code&gt;2&lt;/code&gt;, &lt;code&gt;3&lt;/code&gt; because it would make it easier to insert something in between them when we need to.&lt;/p&gt;
&lt;p&gt;One inconvenience with Unity Editor GUI for &lt;code&gt;Script Execution Order&lt;/code&gt; is that it's a bit hard to find your classes when there are a lot of them. The solution for this is to add &lt;code&gt;Script Execution Order&lt;/code&gt; as meta information to the class using attribute. There's already an implementation for this: &lt;a href="https://github.com/kwnetzwelt/ugb-source/blob/UGB-3.0/UnityGameBase/Core/Editor/GameScriptExecutionOrder.cs"&gt;https://github.com/kwnetzwelt/ugb-source/blob/UGB-3.0/UnityGameBase/Core/Editor/GameScriptExecutionOrder.cs&lt;/a&gt; and &lt;a href="https://github.com/kwnetzwelt/ugb-source/blob/UGB-3.0/UnityGameBase/ScriptExecutionOrderAttribute.cs"&gt;https://github.com/kwnetzwelt/ugb-source/blob/UGB-3.0/UnityGameBase/ScriptExecutionOrderAttribute.cs&lt;/a&gt;. Using these 2 classes, now we can add &lt;code&gt;Script Execution Order&lt;/code&gt; to any class as follows:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[ScriptExecutionOrder(-1000)]&lt;/span&gt;
&lt;span class="err"&gt;public&lt;/span&gt; &lt;span class="err"&gt;abstract&lt;/span&gt; &lt;span class="err"&gt;class&lt;/span&gt; &lt;span class="err"&gt;Game&lt;/span&gt; &lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="err"&gt;MonoBehaviour&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="unity"></category></entry><entry><title>Run specific code when Editor starts</title><link href="http://minhhh.github.io/posts/run-specific-code-when-editor-starts" rel="alternate"></link><published>2016-10-28T00:00:00-04:00</published><updated>2016-10-28T00:00:00-04:00</updated><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2016-10-28:posts/run-specific-code-when-editor-starts</id><summary type="html">&lt;p&gt;Sometimes we want to execute code whenever we hit &lt;code&gt;Play&lt;/code&gt; button in Unity Editor. The reason for this usually is that we want to enforce some workflow automatically such as getting specific environment information (e.g. git hash, date) and fill it in a prefab or something. We could do these things by creating a Custom Window with a button somewhere, but it feels too manual.&lt;/p&gt;
&lt;p&gt;Fortunately, Unity has offered a simple way to do this, that is &lt;code&gt;InitializeOnLoadAttribute&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://web.archive.org/web/20160515043658/http://blog.andreimarks.com/2012/08/16/unity-how-to-run-specific-code-only-when-building-out-a-project"&gt;http://blog.andreimarks.com/2012/08/16/unity-how-to-run-specific-code-only-when-building-out-a-project/&lt;/a&gt; shows an usecase of &lt;code&gt;InitializeOnLoadAttribute&lt;/code&gt;: to generate a tracking tag of the build with the build date.&lt;/p&gt;
&lt;p&gt;Beware of a potential problem &lt;a href="https://web.archive.org/web/20161015115941/http://www.createdbyx.com/post/2013/02/17/Unity-Tip-101-55-%E2%80%93-InitializeOnLoad-ResourcesLoad-gotcha%E2%80%99s.aspx"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;An awesome review of other ways to execute code on startup are listed here &lt;a href="http://www.codingjargames.com/blog/2015/08/04/unity-and-initialization-order/"&gt;http://www.codingjargames.com/blog/2015/08/04/unity-and-initialization-order/&lt;/a&gt;&lt;/p&gt;</summary><category term="unity"></category></entry><entry><title>MVC in Unity</title><link href="http://minhhh.github.io/posts/mvc-in-unity" rel="alternate"></link><published>2016-10-27T00:00:00-04:00</published><updated>2016-10-27T00:00:00-04:00</updated><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2016-10-27:posts/mvc-in-unity</id><summary type="html">&lt;h1&gt;Some MVC like frameworks in Unity&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="https://forum.unity3d.com/threads/3usd-key-value-observing-lightweight-implementation-of-kvo-for-c.330319/"&gt;Key Value Observing&lt;/a&gt;&lt;/strong&gt; This is a simple implementation of MVC according to his own understandings&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="https://github.com/cgarciae/karma"&gt;Karma&lt;/a&gt;&lt;/strong&gt; Lightweight MVC framework using Zenject DI container. It is inspired from &lt;a href="http://engineering.socialpoint.es/MVC-pattern-unity3d-ui.html"&gt;MODEL VIEW CONTROLLER PATTERN FOR UNITY3D USER INTERFACES&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="https://www.assetstore.unity3d.com/en/#!/content/37466"&gt;Marklight&lt;/a&gt;&lt;/strong&gt; Looks nice. It offers XUML and external editor which might be good for view management, but it also feels too restrictive because you have to follow their way.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="http://chromealex.github.io/Unity3d.UI.Windows/"&gt;Unity3d.UI.Windows&lt;/a&gt;&lt;/strong&gt; Uses a Window system to create UI and layout elements. Try doing too many things: Audio, Tweening&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="https://github.com/strangeioc/strangeioc"&gt;strangeioc&lt;/a&gt;&lt;/strong&gt; Obsolete and not maintained&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="https://www.assetstore.unity3d.com/en/#!/content/14381"&gt;uFrame MVVM&lt;/a&gt;&lt;/strong&gt; It's trying to do too much by offering a graphing/diagramming engine and code generation. I really don't like code generation&lt;/p&gt;
&lt;h1&gt;Discussion&lt;/h1&gt;
&lt;p&gt;It looks like the main advantages of using these MVC frameworks are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Some of them can support theme change&lt;/li&gt;
&lt;li&gt;They have some existing controls so you don't have to implement yourself.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;However, there are several disadvantages:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If you don't need to change theme then definitely you don't need to separate View and ViewModel or Presenter.&lt;/li&gt;
&lt;li&gt;UI usually consists of a big container and a lot of smaller views. Testing small views is easy so you don't need to create separate View class for each. Testing the container is complicated, you want to do it with a test scene in Unity anyway, thus there's no need to try to make an ViewModel interface for testing.&lt;/li&gt;
&lt;li&gt;The examples of Unity MVC implementation in some blogs are usually naive and contrived. As such, they don't scale when you have really complex UI. In addition, they usually confuse between UI and gameplay, so they take example such as hitting enemies or updating their HP bar. MVC is suitable for UIs and maybe some turn-based gameplay, but extending it to a fighting gameplay requires much more than some optimistic guesswork.&lt;/li&gt;
&lt;li&gt;Controller needs to behave according to states, that makes the ViewPresenter or ViewModel also have to replicate those states fully or partly. It's quite difficult to know which should be the common behaviour. A simpler way is to just merge Controller and View/ViewPresenter/ViewModel.&lt;/li&gt;
&lt;/ul&gt;</summary><category term="unity"></category><category term="mvc"></category></entry><entry><title>Unity singleton</title><link href="http://minhhh.github.io/posts/unity-singleton" rel="alternate"></link><published>2016-09-29T00:00:00-04:00</published><updated>2016-09-29T00:00:00-04:00</updated><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2016-09-29:posts/unity-singleton</id><summary type="html">&lt;p&gt;First of all, please remember that Singletons are generally not recommended due to various obvious disadvantages:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hard to reason about code&lt;/li&gt;
&lt;li&gt;Encourage coupling&lt;/li&gt;
&lt;li&gt;Potential concurrency issue&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;However, in game development it's super useful to have singleton for many types of global system, including but not limited to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sound system&lt;/li&gt;
&lt;li&gt;Time manager&lt;/li&gt;
&lt;li&gt;Localization&lt;/li&gt;
&lt;li&gt;Tutorial&lt;/li&gt;
&lt;li&gt;Login&lt;/li&gt;
&lt;li&gt;Global Notifier&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In this article we will look at some options of Singleton implementation we have in Unity to see what problems they're trying to solve and what assumptions they made.&lt;/p&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;p&gt;Let's first review some requirements for a useful singleton system in Unity.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Singleton class types&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MonoBehavior based: These types of singletons extends MonoBehavior and shows themselves in the scene hierarchy so that you can look at their exposed members. Another reason is you want them to have an &lt;code&gt;Update&lt;/code&gt; function to do something useful in it.&lt;/li&gt;
&lt;li&gt;Non MonoBehavior based: Traditional singletons in any OO languages. These singletons don't need to be inspected in the scene nor do they need &lt;code&gt;Update&lt;/code&gt;. We will not focus on these types of singletons.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Singleton lifecycle types&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Has dependencies: These singletons depend on other system or singletons to exist before they can start&lt;/li&gt;
&lt;li&gt;No dependencies: These singletons can be created anytime without waiting for any other entities.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Singleton configurability types&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Has customized parameters: This is a bit overlap with &lt;code&gt;Has dependencies&lt;/code&gt; singletons. These singletons might: 1. Depend on parameters provided by another system, such as the FileSystem to load certian parameters from disk. OR 2. Need customized parameters or linked prefab. They might be in a prefab themselves such as a LevelManager.&lt;/li&gt;
&lt;li&gt;No customized parameters: These singletons behave the same all the time.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Solutions&lt;/h2&gt;
&lt;p&gt;Fortunately there're already some solutions written in &lt;a href="http://wiki.unity3d.com"&gt;unity3d&lt;/a&gt; so we can review and improve them as we wish.&lt;/p&gt;
&lt;h3&gt;AManagerClass&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://wiki.unity3d.com/index.php/AManagerClass"&gt;AManagerClass&lt;/a&gt; is a standard implementation which supports MonoBehavior-based singletons. In the code, we refer to the singleton like this:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    AManager.instance.Foo ();
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;instance&lt;/code&gt; function implementation is as below:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    public static AManager instance {
        get {
            if (s_Instance == null) {
                // This is where the magic happens.
                //  FindObjectOfType(...) returns the first AManager object in the scene.
                s_Instance =  FindObjectOfType(typeof (AManager)) as AManager;
            }

            // If it is still null, create a new instance
            if (s_Instance == null) {
                GameObject obj = new GameObject(&amp;quot;AManager&amp;quot;);
                s_Instance = obj.AddComponent(typeof (AManager)) as AManager;
                Debug.Log (&amp;quot;Could not locate an AManager object. \ AManager was Generated Automaticly.&amp;quot;);
            }

            return s_Instance;
        }
    }
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There are several problems with &lt;code&gt;AManager&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We have to duplicate it for all singleton class&lt;/li&gt;
&lt;li&gt;It's slow due to the 2 checks&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Surely we can do better!&lt;/p&gt;
&lt;h3&gt;AutoSingletonManager&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://wiki.unity3d.com/index.php/AutoSingletonManager"&gt;AutoSingletonManager&lt;/a&gt; solves the code duplication problem of &lt;code&gt;AManager&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here's the main code&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public abstract class AutoSingletonManager : MonoBehaviour { }

public abstract class AutoSingletonManager&amp;lt;T&amp;gt; : AutoSingletonManager where T : AutoSingletonManager
{
    private static bool Compare&amp;lt;T&amp;gt;(T x, T y) where T : class
    {
        return x == y;
    }

    #region Singleton

    private static T _instance = default(T);

    public static T Instance
    {
        get
        {
            if (!Compare&amp;lt;T&amp;gt;(default(T), _instance)) return _instance;

            InitInstance(true);
            return _instance;
        }
    }

    #endregion

    public void Awake()
    {
        InitInstance(false);
    }

    public static void InitInstance(bool shouldInitManager)
    {
        Type thisType = typeof (T);

        _instance = FindObjectOfType&amp;lt;T&amp;gt;();

        if (Compare&amp;lt;T&amp;gt;(default(T), _instance))
        {
            _instance = new GameObject(thisType.Name).AddComponent&amp;lt;T&amp;gt;();
        }

        //Won&amp;#39;t call InitManager from Awake
        if (shouldInitManager)
        {
            (_instance as AutoSingletonManager&amp;lt;T&amp;gt;).InitManager();
        }
    }

    public virtual void InitManager() { }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The code uses recursive generic definition. This allow us to reuse code by inheriting from the singleton class as well as from &lt;code&gt;MonoBehaviour&lt;/code&gt;. Note that we don't have to make &lt;code&gt;AutoSingletonManager&amp;lt;T&amp;gt;&lt;/code&gt; inherits from &lt;code&gt;AutoSingletonManager&lt;/code&gt;, instead we can make it inherit from our own class which in turn inherits from MonoBehavior.&lt;/p&gt;
&lt;p&gt;It supports initializing the instance from &lt;code&gt;Awake&lt;/code&gt; so maybe it can be used by adding directly it to an object in the scene. However, &lt;code&gt;InitManager&lt;/code&gt; is not called in &lt;code&gt;Awake&lt;/code&gt; so if you call &lt;code&gt;AutoSingletonManager.Instance&lt;/code&gt; after it already awakes then InitManager will never be called.&lt;/p&gt;
&lt;p&gt;Another more subtle draw back is it uses an unnecessary comparison &lt;code&gt;if (!Compare&amp;lt;T&amp;gt;(default(T), _instance)) return _instance;&lt;/code&gt; in the &lt;code&gt;Instance&lt;/code&gt; property, so it's not optimal if you call &lt;code&gt;Instance&lt;/code&gt; in a &lt;code&gt;Update&lt;/code&gt; loop or something similar.&lt;/p&gt;
&lt;p&gt;Surely we can do better than this.&lt;/p&gt;
&lt;h3&gt;Secure UnitySingleton&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://wiki.unity3d.com/index.php/Secure_UnitySingleton"&gt;SecureUnitySingleton&lt;/a&gt; is the last one of the three singleton implementation in &lt;a href="http://wiki.unity3d.com"&gt;unity3d&lt;/a&gt;. It has a very clear idea about the usecases of singletons. There are 3 main supported usecases:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Exists In Scene: Searches the current scene for an object with the singleton component attached to it.&lt;/li&gt;
&lt;li&gt;Loaded From Resources: This type creates an instance of a prefab with the singleton component attached to it from a Resources folder.&lt;/li&gt;
&lt;li&gt;Create on New GameObject: This type creates a new GameObject and attaches a new instance of the singleton component to it.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are several issues with approach:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Even though the code is quite functional, it still suffers the performance penalty from checking too many things in the &lt;code&gt;Instance&lt;/code&gt; property.&lt;/li&gt;
&lt;li&gt;Lack of lifecyle methods. Even though it provides a static &lt;code&gt;DeleteInstance&lt;/code&gt; method, there's no other methods to execute when the instance is created. You might think that &lt;code&gt;Awake&lt;/code&gt; can be used for that purpose, but it not explicit enough that &lt;code&gt;Awake&lt;/code&gt; is called immediately after &lt;code&gt;Instance&lt;/code&gt; is called. Another possible issue is &lt;code&gt;Awake&lt;/code&gt; will not be called when the prefab is disabled, which should never be desirable but can happen due to a mistake from the developers.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is quite good but surely we can do better.&lt;/p&gt;
&lt;h2&gt;Discussions&lt;/h2&gt;
&lt;p&gt;First of all, we realize that non of the above methods take into account concurrency issue. If we care about concurrency we can do something like this:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    public class MySingleton ...
    {
        static MySingleton _instance = null;
        static object singletonLock = new object ();

        public static MySingleton Instance
        {
            get {
                if (_instance != null) {
                    return;
                }

                lock (singletonLock) {
                    if (_instance != null) {
                        return _instance;
                    }

                    var singletonGameObject = new GameObject (&amp;quot;MySingleton&amp;quot;);
                    GameObject.DontDestroyOnLoad (singletonGameObject);
                    _instance = singletonGameObject.AddComponent&amp;lt; MySingleton &amp;gt; ();

                    ... other initialization code
                }

                return _instance;
            }
        }
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;By using a simple double lock pattern, we seemingly solve the "concurrency problem". The question is: Do we need to?. Why you have the concurrency problem with singleton? It's because you want to &lt;code&gt;lazy load&lt;/code&gt; the singleton, i.e. only create it when it is used for the first time. But that's exactly what we want to avoid if we want to achieve smooth gameplay. So what you should do instead is just create the bloody singleton at the beginning and forget about it. Remember, &lt;code&gt;preload&lt;/code&gt; is better than &lt;code&gt;lazy load&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Secondly, I've already mentioned the check for null is redundant if we know we only call the singleton after it's been initialized. In the usecases listed by &lt;code&gt;SecureSingleton&lt;/code&gt;, we see that the singleton is either created by code or already exists in the scene as a &lt;code&gt;GameObject&lt;/code&gt; which is supposed to be configured by designers. In either case, the code to initialize the scene should be a good place for calling the initialization code of the singleton and there's no need for making it sooner.&lt;/p&gt;
&lt;p&gt;So what will happen if the &lt;code&gt;Instance&lt;/code&gt; property is called before you initialize the singleton? Obviously an exception will be thrown and this is an ideal case for using Unity Assert because you will have a nice message in development mode but you can also turn it off in production build.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    public class GameSingleton&amp;lt;T&amp;gt; : MyBaseBehaviour where T : GameSingleton&amp;lt;T&amp;gt;
    {
        ...
        public static T Instance
        {
            get {
                Assert.IsNotNull (instance);
                return instance;
            }
        }
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note that &lt;code&gt;MyBaseBehaviour&lt;/code&gt; class is a class derived from &lt;code&gt;MonoBehaviour&lt;/code&gt; and is customized specifically for our game. For instance, it might have general code for handling &lt;code&gt;Update&lt;/code&gt; or &lt;code&gt;OnDestroy&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;All that is left now is writing a function &lt;code&gt;CreateInstance&lt;/code&gt; for creating the singleton. This function should be called once only at the exact place where you want it. This means we should design it in such a way to discourage it from being called multiple times randomly by some careless developers. Calling &lt;code&gt;CreateInstance&lt;/code&gt; twice should throw an exception. This is better than mindlessly guard the function in the name of "defensive programming". It will look something like this:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;        public static T CreateInstance()
        {
            Assert.IsNull (instance);

            GameObject go = new GameObject(typeof(T).Name);
            instance = go.AddComponent&amp;lt;T&amp;gt;();
            instance.OnCreated();
            DontDestroyOnLoad(go);

            return instance;
        }


        protected virtual void OnCreated()
        {
        }
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here we have a virtual function &lt;code&gt;OnCreated&lt;/code&gt; waiting to be overriden in subclass. To destroy the singleton, we don't have to use fancy static function &lt;code&gt;DeleteInstance&lt;/code&gt;, instead we can just get the singleton gameobject and destroy it like this:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    GameObject.Destroy (MySingleton.Instance.gameObject);
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;When the &lt;code&gt;OnDestroy&lt;/code&gt; function is called, we will set &lt;code&gt;instance&lt;/code&gt; variable to null then allow subclass to do cleanup themselves. The reason why we don't use &lt;code&gt;DeleteInstance&lt;/code&gt; is because we don't want developers who use the API to think there's anything special about destroying the singleton than just destroying the container object.&lt;/p&gt;
&lt;p&gt;Finally, we discuss feature &lt;code&gt;destroy if exists in scene&lt;/code&gt;. In my opinion, this feature accounts for a very small proportion of our usecases. Most of the time we have a singleton already exists in scene, or in some prefab is because we want to use Unity to store game data. But that's should not be the main way to deal with game data. We'd better use off-unity format to store game data, like text or database. If we need to store linked resources we can use Scriptable Object. The point is to not rely too much on data stored in prefab or scene just because you want designers to change them easily, they can also change text file or database much more easily than firing up Unity. Also, merging prefab is harder than merging text data.&lt;/p&gt;
&lt;p&gt;If you really want to use avoid duplicate singleton in scene, we can simply use this piece of code from &lt;code&gt;SecureUnitySingleton&lt;/code&gt;:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    protected virtual void Awake()
    {
        if (InstanceExists &amp;amp;&amp;amp; instance != this)
            Destroy(gameObject);
    }
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Implementation&lt;/h2&gt;
&lt;p&gt;After we've considered different aspect of singletons and what our real usecases are, we finalize our own version Unity singleton as follows&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;using UnityEngine;
using System;
using UnityEngine.Assertions;

public class SimpleSingleton&amp;lt;T&amp;gt; : BaseMonoBehaviour where T : SimpleSingleton&amp;lt;T&amp;gt;
{
    private static T instance;

    public static T Instance {
        get {
            Assert.IsNotNull (instance, &amp;quot;Instance is null. Please call CreateInstance first!&amp;quot;);
            return instance;
        }
    }

    public static T CreateInstance ()
    {
        if (instance != null) {
            Assert.IsNull (instance, &amp;quot;Instance is not null. Please call CreateInstance once only&amp;quot;);
        }

        GameObject go = new GameObject (typeof(T).Name);
        instance = go.AddComponent&amp;lt;T&amp;gt; ();

        instance.OnCreated ();

        return instance;
    }

    protected virtual void OnDestroy ()
    {
        instance = null;
    }

    protected virtual void OnCreated ()
    {
    }

}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then remember to call &lt;code&gt;CreateInstance&lt;/code&gt; when necessary and in appropriate order.&lt;/p&gt;
&lt;p&gt;The code with a sample scene is available on github at &lt;a href="https://github.com/minhhh/unity-singleton"&gt;https://github.com/minhhh/unity-singleton&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Regarding the &lt;code&gt;Has Customized Parameters&lt;/code&gt; singletons, there are some implementations of this type using Prefab to set the parameters. This method is not recommended. Instead, we can use ScriptableObject to store the parameter and let the Singleton read from these ScriptableObject. This method will make all the settings centralized in a single location.&lt;/p&gt;
&lt;p&gt;TODO: Create SceneSingleton&lt;/p&gt;</summary><category term="unity"></category><category term="singleton"></category></entry></feed>