<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Ha.Minh's Blog</title><link href="http://minhhh.github.io/" rel="alternate"></link><link href="http://minhhh.github.io/feeds/unity.atom.xml" rel="self"></link><id>http://minhhh.github.io/</id><updated>2016-11-29T00:00:00-05:00</updated><entry><title>Scale Shuriken Particle System</title><link href="http://minhhh.github.io/posts/scale-shuriken-particle-system" rel="alternate"></link><published>2016-11-29T00:00:00-05:00</published><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2016-11-29:posts/scale-shuriken-particle-system</id><summary type="html">&lt;p&gt;Unity does not provide a way to scale Shuriken particle system in Editor. The process to scale each particle system manually is very inconvenient.&lt;/p&gt;
&lt;p&gt;There are some plugins on the Asset Store which can help you with this tasks:&lt;br /&gt;
&lt;em&gt; &lt;a href="https://www.assetstore.unity3d.com/en/#!/content/9703"&gt;Simple Particle Scaler&lt;/a&gt;
&lt;/em&gt; &lt;a href="https://www.assetstore.unity3d.com/en/#!/content/4400"&gt;Particle Scaler&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I've also written a tool to scale Shuriken Particles in the Editor: &lt;a href="https://github.com/minhhh/unity-particle-scaler"&gt;unity-particle-scaler&lt;/a&gt;. It's very convenient and simple to use.&lt;/p&gt;</summary><category term="unity"></category><category term="particlesystem"></category></entry><entry><title>Game backends</title><link href="http://minhhh.github.io/posts/game-backends" rel="alternate"></link><published>2016-11-25T00:00:00-05:00</published><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2016-11-25:posts/game-backends</id><summary type="html">&lt;p&gt;&lt;strong&gt;&lt;a href="http://blog.soom.la/2016/02/top-10-parse-alternatives-game-backend.html"&gt;Top 10 Parse Alternatives For Your Game Backend&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GameSparks&lt;/li&gt;
&lt;li&gt;PlayFab&lt;/li&gt;
&lt;li&gt;HeroicLabs&lt;/li&gt;
&lt;li&gt;Gamedonia&lt;/li&gt;
&lt;li&gt;Kii&lt;/li&gt;
&lt;li&gt;Kinvey&lt;/li&gt;
&lt;li&gt;BrainCloud&lt;/li&gt;
&lt;li&gt;GamuaFlox&lt;/li&gt;
&lt;li&gt;App42&lt;/li&gt;
&lt;li&gt;Photon&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="http://www.pocketgamer.biz/feature/59149/12-reasons-to-use-gamesparks/"&gt;Why should you use GameSparks&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;GameSparks vs PlayFab&lt;/strong&gt;&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;* [Gamesparks vs PlayFab?](https://www.reddit.com/r/gamedev/comments/4otyeb/gamesparks_vs_playfab/)
* [Spaceteam](http://spaceteamadmirals.club/blog/spaceteam-is-coming-to-your-library/) uses GameSparks
&lt;/pre&gt;&lt;/div&gt;</summary><category term="game"></category><category term="backend"></category></entry><entry><title>Writing Unity iOS plugin</title><link href="http://minhhh.github.io/posts/writing-unity-ios-plugin" rel="alternate"></link><published>2016-11-25T00:00:00-05:00</published><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2016-11-25:posts/writing-unity-ios-plugin</id><summary type="html">&lt;p&gt;&lt;a href="https://docs.unity3d.com/Manual/PluginsForIOS.html"&gt;Building Plugins for iOS&lt;/a&gt; is a guide from Unity.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Two approaches&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Approach 1: Put plugin source code &lt;code&gt;.mm,.c,.cpp&lt;/code&gt; files in &lt;code&gt;Assets/Plugins/iOS&lt;/code&gt; folder.&lt;/li&gt;
&lt;li&gt;Approach 2: Build plugin library to &lt;code&gt;.a&lt;/code&gt; file then put it in &lt;code&gt;Assets/Plugins/iOS&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="http://stackoverflow.com/questions/14834626/how-to-build-unity3d-plugin-for-ios"&gt;How to build Unity3d Plugin for iOS&lt;/a&gt; experience from a developer&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blogs.shephertz.com/2013/08/23/bridging-the-gap-plugin-for-unity-and-ios/"&gt;Plugin for Unity and iOS&lt;/a&gt; iOS plugin with source code inside Asset folder&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.slideshare.net/kaijungchen/unity3-d-plugins-development-guide-29659247"&gt;Unity3D Plugins Development Guide&lt;/a&gt;&lt;/p&gt;</summary><category term="unity"></category><category term="ios"></category></entry><entry><title>How to do blur effect in Unity</title><link href="http://minhhh.github.io/posts/how-to-do-blur-effect-in-unity" rel="alternate"></link><published>2016-11-24T00:00:00-05:00</published><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2016-11-24:posts/how-to-do-blur-effect-in-unity</id><summary type="html">&lt;p&gt;&lt;strong&gt;Image Blur&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;can use a camera which render to a rendered texture&lt;/li&gt;
&lt;li&gt;add the images to be rendered to a second canvas, which uses the new camera with screenspace-camera&lt;/li&gt;
&lt;li&gt;Add blur shader to the Camera, or a parent object which contains all images&lt;/li&gt;
&lt;li&gt;Add the rendered texture to anywhere you like in the first camera&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Dynamic Background Blur&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://answers.unity3d.com/questions/21699/unity-blur-behind-window.html"&gt;Blur Behind Window&lt;/a&gt; Use Camera post effect&lt;/li&gt;
&lt;li&gt;&lt;a href="http://forum.unity3d.com/threads/solved-dynamic-blurred-background-on-ui.345083/"&gt;Dynamic Blurred Background on UI&lt;/a&gt; Use Grabpass&lt;/li&gt;
&lt;li&gt;http://blog.ivank.net/fastest-gaussian-blur.html&lt;/li&gt;
&lt;/ul&gt;</summary><category term="unity"></category><category term="blur"></category></entry><entry><title>Unity local network multiplayer</title><link href="http://minhhh.github.io/posts/unity-local-network-multiplayer" rel="alternate"></link><published>2016-11-21T00:00:00-05:00</published><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2016-11-21:posts/unity-local-network-multiplayer</id><summary type="html">&lt;p&gt;iOS device can connect to iOS device via Bluetooth using:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.assetstore.unity3d.com/en/#!/content/2739"&gt;MultiPeer Local Multiplayer Plugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://prime31.com/docs#iosGCMP"&gt;GameCenter Multiplayer plugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;U3DXT&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Android device can connect to Android device via Bluetooth using:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Android Bluetooth Multiplayer (Pro)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://github.com/DarkRay/Unity3D-bluetooth"&gt;https://github.com/DarkRay/Unity3D-bluetooth&lt;/a&gt; A low level bluetooth library.&lt;/p&gt;
&lt;p&gt;Android and iOS cannot connect to each other via iOS as mentioned &lt;a href="http://stackoverflow.com/questions/18884705/transfer-data-between-ios-and-android-via-bluetooth"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://stackoverflow.com/questions/13032540/unity3d-for-ios-and-android-multiplayer-bluetooth-connection"&gt;Unity3D for iOS and Android: Multiplayer&lt;/a&gt;. Options for multiplayer game&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;via Bluetooth (using Prime31 plugin)&lt;ul&gt;
&lt;li&gt;iOS&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;via LAN (using Unity RPC) The players can start combats in a Local Area Network with any of above devices: iOS vs iOS, iOS vs Android, Android vs Mac, and so on.&lt;ul&gt;
&lt;li&gt;iOS&lt;/li&gt;
&lt;li&gt;Android&lt;/li&gt;
&lt;li&gt;Mac&lt;/li&gt;
&lt;li&gt;Web (Kongregate)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;via Game Center (using Prime31 plugin): Uses the Game Center multiplayer to match combats.&lt;ul&gt;
&lt;li&gt;iOS&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;via Global Server (an in-house solution): The players can start combats around the world with any of above devices: iOS vs iOS, iOS vs Android, Android vs Mac, and so on.&lt;ul&gt;
&lt;li&gt;iOS&lt;/li&gt;
&lt;li&gt;Android&lt;/li&gt;
&lt;li&gt;Mac&lt;/li&gt;
&lt;li&gt;Web (Kongregate)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://docs.unity3d.com/Manual/UNetOverview.html"&gt;UNET&lt;/a&gt; the new Unity Networking library.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://forum.unity3d.com/threads/unet-sample-projects.331978/"&gt;Unet sample projects&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://unity3d.com/learn/tutorials/topics/multiplayer-networking/introduction-simple-multiplayer-example?playlist=29690"&gt;Multiplayer Networking Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://forum.unity3d.com/threads/unity-5-unet-multiplayer-tutorials-making-a-basic-survival-co-op.325692/"&gt;Unity 5 UNET Multiplayer Tutorials&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="http://www.tasharen.com/?page_id=4518"&gt;TNET&lt;/a&gt; Another option which uses UDP for multiplayer game.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://allseenalliance.org/framework"&gt;Alljoyn&lt;/a&gt; makes it easy for devices to communicate. Unfortunately it does not support Unity.&lt;/p&gt;</summary><category term="unity"></category><category term="bluetooth"></category><category term="multiplayer"></category></entry><entry><title>Setting sorting layer and order in layer of Mesh Renderer</title><link href="http://minhhh.github.io/posts/setting-sorting-layer-and-order-in-layer-of-mesh-renderer" rel="alternate"></link><published>2016-10-30T00:00:00-04:00</published><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2016-10-30:posts/setting-sorting-layer-and-order-in-layer-of-mesh-renderer</id><summary type="html">&lt;p&gt;Unity 5.x exposes the sorting layer and order in layer of &lt;code&gt;SpriterRenderer&lt;/code&gt;, but not &lt;code&gt;MeshRenderer&lt;/code&gt;. Fortunately, it's very easy setting these property of the &lt;code&gt;MeshRenderer&lt;/code&gt; in code. I've created a simple solution for setting sorting layer and order in layer of any &lt;code&gt;Renderer&lt;/code&gt; component using a simple component called &lt;a href="https://github.com/minhhh/unity-sortinglayer-setter"&gt;SortingLayerSetter&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It looks like this in the Editor&lt;/p&gt;
&lt;p&gt;&lt;img alt="example 1" src="https://raw.githubusercontent.com/minhhh/unity-sortinglayer-setter/master/images/example1.png" /&gt;&lt;/p&gt;</summary><category term="unity"></category></entry><entry><title>When to use Script Execution Order</title><link href="http://minhhh.github.io/posts/when-to-use-script-execution-order" rel="alternate"></link><published>2016-10-28T00:01:00-04:00</published><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2016-10-28:posts/when-to-use-script-execution-order</id><summary type="html">&lt;p&gt;Normally we don't control the execution order of &lt;code&gt;MonoBehaviour&lt;/code&gt; scripts, and we should not. However, there are cases where we do want some scripts to be executed before others. Some usecases include:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A &lt;code&gt;Controller&lt;/code&gt; script that should be executed as the entry point to the scene&lt;/li&gt;
&lt;li&gt;Scripts which use &lt;code&gt;LateUpdate&lt;/code&gt; and must be executed in specific order&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For these cases, we will assign an integer number to those scripts in &lt;code&gt;Edit &amp;gt; Project Settings &amp;gt; Script Execution Order&lt;/code&gt;. It's best practice to use large and discrete number such as &lt;code&gt;100&lt;/code&gt;, &lt;code&gt;200&lt;/code&gt;, &lt;code&gt;-100&lt;/code&gt; instead of &lt;code&gt;1&lt;/code&gt;, &lt;code&gt;2&lt;/code&gt;, &lt;code&gt;3&lt;/code&gt; because it would make it easier to insert something in between them when we need to.&lt;/p&gt;
&lt;p&gt;One inconvenience with Unity Editor GUI for &lt;code&gt;Script Execution Order&lt;/code&gt; is that it's a bit hard to find your classes when there are a lot of them. The solution for this is to add &lt;code&gt;Script Execution Order&lt;/code&gt; as meta information to the class using attribute. There's already an implementation for this: &lt;a href="https://github.com/kwnetzwelt/ugb-source/blob/UGB-3.0/UnityGameBase/Core/Editor/GameScriptExecutionOrder.cs"&gt;https://github.com/kwnetzwelt/ugb-source/blob/UGB-3.0/UnityGameBase/Core/Editor/GameScriptExecutionOrder.cs&lt;/a&gt; and &lt;a href="https://github.com/kwnetzwelt/ugb-source/blob/UGB-3.0/UnityGameBase/ScriptExecutionOrderAttribute.cs"&gt;https://github.com/kwnetzwelt/ugb-source/blob/UGB-3.0/UnityGameBase/ScriptExecutionOrderAttribute.cs&lt;/a&gt;. Using these 2 classes, now we can add &lt;code&gt;Script Execution Order&lt;/code&gt; to any class as follows:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[ScriptExecutionOrder(-1000)]&lt;/span&gt;
&lt;span class="err"&gt;public&lt;/span&gt; &lt;span class="err"&gt;abstract&lt;/span&gt; &lt;span class="err"&gt;class&lt;/span&gt; &lt;span class="err"&gt;Game&lt;/span&gt; &lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="err"&gt;MonoBehaviour&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="unity"></category></entry><entry><title>Run specific code when Editor starts</title><link href="http://minhhh.github.io/posts/run-specific-code-when-editor-starts" rel="alternate"></link><published>2016-10-28T00:00:00-04:00</published><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2016-10-28:posts/run-specific-code-when-editor-starts</id><summary type="html">&lt;p&gt;Sometimes we want to execute code whenever we hit &lt;code&gt;Play&lt;/code&gt; button in Unity Editor. The reason for this usually is that we want to enforce some workflow automatically such as getting specific environment information (e.g. git hash, date) and fill it in a prefab or something. We could do these things by creating a Custom Window with a button somewhere, but it feels too manual.&lt;/p&gt;
&lt;p&gt;Fortunately, Unity has offered a simple way to do this, that is &lt;code&gt;InitializeOnLoadAttribute&lt;/code&gt;. You can check an usecase of it at &lt;a href="http://blog.andreimarks.com/2012/08/16/unity-how-to-run-specific-code-only-when-building-out-a-project/"&gt;http://blog.andreimarks.com/2012/08/16/unity-how-to-run-specific-code-only-when-building-out-a-project/&lt;/a&gt;. Beware of a potential problem &lt;a href="http://www.createdbyx.com/post/2013/02/17/Unity-Tip-101-55-%E2%80%93-InitializeOnLoad-ResourcesLoad-gotcha%E2%80%99s.aspx"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Other ways to execute code on startup are listed here &lt;a href="http://www.codingjargames.com/blog/2015/08/04/unity-and-initialization-order/"&gt;http://www.codingjargames.com/blog/2015/08/04/unity-and-initialization-order/&lt;/a&gt;&lt;/p&gt;</summary><category term="unity"></category></entry><entry><title>MVC in Unity</title><link href="http://minhhh.github.io/posts/mvc-in-unity" rel="alternate"></link><published>2016-10-27T00:00:00-04:00</published><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2016-10-27:posts/mvc-in-unity</id><summary type="html">&lt;h1&gt;Some MVC like frameworks in Unity&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="https://forum.unity3d.com/threads/3usd-key-value-observing-lightweight-implementation-of-kvo-for-c.330319/"&gt;Key Value Observing&lt;/a&gt;&lt;/strong&gt; This is a simple implementation of MVC according to his own understandings&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="https://github.com/cgarciae/karma"&gt;Karma&lt;/a&gt;&lt;/strong&gt; Lightweight MVC framework using Zenject DI container. It is inspired from &lt;a href="http://engineering.socialpoint.es/MVC-pattern-unity3d-ui.html"&gt;MODEL VIEW CONTROLLER PATTERN FOR UNITY3D USER INTERFACES&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="https://www.assetstore.unity3d.com/en/#!/content/37466"&gt;Marklight&lt;/a&gt;&lt;/strong&gt; Looks nice. It offers XUML and external editor which might be good for view management, but it also feels too restrictive because you have to follow their way.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="http://chromealex.github.io/Unity3d.UI.Windows/"&gt;Unity3d.UI.Windows&lt;/a&gt;&lt;/strong&gt; Uses a Window system to create UI and layout elements. Try doing too many things: Audio, Tweening&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="https://github.com/strangeioc/strangeioc"&gt;strangeioc&lt;/a&gt;&lt;/strong&gt; Obsolete and not maintained&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="https://www.assetstore.unity3d.com/en/#!/content/14381"&gt;uFrame MVVM&lt;/a&gt;&lt;/strong&gt; It's trying to do too much by offering a graphing/diagramming engine and code generation. I really don't like code generation&lt;/p&gt;
&lt;h1&gt;Discussion&lt;/h1&gt;
&lt;p&gt;It looks like the main advantages of using these MVC frameworks are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Some of them can support theme change&lt;/li&gt;
&lt;li&gt;They have some existing controls so you don't have to implement yourself.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;However, there are several disadvantages:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If you don't need to change theme then definitely you don't need to separate View and ViewModel or Presenter.&lt;/li&gt;
&lt;li&gt;UI usually consists of a big container and a lot of smaller views. Testing small views is easy so you don't need to create separate View class for each. Testing the container is complicated, you want to do it with a test scene in Unity anyway, thus there's no need to try to make an ViewModel interface for testing.&lt;/li&gt;
&lt;li&gt;The examples of Unity MVC implementation in some blogs are usually naive and contrived. As such, they don't scale when you have really complex UI. In addition, they usually confuse between UI and gameplay, so they take example such as hitting enemies or updating their HP bar. MVC is suitable for UIs and maybe some turn-based gameplay, but extending it to a fighting gameplay requires much more than some optimistic guesswork.&lt;/li&gt;
&lt;li&gt;Controller needs to behave according to states, that makes the ViewPresenter or ViewModel also have to replicate those states fully or partly. It's quite difficult to know which should be the common behaviour. A simpler way is to just merge Controller and View/ViewPresenter/ViewModel.&lt;/li&gt;
&lt;/ul&gt;</summary><category term="unity"></category><category term="mvc"></category></entry><entry><title>Unity singleton</title><link href="http://minhhh.github.io/posts/unity-singleton" rel="alternate"></link><published>2016-09-29T00:00:00-04:00</published><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2016-09-29:posts/unity-singleton</id><summary type="html">&lt;p&gt;First of all, please remember that Singletons are generally not recommended due to various obvious disadvantages:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hard to reason about code&lt;/li&gt;
&lt;li&gt;Encourage coupling&lt;/li&gt;
&lt;li&gt;Potential concurrency issue&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;However, in game development it's super useful to have singleton for many types of global system, including but not limited to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sound system&lt;/li&gt;
&lt;li&gt;Time manager&lt;/li&gt;
&lt;li&gt;Localization&lt;/li&gt;
&lt;li&gt;Tutorial&lt;/li&gt;
&lt;li&gt;Login&lt;/li&gt;
&lt;li&gt;Global Notifier&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In this article we will look at some options of Singleton implementation we have in Unity to see what problems they're trying to solve and what assumptions they made.&lt;/p&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;p&gt;Let's first review some requirements for a useful singleton system in Unity.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Singleton class types&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MonoBehavior based: These types of singletons extends MonoBehavior and shows themselves in the scene hierarchy so that you can look at their exposed members. Another reason is you want them to have an &lt;code&gt;Update&lt;/code&gt; function to do something useful in it.&lt;/li&gt;
&lt;li&gt;Non MonoBehavior based: Traditional singletons in any OO languages. These singletons don't need to be inspected in the scene nor do they need &lt;code&gt;Update&lt;/code&gt;. We will not focus on these types of singletons.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Singleton lifecycle types&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Has dependencies: These singletons depend on other system or singletons to exist before they can start&lt;/li&gt;
&lt;li&gt;No dependencies: These singletons can be created anytime without waiting for any other entities.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Singleton configurability types&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Has customized parameters: This is a bit overlap with &lt;code&gt;Has dependencies&lt;/code&gt; singletons. These singletons might: 1. Depend on parameters provided by another system, such as the FileSystem to load certian parameters from disk. OR 2. Need customized parameters or linked prefab. They might be in a prefab themselves such as a LevelManager.&lt;/li&gt;
&lt;li&gt;No customized parameters: These singletons behave the same all the time.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Solutions&lt;/h2&gt;
&lt;p&gt;Fortunately there're already some solutions written in &lt;a href="http://wiki.unity3d.com"&gt;unity3d&lt;/a&gt; so we can review and improve them as we wish.&lt;/p&gt;
&lt;h3&gt;AManagerClass&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://wiki.unity3d.com/index.php/AManagerClass"&gt;AManagerClass&lt;/a&gt; is a standard implementation which supports MonoBehavior-based singletons. In the code, we refer to the singleton like this:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    AManager.instance.Foo ();
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;instance&lt;/code&gt; function implementation is as below:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    public static AManager instance {
        get {
            if (s_Instance == null) {
                // This is where the magic happens.
                //  FindObjectOfType(...) returns the first AManager object in the scene.
                s_Instance =  FindObjectOfType(typeof (AManager)) as AManager;
            }

            // If it is still null, create a new instance
            if (s_Instance == null) {
                GameObject obj = new GameObject(&amp;quot;AManager&amp;quot;);
                s_Instance = obj.AddComponent(typeof (AManager)) as AManager;
                Debug.Log (&amp;quot;Could not locate an AManager object. \ AManager was Generated Automaticly.&amp;quot;);
            }

            return s_Instance;
        }
    }
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There are several problems with &lt;code&gt;AManager&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We have to duplicate it for all singleton class&lt;/li&gt;
&lt;li&gt;It's slow due to the 2 checks&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Surely we can do better!&lt;/p&gt;
&lt;h3&gt;AutoSingletonManager&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://wiki.unity3d.com/index.php/AutoSingletonManager"&gt;AutoSingletonManager&lt;/a&gt; solves the code duplication problem of &lt;code&gt;AManager&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here's the main code&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public abstract class AutoSingletonManager : MonoBehaviour { }

public abstract class AutoSingletonManager&amp;lt;T&amp;gt; : AutoSingletonManager where T : AutoSingletonManager
{
    private static bool Compare&amp;lt;T&amp;gt;(T x, T y) where T : class
    {
        return x == y;
    }

    #region Singleton

    private static T _instance = default(T);

    public static T Instance
    {
        get
        {
            if (!Compare&amp;lt;T&amp;gt;(default(T), _instance)) return _instance;

            InitInstance(true);
            return _instance;
        }
    }

    #endregion

    public void Awake()
    {
        InitInstance(false);
    }

    public static void InitInstance(bool shouldInitManager)
    {
        Type thisType = typeof (T);

        _instance = FindObjectOfType&amp;lt;T&amp;gt;();

        if (Compare&amp;lt;T&amp;gt;(default(T), _instance))
        {
            _instance = new GameObject(thisType.Name).AddComponent&amp;lt;T&amp;gt;();
        }

        //Won&amp;#39;t call InitManager from Awake
        if (shouldInitManager)
        {
            (_instance as AutoSingletonManager&amp;lt;T&amp;gt;).InitManager();
        }
    }

    public virtual void InitManager() { }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The code uses recursive generic definition. This allow us to reuse code by inheriting from the singleton class as well as from &lt;code&gt;MonoBehaviour&lt;/code&gt;. Note that we don't have to make &lt;code&gt;AutoSingletonManager&amp;lt;T&amp;gt;&lt;/code&gt; inherits from &lt;code&gt;AutoSingletonManager&lt;/code&gt;, instead we can make it inherit from our own class which in turn inherits from MonoBehavior.&lt;/p&gt;
&lt;p&gt;It supports initializing the instance from &lt;code&gt;Awake&lt;/code&gt; so maybe it can be used by adding directly it to an object in the scene. However, &lt;code&gt;InitManager&lt;/code&gt; is not called in &lt;code&gt;Awake&lt;/code&gt; so if you call &lt;code&gt;AutoSingletonManager.Instance&lt;/code&gt; after it already awakes then InitManager will never be called.&lt;/p&gt;
&lt;p&gt;Another more subtle draw back is it uses an unnecessary comparison &lt;code&gt;if (!Compare&amp;lt;T&amp;gt;(default(T), _instance)) return _instance;&lt;/code&gt; in the &lt;code&gt;Instance&lt;/code&gt; property, so it's not optimal if you call &lt;code&gt;Instance&lt;/code&gt; in a &lt;code&gt;Update&lt;/code&gt; loop or something similar.&lt;/p&gt;
&lt;p&gt;Surely we can do better than this.&lt;/p&gt;
&lt;h3&gt;Secure UnitySingleton&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://wiki.unity3d.com/index.php/Secure_UnitySingleton"&gt;SecureUnitySingleton&lt;/a&gt; is the last one of the three singleton implementation in &lt;a href="http://wiki.unity3d.com"&gt;unity3d&lt;/a&gt;. It has a very clear idea about the usecases of singletons. There are 3 main supported usecases:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Exists In Scene: Searches the current scene for an object with the singleton component attached to it.&lt;/li&gt;
&lt;li&gt;Loaded From Resources: This type creates an instance of a prefab with the singleton component attached to it from a Resources folder.&lt;/li&gt;
&lt;li&gt;Create on New GameObject: This type creates a new GameObject and attaches a new instance of the singleton component to it.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are several issues with approach:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Even though the code is quite functional, it still suffers the performance penalty from checking too many things in the &lt;code&gt;Instance&lt;/code&gt; property.&lt;/li&gt;
&lt;li&gt;Lack of lifecyle methods. Even though it provides a static &lt;code&gt;DeleteInstance&lt;/code&gt; method, there's no other methods to execute when the instance is created. You might think that &lt;code&gt;Awake&lt;/code&gt; can be used for that purpose, but it not explicit enough that &lt;code&gt;Awake&lt;/code&gt; is called immediately after &lt;code&gt;Instance&lt;/code&gt; is called. Another possible issue is &lt;code&gt;Awake&lt;/code&gt; will not be called when the prefab is disabled, which should never be desirable but can happen due to a mistake from the developers.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is quite good but surely we can do better.&lt;/p&gt;
&lt;h2&gt;Discussions&lt;/h2&gt;
&lt;p&gt;First of all, we realize that non of the above methods take into account concurrency issue. If we care about concurrency we can do something like this:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    public class MySingleton ...
    {
        static MySingleton _instance = null;
        static object singletonLock = new object ();

        public static MySingleton Instance
        {
            get {
                if (_instance != null) {
                    return;
                }

                lock (singletonLock) {
                    if (_instance != null) {
                        return _instance;
                    }

                    var singletonGameObject = new GameObject (&amp;quot;MySingleton&amp;quot;);
                    GameObject.DontDestroyOnLoad (singletonGameObject);
                    _instance = singletonGameObject.AddComponent&amp;lt; MySingleton &amp;gt; ();

                    ... other initialization code
                }

                return _instance;
            }
        }
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;By using a simple double lock pattern, we seemingly solve the "concurrency problem". The question is: Do we need to?. Why you have the concurrency problem with singleton? It's because you want to &lt;code&gt;lazy load&lt;/code&gt; the singleton, i.e. only create it when it is used for the first time. But that's exactly what we want to avoid if we want to achieve smooth gameplay. So what you should do instead is just create the bloody singleton at the beginning and forget about it. Remember, &lt;code&gt;preload&lt;/code&gt; is better than &lt;code&gt;lazy load&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Secondly, I've already mentioned the check for null is redundant if we know we only call the singleton after it's been initialized. In the usecases listed by &lt;code&gt;SecureSingleton&lt;/code&gt;, we see that the singleton is either created by code or already exists in the scene as a &lt;code&gt;GameObject&lt;/code&gt; which is supposed to be configured by designers. In either case, the code to initialize the scene should be a good place for calling the initialization code of the singleton and there's no need for making it sooner.&lt;/p&gt;
&lt;p&gt;So what will happen if the &lt;code&gt;Instance&lt;/code&gt; property is called before you initialize the singleton? Obviously an exception will be thrown and this is an ideal case for using Unity Assert because you will have a nice message in development mode but you can also turn it off in production build.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    public class GameSingleton&amp;lt;T&amp;gt; : MyBaseBehaviour where T : GameSingleton&amp;lt;T&amp;gt;
    {
        ...
        public static T Instance
        {
            get {
                Assert.IsNotNull (instance);
                return instance;
            }
        }
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note that &lt;code&gt;MyBaseBehaviour&lt;/code&gt; class is a class derived from &lt;code&gt;MonoBehaviour&lt;/code&gt; and is customized specifically for our game. For instance, it might have general code for handling &lt;code&gt;Update&lt;/code&gt; or &lt;code&gt;OnDestroy&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;All that is left now is writing a function &lt;code&gt;CreateInstance&lt;/code&gt; for creating the singleton. This function should be called once only at the exact place where you want it. This means we should design it in such a way to discourage it from being called multiple times randomly by some careless developers. Calling &lt;code&gt;CreateInstance&lt;/code&gt; twice should throw an exception. This is better than mindlessly guard the function in the name of "defensive programming". It will look something like this:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;        public static T CreateInstance()
        {
            Assert.IsNull (instance);

            GameObject go = new GameObject(typeof(T).Name);
            instance = go.AddComponent&amp;lt;T&amp;gt;();
            instance.OnCreated();
            DontDestroyOnLoad(go);

            return instance;
        }


        protected virtual void OnCreated()
        {
        }
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here we have a virtual function &lt;code&gt;OnCreated&lt;/code&gt; waiting to be overriden in subclass. To destroy the singleton, we don't have to use fancy static function &lt;code&gt;DeleteInstance&lt;/code&gt;, instead we can just get the singleton gameobject and destroy it like this:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    GameObject.Destroy (MySingleton.Instance.gameObject);
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;When the &lt;code&gt;OnDestroy&lt;/code&gt; function is called, we will set &lt;code&gt;instance&lt;/code&gt; variable to null then allow subclass to do cleanup themselves. The reason why we don't use &lt;code&gt;DeleteInstance&lt;/code&gt; is because we don't want developers who use the API to think there's anything special about destroying the singleton than just destroying the container object.&lt;/p&gt;
&lt;p&gt;Finally, we discuss feature &lt;code&gt;destroy if exists in scene&lt;/code&gt;. In my opinion, this feature accounts for a very small proportion of our usecases. Most of the time we have a singleton already exists in scene, or in some prefab is because we want to use Unity to store game data. But that's should not be the main way to deal with game data. We'd better use off-unity format to store game data, like text or database. If we need to store linked resources we can use Scriptable Object. The point is to not rely too much on data stored in prefab or scene just because you want designers to change them easily, they can also change text file or database much more easily than firing up Unity. Also, merging prefab is harder than merging text data.&lt;/p&gt;
&lt;p&gt;If you really want to use avoid duplicate singleton in scene, we can simply use this piece of code from &lt;code&gt;SecureUnitySingleton&lt;/code&gt;:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    protected virtual void Awake()
    {
        if (InstanceExists &amp;amp;&amp;amp; instance != this)
            Destroy(gameObject);
    }
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Implementation&lt;/h2&gt;
&lt;p&gt;After we've considered different aspect of singletons and what our real usecases are, we finalize our own version Unity singleton as follows&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;using UnityEngine;
using System;
using UnityEngine.Assertions;

public class SimpleSingleton&amp;lt;T&amp;gt; : BaseMonoBehaviour where T : SimpleSingleton&amp;lt;T&amp;gt;
{
    private static T instance;

    public static T Instance {
        get {
            Assert.IsNotNull (instance, &amp;quot;Instance is null. Please call CreateInstance first!&amp;quot;);
            return instance;
        }
    }

    public static T CreateInstance ()
    {
        if (instance != null) {
            Assert.IsNull (instance, &amp;quot;Instance is not null. Please call CreateInstance once only&amp;quot;);
        }

        GameObject go = new GameObject (typeof(T).Name);
        instance = go.AddComponent&amp;lt;T&amp;gt; ();

        instance.OnCreated ();

        return instance;
    }

    protected virtual void OnDestroy ()
    {
        instance = null;
    }

    protected virtual void OnCreated ()
    {
    }

}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then remember to call &lt;code&gt;CreateInstance&lt;/code&gt; when necessary and in appropriate order.&lt;/p&gt;
&lt;p&gt;The code with a sample scene is available on github at &lt;a href="https://github.com/minhhh/unity-singleton"&gt;https://github.com/minhhh/unity-singleton&lt;/a&gt;&lt;/p&gt;</summary><category term="unity"></category><category term="singleton"></category></entry></feed>