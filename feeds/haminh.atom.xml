<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Ha.Minh's Blog</title><link href="http://minhhh.github.io/" rel="alternate"></link><link href="http://minhhh.github.io/feeds/haminh.atom.xml" rel="self"></link><id>http://minhhh.github.io/</id><updated>2018-01-08T00:00:00-05:00</updated><entry><title>Webview with schema</title><link href="http://minhhh.github.io/posts/webview-with-schema" rel="alternate"></link><published>2018-01-08T00:00:00-05:00</published><updated>2018-01-08T00:00:00-05:00</updated><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2018-01-08:posts/webview-with-schema</id><summary type="html">&lt;p&gt;The &lt;a href="https://github.com/gree/unity-webview"&gt;unity-webview&lt;/a&gt; plugin is nice, but one thing is you have to call &lt;code&gt;Unity.call&lt;/code&gt; from Javascript. This is not very convenient for those who design the HTML to quickly assign action related to Unity in hyperlinks.&lt;/p&gt;
&lt;p&gt;So I added support for calling Unity function using normal links in HTML using the schema &lt;code&gt;unity://&lt;/code&gt;. For example, we can put the link: &lt;code&gt;unity://scene?param1=value1&amp;amp;param2=value2&lt;/code&gt;. When clicking this link, the string &lt;code&gt;scene?param1=value1&amp;amp;param2=value2&lt;/code&gt; will be passed to Unity, then we can use &lt;code&gt;WebViewHelper&lt;/code&gt; to parse it furthur into &lt;code&gt;scene&lt;/code&gt;, &lt;code&gt;param&lt;/code&gt;, &lt;code&gt;value1&lt;/code&gt;, &lt;code&gt;param2&lt;/code&gt;, &lt;code&gt;value2&lt;/code&gt; and so on.&lt;/p&gt;</summary><category term="unity"></category></entry><entry><title>Colored Project Folder</title><link href="http://minhhh.github.io/posts/colored-project-folder" rel="alternate"></link><published>2017-11-27T00:00:00-05:00</published><updated>2017-11-27T00:00:00-05:00</updated><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2017-11-27:posts/colored-project-folder</id><summary type="html">&lt;p&gt;&lt;a href="https://github.com/minhhh/ColoredProjectFolders"&gt;ColoredProjectFolders&lt;/a&gt; is a simple plugin that color some special folders in the Project View so that you can find them more easily. It is inspired by &lt;a href="https://www.assetstore.unity3d.com/en/#!/content/50668"&gt;Rainbow Folders&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There's only 1 script &lt;code&gt;Assets/ColoredProjectFolder/Editor/ColoredProjectFolder.cs&lt;/code&gt;. You can modify it to add more hard-coded folder names. You can add or modify folder icons in the same folders. This could be made into a customizable setting, but I feel the usage is the same as just modifying the script directly.&lt;/p&gt;
&lt;p&gt;&lt;img alt="screenshot" src="https://raw.githubusercontent.com/minhhh/ColoredProjectFolders/master/imgs/screenshot.png" /&gt;&lt;/p&gt;</summary><category term="unity"></category></entry><entry><title>Test AssetBundle in Unity 2017</title><link href="http://minhhh.github.io/posts/test-assetbundle-in-unity-2017" rel="alternate"></link><published>2017-11-14T00:00:00-05:00</published><updated>2017-11-14T00:00:00-05:00</updated><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2017-11-14:posts/test-assetbundle-in-unity-2017</id><summary type="html">&lt;p&gt;With Unity 2017, we can use 2 tools to build Asset Bundle: &lt;a href="https://github.com/Unity-Technologies/AssetBundles-Browser"&gt;AssetBundles-Browser&lt;/a&gt; and &lt;a href="https://github.com/unity3d-jp/AssetGraph"&gt;AssetGraph&lt;/a&gt;. I've created a test project &lt;a href="https://github.com/minhhh/unity-test2017-assetbundle"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;General flow&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Setup &lt;code&gt;Asset Bundle Graph&lt;/code&gt; to build AssetBundles&lt;/li&gt;
&lt;li&gt;Check AssetBundles with AssetBundleBrowser&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Setup Asset Bundle Graph&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The most basic setup consists of 4 nodes:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Load From Directory&lt;/li&gt;
&lt;li&gt;Group By File Path&lt;/li&gt;
&lt;li&gt;Configure Bundle From Group&lt;/li&gt;
&lt;li&gt;Build Asset Bundles&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In step 1, we create a folder that represents all resources related to an entity in our system, this could be a character or an enemy NPC. In step 2 we want to create one AssetBundle for each of the sub-folders in the parent folder. Each AssetBundle represents an aspect of the entity, such as by resource types: textures, materials, animations, or by enemy types: fast, slow. Step 3 applies naming convention to the AssetBundle's name. Step 4 is obvious, building the final asset bundles.&lt;/p&gt;
&lt;p&gt;There are 2 examples of Asset Bundle Graph (ABG) in &lt;code&gt;Assets/Tests&lt;/code&gt;: &lt;code&gt;ABG_with_regex&lt;/code&gt; and &lt;code&gt;ABG_with_wildcard&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In the &lt;code&gt;ABG_with_regex&lt;/code&gt; example, we used the pattern &lt;code&gt;/Missile\/(.*)/&lt;/code&gt;. There are several issues with this approach:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;It's not real regex since we cannot use &lt;code&gt;(.+)&lt;/code&gt; and we are forced to use &lt;code&gt;(.*)&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;It creates group for sub-sub-folder. For example, it creates a group named &lt;code&gt;Object/Materials&lt;/code&gt; instead of just putting it inside group &lt;code&gt;Object&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The main blocker issue is the error &lt;code&gt;Moving file failed&lt;/code&gt; when building AssetBundles&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In the &lt;code&gt;ABG_with_wildcard&lt;/code&gt; example, the group is created correctly for each of the sub-folders. There is still some issues:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We cannot have &lt;code&gt;.&lt;/code&gt; in the group name because if we do then the part after &lt;code&gt;.&lt;/code&gt; will be considered variant.&lt;/li&gt;
&lt;li&gt;We cannot have variants of sub-folder, we have to use the folder name itself as variant&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This is just a rough test and obviously we require much more for an usable workflow.&lt;/p&gt;</summary><category term="unity"></category><category term="assetbundle"></category></entry><entry><title>Unity plugin USplitAlpha</title><link href="http://minhhh.github.io/posts/unity-plugin-usplitalpha" rel="alternate"></link><published>2017-10-26T00:00:00-04:00</published><updated>2017-10-26T00:00:00-04:00</updated><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2017-10-26:posts/unity-plugin-usplitalpha</id><summary type="html">&lt;p&gt;Last time I discussed about Unity texture compression I've mentioned that using &lt;code&gt;ETC1&lt;/code&gt; + Alpha channel is the best format because it provides the best build size and memory footprint in most cases. However, Unity does not support split alpha channel for iOS. Recently I had sometime to revisit this and wrote a simple plugin to support split alpha channel on both Android and iOS devices. The plugin is called &lt;a href="https://github.com/minhhh/USplitAlpha"&gt;USplitAlpha&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Apparently, the split alpha mechanism is very straightforward so different team will have different workflows that suit them best. For reference, there are some other solutions on github:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/DragonBones/DragonBoneToUnity/blob/2609886dff00bb503c1795a01aeda7481e28cbd3/Assets/Demo/_Script/Editor/SplitAlpha.cs"&gt;https://github.com/DragonBones/DragonBoneToUnity/blob/2609886dff00bb503c1795a01aeda7481e28cbd3/Assets/Demo/_Script/Editor/SplitAlpha.cs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/TalosGame/BetterFramework/blob/3eda3261ccc582041aa5e3eaced9089dd4440f75/Assets/Editor/Compression/TextureCompression.cs"&gt;https://github.com/TalosGame/BetterFramework/blob/3eda3261ccc582041aa5e3eaced9089dd4440f75/Assets/Editor/Compression/TextureCompression.cs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/WakakaYixixi/Unity_extension/blob/c0ba7936f96e0da77a4138249275fc1d89cdebed/Assets/Utils/Editor/SplitAlpha.cs"&gt;https://github.com/WakakaYixixi/Unity_extension/blob/c0ba7936f96e0da77a4138249275fc1d89cdebed/Assets/Utils/Editor/SplitAlpha.cs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="unity"></category></entry><entry><title>Loading Sprites dynamically in Unity</title><link href="http://minhhh.github.io/posts/loading-sprites-dynamically-in-unity" rel="alternate"></link><published>2017-08-06T00:00:00-04:00</published><updated>2017-08-06T00:00:00-04:00</updated><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2017-08-06:posts/loading-sprites-dynamically-in-unity</id><summary type="html">&lt;p&gt;Loading sprites dynamically from code is one of the most basic tasks that we have to do. However, it seems that there's not a standard way to to this in Unity. This guide will look at several cases of loading sprites dynamically and their solutions&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. Loading a separate sprite&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Imagine you have 4 attribute icons: fire, water, earth and wind. You will have to load the correct icon for the correct character. The easiest way to do this is to put 4 icon images: fire.png, water.png, earth.png and wind.png inside a folder in &lt;code&gt;Resources&lt;/code&gt;, such as &lt;code&gt;Resources/attribute_icons/&lt;/code&gt;. Then loading a sprite is as simple as this:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Sprite sprite = Resources.Load (&amp;quot;attribute_icons/fire&amp;quot;, typeof(Sprite)) as Sprite;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In reality, we almost never do this. The reason is we need to batch drawcall, so we cannot afford to have separate drawcall for each of these small icon images. But if you put the sprites inside the &lt;code&gt;Resources&lt;/code&gt; folder, you cannot pack them with Unity's Sprite Packer. If you put them outside of the &lt;code&gt;Resources&lt;/code&gt; folder, you cannot load them dynamically with Resources.Load. This leads to the next solutions.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. Packing spritesheet with external tools&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Unity has a Sprite import mode called &lt;code&gt;Multiple&lt;/code&gt;, where you can slice a Sprite atlas or Spritesheet into multiple sprites. The sprites can then be load dynamically like this:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;// suppose the texturesheet is in Resources/attributeicons.png
Sprite[] sprites = Resources.LoadAll &amp;lt;Sprite&amp;gt; (&amp;quot;attributeicons&amp;quot;);
// Find the correct sprite to use by Sprite.name
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Obviously, you would not want to create the Sprite atlas and slice sprites by hand in a real game (not a tutorial). Therefore, you will use an external tools to create the Sprite atlas. There are several solutions:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Write your own texture packer (or use an existing one you can easily find in github). Remember to export the UVs information to text, or json and copy it to Unity. In Unity, you have to write an Editor extension to slice the Sprite atlas using the Uvs information in the text/json file. I have a tool and Unity code for this but I cannot publish them due to copyright. They're super easy to create though.&lt;/li&gt;
&lt;li&gt;Use a full solution inside Unity. You will have the original textures in Unity, then the Sprite atlas will be created inside Unity easily by dragging, dropping sprites to the tools, or some other similar method. You can try the asset &lt;a href="https://www.assetstore.unity3d.com/en/#!/content/23276"&gt;SimpleSpritePacker&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Use &lt;a href="https://www.codeandweb.com/texturepacker"&gt;TexturePacker&lt;/a&gt;. This is the best solution since it creates much more optimized sprites. But it costs 40 dollars.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;3. Packing sprites using Unity Sprite Packer&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;One big disadvantage with using  external tools is that you cannot move sprites easily. If you move a sprite from one path to another, you will have to update the path in all objects that use that sprite. Using Unity sprite packer, you can do it like so:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Mark a Sprite with a packing tag&lt;/li&gt;
&lt;li&gt;Use the sprite in a GameObject or Prefab freely&lt;/li&gt;
&lt;li&gt;A spritesheet will be created by Unity automatically. The sprite will be loaded automatically from that sprite sheet.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So this is perfect, but you cannot load sprite dynamically anymore? There're 2 solution for this problem.&lt;/p&gt;
&lt;p&gt;First, you can add all the needed sprites to whatever objects using them, then enable/disable the correct ones by code. This solution works for small projects but it does not scale.&lt;/p&gt;
&lt;p&gt;The second solution is to use a tool that automatically load all the sprites into a prefab that can be loaded dynamically in runtime. A sample of this solution is https://github.com/minhhh/UBootstrap.SpriteCollection&lt;/p&gt;
&lt;p&gt;&lt;img alt="Spritecollection example" src="https://raw.githubusercontent.com/minhhh/UBootstrap.SpriteCollection/master/imgs/img1.png" /&gt;&lt;/p&gt;
&lt;p&gt;Note that sometimes this option is not possible. For instance, you have to use a special material and shader, then the material might not work with Unity Sprite Packer. In one project that I worked on, we have custom SplitAlpha shaders that do not work with Unity Sprite Packer and SpriteRenderer. In those cases, you have to use solution 2.&lt;/p&gt;</summary><category term="unity"></category></entry><entry><title>Unity Asset Reference Finder and Missing Script Finder</title><link href="http://minhhh.github.io/posts/unity-asset-reference-finder-and-missing-script-finder" rel="alternate"></link><published>2017-07-10T00:00:00-04:00</published><updated>2017-07-10T00:00:00-04:00</updated><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2017-07-10:posts/unity-asset-reference-finder-and-missing-script-finder</id><summary type="html">&lt;p&gt;When using Unity, you often have to check which GameObject or Prefabs are using a certain image or other types of assets. There's a convenient tool for you to check which objects are using a certain asset: &lt;a href="https://github.com/minhhh/UBootstrap.Core/blob/master/Assets/UBootstrap.Core/Plugins/EditorExtension/Editor/AssetReferencerFinder.cs"&gt;AssetReferenceFinder&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Another tool called &lt;a href="https://github.com/minhhh/UBootstrap.Core/blob/master/Assets/UBootstrap.Core/Plugins/EditorExtension/Editor/MissingScriptFinder.cs"&gt;MissingScriptFinder&lt;/a&gt; helps you find missing scripts in scene due to refactoring&lt;/p&gt;</summary><category term="unity"></category></entry><entry><title>Unity Prefab Best Practices</title><link href="http://minhhh.github.io/posts/unity-prefab-best-practices" rel="alternate"></link><published>2017-07-06T00:00:00-04:00</published><updated>2017-07-06T00:00:00-04:00</updated><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2017-07-06:posts/unity-prefab-best-practices</id><summary type="html">&lt;p&gt;&lt;strong&gt;Link prefabs to prefabs; do not link instances to instances&lt;/strong&gt; This is from &lt;a href="http://devmag.org.za/2012/07/12/50-tips-for-working-with-unity-best-practices/"&gt;50 Tips for Working with Unity&lt;/a&gt;
&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Use GameObject.Find to establish links between instances&lt;/strong&gt; if you have to. It's best to not having to establish links between instances and use prebabs instead. &lt;strong&gt;Don't&lt;/strong&gt; link instance to instance like this article suggests (https://akbiggs.silvrback.com/please-stop-using-gameobject-find)
&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Apart from UI component, refrain from using GameObject.Find&lt;/strong&gt; because there are many better alternatives such as using interfaces, dependency injection, design patterns and so on.
&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Use Editor script to warn you of missing links in the Editor&lt;/strong&gt; like this one: https://github.com/redbluegames/unity-notnullattribute. However, it will not work when you use the same prefab for multiple gameplay modes, each with its own set of required component. In that case, you will have to use inheritance or duplicate code in a new component.
&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Remove prefab links from scene object&lt;/strong&gt; (https://github.com/minhhh/unity-tips/blob/master/README.md#tips-using-editors)
&lt;br/&gt;&lt;/p&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://devmag.org.za/2012/07/12/50-tips-for-working-with-unity-best-practices/"&gt;50 Tips for Working with Unity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://akbiggs.silvrback.com/please-stop-using-gameobject-find"&gt;Unity Devs, stop using GameObject.Find!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="unity"></category><category term="prefab"></category></entry><entry><title>How to backup your gmail account</title><link href="http://minhhh.github.io/posts/how-to-backup-your-gmail-account" rel="alternate"></link><published>2017-05-26T00:00:00-04:00</published><updated>2017-05-26T00:00:00-04:00</updated><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2017-05-26:posts/how-to-backup-your-gmail-account</id><summary type="html">&lt;p&gt;&lt;strong&gt;&lt;a href="http://www.zdnet.com/article/ultimate-guide-to-gmail-backup/"&gt;The 2017 ultimate guide to Gmail backup&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If you want to backup mail from one gmail to another gmail you can use the following software:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/jay0lee/got-your-back/"&gt;got-your-back&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://gmvault.org"&gt;gmvault&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="gmail"></category></entry><entry><title>Introducing UAsync</title><link href="http://minhhh.github.io/posts/introducing-uasync" rel="alternate"></link><published>2017-05-08T00:00:00-04:00</published><updated>2017-05-08T00:00:00-04:00</updated><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2017-05-08:posts/introducing-uasync</id><summary type="html">&lt;p&gt;Nowadays, if you want to use a structured way for your flow control in Unity, you basically have 4 options:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Write your own &lt;code&gt;Task&lt;/code&gt; library (which might use coroutines)&lt;/li&gt;
&lt;li&gt;Use coroutines. This means that you &lt;code&gt;StartCoroutine&lt;/code&gt; in a lot of places and insert try catch code when errors occur. This works for small games. For larger games, not being able to catch nested exception is a big NO NO.&lt;/li&gt;
&lt;li&gt;Use &lt;a href="https://github.com/Real-Serious-Games/C-Sharp-Promise"&gt;C-Sharp-Promise&lt;/a&gt;. If you're familiar with JS promises, this comes natural to you. It handles exceptions pretty well. You can try combining this with coroutine, but the API is probably verbose.&lt;/li&gt;
&lt;li&gt;Use &lt;a href="https://github.com/neuecc/UniRx"&gt;UniRx&lt;/a&gt;. This is simply the best choice because it supports control flow, exception handling, progress report and coroutine.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So we should always use &lt;code&gt;UniRx&lt;/code&gt;, right? Unfortunately, sometimes the efforts to use &lt;code&gt;UniRx&lt;/code&gt; is just too much that we can't afford. In that case, it's better to use existing solution, but with more robust code. (&lt;code&gt;C-Sharp-Promise&lt;/code&gt; is ofcourse another option, but it is not compatible with coroutine and existing coroutine code without some custom modifications).&lt;/p&gt;
&lt;p&gt;&lt;code&gt;UAsync&lt;/code&gt; &lt;a href="https://github.com/minhhh/UAsync"&gt;Unity Async&lt;/a&gt; is a library that helps you write Unity code using callback style of &lt;code&gt;Node.js&lt;/code&gt; and &lt;code&gt;async&lt;/code&gt; library. The &lt;code&gt;TaskRunner&lt;/code&gt; part is taken from &lt;a href="https://github.com/sebas77/Svelto.Tasks"&gt;Svelto.Tasks&lt;/a&gt; with some modifications to make it support catching exceptions and returning errors. The &lt;code&gt;UAsync&lt;/code&gt; class adds several functions on top of &lt;code&gt;TaskRunner&lt;/code&gt; to support execution of tasks in parallel or serial with returned results at the end of the execution. For the moment, it does not support &lt;code&gt;Thread&lt;/code&gt; because it focuses on control flow, not enhancing performance by distributing work to multiple cores.&lt;/p&gt;
&lt;p&gt;To include UAsync into your project, you can use &lt;code&gt;npm&lt;/code&gt; method of unity package management described &lt;a href="https://github.com/minhhh/UBootstrap"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;TaskRunner&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;First of all, it's quite well-known that 2 main disadvantages of coroutine are: 1) it cannot return value and 2) it cannot handle nested exception. There's a simple way to wrap coroutine so we can support those 2 features, as detailed in &lt;a href="http://www.zingweb.com/blog/2013/02/05/unity-coroutine-wrapper"&gt;this article&lt;/a&gt;. &lt;code&gt;TaskRunner&lt;/code&gt; also supports returning value and catching exceptions using callback style. You use it like so:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;using UAsync;
...
TaskRunner.Instance.Run (task, onComplete);
// public TaskRoutine Run (IEnumerator task, CallbackDelegate onComplete = null)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In the code above, &lt;code&gt;task&lt;/code&gt; is a &lt;code&gt;IEnumerator&lt;/code&gt; and &lt;code&gt;onComplete&lt;/code&gt; is a delegate of type &lt;code&gt;CallbackDelegate (object err = null, object res = null)&lt;/code&gt;. Any exceptions occur will be passed via &lt;code&gt;err&lt;/code&gt;. The last &lt;code&gt;yield&lt;/code&gt; in &lt;code&gt;task&lt;/code&gt; will be passed to &lt;code&gt;res&lt;/code&gt;. You might want to use &lt;code&gt;TaskRunner.Instance.Run&lt;/code&gt; when you have a sequence of actions to be performed in a fixed order.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;UAsync&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;UAsync&lt;/code&gt; is a port of Node's &lt;code&gt;async&lt;/code&gt; module to Unity environment. It can be used to turn a set of synchronous functions or coroutine to run sequentially or concurrently. Even though you can already run a set of tasks sequentially using coroutine, passing values between these tasks are proven to be difficult. You have to use external variables to hold the return values which creates coupling between functions, and it's not convenient. &lt;code&gt;UAsync&lt;/code&gt; can solve this problem by allowing coroutine to return value, as well as catching exceptions if any.&lt;/p&gt;
&lt;p&gt;Let's look at an example:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;var series =
    UAsync.Async.Series (
        SeriesFunc.FromAction (&amp;quot;one&amp;quot;, SeriesFunc1),
        SeriesFunc.FromEnumerator (&amp;quot;two&amp;quot;, SeriesFunc2),
        SeriesFunc.FromAction (&amp;quot;three&amp;quot;, SeriesFunc3),
        UAsyncFinalFunc.From ((object err, Dictionary&amp;lt;string, object&amp;gt; res) =&amp;gt; {
            Debug.Log (&amp;quot;Finish &amp;quot; + err);
            if (err == null) {
                Debug.Log (&amp;quot;res &amp;quot; + res [&amp;quot;one&amp;quot;] + &amp;quot; &amp;quot; + res [&amp;quot;two&amp;quot;] + &amp;quot; &amp;quot; + res [&amp;quot;three&amp;quot;]);
            }
        })
    );

void SeriesFunc1 (CallbackDelegate cb, Dictionary&amp;lt;string, object&amp;gt; res)
{
    cb (null, 100);
}

IEnumerator SeriesFunc2 (CallbackDelegate cb, Dictionary&amp;lt;string, object&amp;gt; res)
{
    yield return new WaitForSeconds (1);
    cb (null, 200);
}

void SeriesFunc3 (CallbackDelegate cb, Dictionary&amp;lt;string, object&amp;gt; res)
{
    cb (null, 300);
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here, &lt;code&gt;SeriesFunc.FromAction&lt;/code&gt; and &lt;code&gt;SeriesFunc.FromEnumerator&lt;/code&gt; are just convenient functions to wrap synchronous functions and coroutines. Each of the functions &lt;code&gt;SeriesFunc1&lt;/code&gt;, &lt;code&gt;SeriesFunc2&lt;/code&gt; and &lt;code&gt;SeriesFunc3&lt;/code&gt; will receive a callback parameter and a &lt;code&gt;res&lt;/code&gt; parameter. To complete the execution of each function, you must call &lt;code&gt;cb&lt;/code&gt; with 2 parameters: &lt;code&gt;err&lt;/code&gt; representing the error, and &lt;code&gt;result&lt;/code&gt; representing the returned value. In the code above, there is no error. If any of the code in those function throws exception, cb will also be called automatically with the exception as the first parameter.&lt;/p&gt;
&lt;p&gt;The second parameter passed to each of the functions &lt;code&gt;SeriesFunc1&lt;/code&gt;, &lt;code&gt;SeriesFunc2&lt;/code&gt; and &lt;code&gt;SeriesFunc3&lt;/code&gt; is quite important. It is a dicionary which contains all the results from previous functions, so &lt;code&gt;SeriesFunc2&lt;/code&gt; will receive result from &lt;code&gt;SeriesFunc1&lt;/code&gt;, &lt;code&gt;SeriesFunc3&lt;/code&gt; will receive results from &lt;code&gt;SeriesFunc1&lt;/code&gt; and &lt;code&gt;SeriesFunc2&lt;/code&gt;. The key of the dictionary are declared when creating the series, e.g. SeriesFunc.FromAction ("one", SeriesFunc1) means the result of SeriesFunc1 will have key "one". This is a powerful way to pass results between functions without creating high coupling between them.&lt;/p&gt;
&lt;p&gt;After all the functions have been executed, there is a final function &lt;code&gt;UAsyncFinalFunc&lt;/code&gt; which will receive all the results and execute some logic accordingly. If any of the functions above throws exceptions or calls callback with a &lt;code&gt;err&lt;/code&gt; parameter, the error will be passed to the final function to deal with.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;UAsync.Async.Parallel&lt;/code&gt; function is similar to the &lt;code&gt;Series&lt;/code&gt; function, except that there will be no results from previous functions since they're executed concurrently.&lt;/p&gt;
&lt;p&gt;Finally, you can cancel a running sequence once it's started. This is not obvious with coroutine because even though you can call &lt;code&gt;MonoBehaviour.StopCoroutine&lt;/code&gt;&lt;/p&gt;</summary><category term="unity"></category><category term="uasync"></category><category term="coroutine"></category></entry><entry><title>Using Unity Assert</title><link href="http://minhhh.github.io/posts/using-unity-assert" rel="alternate"></link><published>2017-04-25T00:00:00-04:00</published><updated>2017-04-25T00:00:00-04:00</updated><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2017-04-25:posts/using-unity-assert</id><summary type="html">&lt;p&gt;Even though Unity's &lt;a href="http://blog.theknightsofunity.com/unity-5-1-assertion-library/"&gt;UnityEngine.Assertions&lt;/a&gt; is great, it has two major disadvantages&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We cannot extend it&lt;/li&gt;
&lt;li&gt;It does not have the concept of error code. Using error code, we can force developers to explicitly think about how they will categorize the error so it's easier to analyze the error when the game crashes&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Therefore I put together a simple script to do assertion here: &lt;a href="https://github.com/minhhh/UBootstrap.Assert"&gt;https://github.com/minhhh/UBootstrap.Assert&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Our &lt;code&gt;CUSTOM_ASSERT&lt;/code&gt; class provides the almost the same interface as &lt;code&gt;UnityEngine.Assertions.Assert&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;IsTrue (bool condition, int errorCode, string message = "", params object[] args)&lt;/code&gt; - Asserts that the condition is true.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IsFalse (bool condition, int errorCode, string message = "", params object[] args)&lt;/code&gt; - Assert that condition is false&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IsNull (object value, int errorCode, string message = "", params object[] args)&lt;/code&gt; - Assert that value is null.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IsNotNull (object value, int errorCode, string message = "", params object[] args)&lt;/code&gt; - Assert that value is not null.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;AreEqual&amp;lt;T&amp;gt; (T expected, T actual, int errorCode, string message = "", params object[] args)&lt;/code&gt; - Assert that the values are equal.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;AreNotEqual&amp;lt;T&amp;gt; (T expected, T actual, int errorCode, string message = "", params object[] args)&lt;/code&gt; - Assert that the values are not equal.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;AreApproximatelyEqual (float expected, float actual, int errorCode, float tolerance, string message = "", params object[] args)&lt;/code&gt; - Asserts that the values are approximately equal. An absolute error check is used for approximate equality check (|a-b| &amp;lt; tolerance). Default tolerance is 0.00001f.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;AreNotApproximatelyEqual (float expected, float actual, int errorCode, float tolerance, string message = "", params object[] args)&lt;/code&gt; - Asserts that the values are approximately not equal. An absolute error check is used for approximate equality check (|a-b| &amp;lt; tolerance). Default tolerance is 0.00001f.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Fail (int errorCode, string message = "", params object[] args)&lt;/code&gt; - Just fail the assertion.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The reason it's named &lt;code&gt;CUSTOM_ASSERT&lt;/code&gt; is to make it look like a macro definition. In fact, you have to define a macro named &lt;code&gt;CUSTOM_ASSERT&lt;/code&gt; to include it in your build, similarly to the macro &lt;code&gt;UNITY_ASSERTIONS&lt;/code&gt; from Unity.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;CUSTOM_ASSERT&lt;/code&gt; class is defined as a partial class. It is expected that you define your part of the partial class, so that you can provide some default error code for common functions. You can find an example in &lt;code&gt;Assets/MY_ASSERT.cs&lt;/code&gt;. It is also recommended that you define your own sets of error codes.&lt;/p&gt;
&lt;p&gt;There is no way to include the assertion without throwing exception, because it does not make sense to assert something that does not crash the build if its not true. Those set of errors belong to a logger, not an assert utility.&lt;/p&gt;</summary><category term="unity"></category><category term="assert"></category></entry><entry><title>Resources for learning Blender</title><link href="http://minhhh.github.io/posts/resources-for-learning-blender" rel="alternate"></link><published>2017-03-21T00:00:00-04:00</published><updated>2017-03-21T00:00:00-04:00</updated><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2017-03-21:posts/resources-for-learning-blender</id><summary type="html">&lt;p&gt;This is collection of resources for learning Blender from the beginning&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://gryllus.net/Blender/3D.html"&gt;Blender 3D Design Course&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=JmVxCDZ6lEM"&gt;Unity Mega-Tutorial: Blender 3D Modelling Tricks, High-Speed Physics, and Real-Time Reflections!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=lY6KPrc4uMw&amp;amp;list=PLda3VoSoc_TR7X7wfblBGiRz-bvhKpGkS"&gt;Blender 2.7 Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/gamedev/comments/43kes4/learning_3d_modelling_as_a_single_indie_developer/"&gt;Learning 3D modelling as a single indie developer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.blenderguru.com/articles/12-useful-blender-addons-everyone-should-use/"&gt;12 (More) Blender Addons Everyone Should Use&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Low poly&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=w38wzDREnKk&amp;amp;index=3&amp;amp;list=PLv1DCiCg2KQLpl6mzDHsWZ70016emDfUu"&gt;Low Poly Planet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=_pK2Ya0CMww"&gt;Learn to Create Geometric Assets in Blender&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=oDWfB9JAZ9s"&gt;GAME ASSET TUTORIAL&lt;/a&gt; In this Video Tutorial series for Beginners, we will create Low Poly Barrel Game Asset using Blender, Photoshop, and Unity.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=JjW6r10Mlqs"&gt;Create any low poly animal | Blender | 10 mins&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="blender"></category></entry><entry><title>Unity Jelly Physics</title><link href="http://minhhh.github.io/posts/unity-jelly-physics" rel="alternate"></link><published>2017-03-14T00:00:00-04:00</published><updated>2017-03-14T00:00:00-04:00</updated><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2017-03-14:posts/unity-jelly-physics</id><summary type="html">&lt;p&gt;There are several plugins to help creating a jelly like physics in Unity:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.assetstore.unity3d.com/en/#!/content/13327"&gt;Jelly Sprites&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.assetstore.unity3d.com/en/#!/content/15685"&gt;Jelly Mesh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.assetstore.unity3d.com/en/#!/content/68777"&gt;2D Soft Body&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/kwanchangnim/Jello-Physics"&gt;Jello Physics&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="unity"></category><category term="jelly"></category></entry><entry><title>Unity Mesh Morphing</title><link href="http://minhhh.github.io/posts/unity-mesh-morphing" rel="alternate"></link><published>2017-03-09T00:00:00-05:00</published><updated>2017-03-09T00:00:00-05:00</updated><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2017-03-09:posts/unity-mesh-morphing</id><summary type="html">&lt;p&gt;There are several ways to do mesh morphing in Unity.&lt;/p&gt;
&lt;p&gt;One way is to use a commercial plugins like &lt;a href="https://www.assetstore.unity3d.com/en/#!/content/3428"&gt;Megafier&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You can use a simple script to do mesh morphing as well: https://github.com/minhhh/unity-meshmorphing. Remember to make all your mesh have the same number of vertices.&lt;/p&gt;</summary><category term="unity"></category><category term="mesh"></category></entry><entry><title>How to force Gmail to check your POP3 account as often as possible</title><link href="http://minhhh.github.io/posts/how-to-force-gmail-to-check-your-pop3-account-as-often-as-possible" rel="alternate"></link><published>2017-02-27T00:00:00-05:00</published><updated>2017-02-27T00:00:00-05:00</updated><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2017-02-27:posts/how-to-force-gmail-to-check-your-pop3-account-as-often-as-possible</id><summary type="html">&lt;p&gt;&lt;a href="https://web.archive.org/web/20160306102134/http://rakowski.pro/how-to-force-gmail-to-check-your-pop3-account-as-often-as-possible/"&gt;How to force Gmail to check your POP3 account as often as possible&lt;/a&gt;&lt;/p&gt;</summary><category term="gmail"></category></entry><entry><title>Unity Object Pooling</title><link href="http://minhhh.github.io/posts/unity-object-pooling" rel="alternate"></link><published>2017-02-24T00:00:00-05:00</published><updated>2017-02-24T00:00:00-05:00</updated><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2017-02-24:posts/unity-object-pooling</id><summary type="html">&lt;p&gt;An object pool provides an efficient way to reuse objects, and thus keep the memory foot print of all dynamically created objects within fixed bounds. This is crucial for maintianing consistent framerates in realtime games (especially on mobile), as frequent garbage collection spikes would likley lead to inconsistent performance.&lt;/p&gt;
&lt;p&gt;Implementing object pool is quite straight forward. There are several open-source solutions already so don't bother looking into AssetStore.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/minhhh/unity-leanpool"&gt;Leanpool&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/thefuntastic/unity-object-pool"&gt;Unity Object Pool&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/prime31/RecyclerKit"&gt;RecyclerKit&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="unity"></category><category term="pool"></category></entry><entry><title>Unity Unit testing</title><link href="http://minhhh.github.io/posts/unity-unit-testing" rel="alternate"></link><published>2017-02-21T00:00:00-05:00</published><updated>2017-02-21T00:00:00-05:00</updated><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2017-02-21:posts/unity-unit-testing</id><summary type="html">&lt;p&gt;&lt;a href="https://bitbucket.org/Unity-Technologies/unitytesttools/wiki/IntegrationTestsRunner"&gt;How to use the Integration Test Framework&lt;/a&gt; is the guide from offical repo&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://ilkinulas.github.io/programming/unity/2016/03/12/integration-tests-unity3d.html"&gt;Writing Integration Tests For Unity3D Projects&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Suggests writing dynamic integration test on real game scene. This might be hard to maintain if you don't have discipline.&lt;/li&gt;
&lt;/ul&gt;</summary><category term="unity"></category><category term="unittest"></category></entry><entry><title>Property Backing Field Drawer</title><link href="http://minhhh.github.io/posts/property-backing-field-drawer" rel="alternate"></link><published>2017-02-14T00:00:00-05:00</published><updated>2017-02-14T00:00:00-05:00</updated><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2017-02-14:posts/property-backing-field-drawer</id><summary type="html">&lt;p&gt;Property is not supported by Unity Editor by default, fortunately, there is a free plugin called &lt;a href="https://www.assetstore.unity3d.com/en/#!/content/18253"&gt;Property Backing Field Drawer&lt;/a&gt; that supports drawing custom editor for properties. The plugin's code is extracted &lt;a href="https://github.com/minhhh/property-backing-field-drawer"&gt;here&lt;/a&gt; for easy inclusion in your project.&lt;/p&gt;</summary><category term="unity"></category><category term="property"></category></entry><entry><title>Better Unity workflow with command line</title><link href="http://minhhh.github.io/posts/better-unity-workflow-with-command-line" rel="alternate"></link><published>2017-02-02T00:00:00-05:00</published><updated>2017-02-02T00:00:00-05:00</updated><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2017-02-02:posts/better-unity-workflow-with-command-line</id><summary type="html">&lt;p&gt;To do certain tasks for our game workflow, we will need to use other external tools that can only called from the command line. One way to do this is to switch back and forth between Unity and the command line, obviously this is not the best way. Our goal is to use only 1 click, or one action to execute a series of tasks in Unity and in the command line.&lt;/p&gt;
&lt;p&gt;There are 2 ways to achieve this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create an editor script and call the command line, along with other Editor scripts. This is good if you want to stay in Unity all the time.&lt;/li&gt;
&lt;li&gt;Create a command line script that call other command line scripts and some Unity scripts. This is good for continuous integration.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To launch Unity from the command line, look at these references:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://effectiveunity.com/articles/making-most-of-unitys-command-line.html"&gt;Making most of Unity's command line&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.unity3d.com/Manual/CommandLineArguments.html"&gt;Command line arguments&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To run command line scripts from Unity, look at these references:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://web.archive.org/web/20170202150301/https://effectiveunity.com/articles/making-most-of-unitys-command-line.html"&gt;Running command line action through C# script&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="unity"></category><category term="commandline"></category></entry><entry><title>Best Practices in Persisting Player Data on Mobile</title><link href="http://minhhh.github.io/posts/best-practices-in-persisting-player-data-on-mobile" rel="alternate"></link><published>2017-02-01T00:00:00-05:00</published><updated>2017-02-01T00:00:00-05:00</updated><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2017-02-01:posts/best-practices-in-persisting-player-data-on-mobile</id><summary type="html">&lt;p&gt;Original talk: &lt;a href="https://www.youtube.com/watch?v=_hAzWgQupms"&gt;Unite 2016 - Best Practices in Persisting Player Data on Mobile&lt;/a&gt;&lt;/p&gt;</summary><category term="unity"></category></entry><entry><title>Using Webp texture format in Unity</title><link href="http://minhhh.github.io/posts/using-webp-texture-format-in-unity" rel="alternate"></link><published>2017-01-18T00:00:00-05:00</published><updated>2017-01-18T00:00:00-05:00</updated><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2017-01-18:posts/using-webp-texture-format-in-unity</id><summary type="html">&lt;p&gt;Webp is a very optimized image format. It will produce smaller image size with almost the same quality as other compression format such as: &lt;code&gt;ETC2&lt;/code&gt;, &lt;code&gt;DXT5&lt;/code&gt;, &lt;code&gt;ETC1&lt;/code&gt;, &lt;code&gt;PVRTC&lt;/code&gt;. Below is some comparison between &lt;code&gt;Webp&lt;/code&gt; and popular compression format in Unity&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;512x512 Image&lt;/th&gt;
&lt;th align="right"&gt;Size in KB&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Original&lt;/td&gt;
&lt;td align="right"&gt;480&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ETC1 4bits&lt;/td&gt;
&lt;td align="right"&gt;128&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ETC2 8bits&lt;/td&gt;
&lt;td align="right"&gt;256&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Dxt5 Crunched&lt;/td&gt;
&lt;td align="right"&gt;64&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PVRTC 2 bit&lt;/td&gt;
&lt;td align="right"&gt;64&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PVRTC 4 bit&lt;/td&gt;
&lt;td align="right"&gt;128&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Webp Lossless&lt;/td&gt;
&lt;td align="right"&gt;287&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Webp Lossy 80&lt;/td&gt;
&lt;td align="right"&gt;23&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;1024x1024 Image&lt;/th&gt;
&lt;th align="right"&gt;Size in KB&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Original&lt;/td&gt;
&lt;td align="right"&gt;1800&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ETC1 4bits&lt;/td&gt;
&lt;td align="right"&gt;512&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ETC2 8bits&lt;/td&gt;
&lt;td align="right"&gt;1000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Dxt5 Crunched&lt;/td&gt;
&lt;td align="right"&gt;183&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PVRTC 2 bit&lt;/td&gt;
&lt;td align="right"&gt;256&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PVRTC 4 bit&lt;/td&gt;
&lt;td align="right"&gt;512&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Webp Lossless&lt;/td&gt;
&lt;td align="right"&gt;1200&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Webp Lossy 80&lt;/td&gt;
&lt;td align="right"&gt;113&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;I've written a simple plugin to include Webp textures into your Unity game here: https://github.com/minhhh/UBootstrap.Webp&lt;/p&gt;
&lt;p&gt;Ref: &lt;a href="https://www.andrewmunsell.com/blog/png-vs-webp/"&gt;png vs webp&lt;/a&gt;&lt;/p&gt;</summary><category term="unity"></category><category term="texture"></category><category term="webp"></category></entry><entry><title>Git branching strategy</title><link href="http://minhhh.github.io/posts/git-branching-strategy" rel="alternate"></link><published>2017-01-09T00:00:00-05:00</published><updated>2017-01-09T00:00:00-05:00</updated><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2017-01-09:posts/git-branching-strategy</id><summary type="html">&lt;p&gt;Branching strategy is an important part of using git correctly. Without a proper branching strategy, even with a few people in the project, you will create a mess in no time. Below is a simple branching strategy that can be applied to various situation. It is also available on github &lt;a href="https://github.com/minhhh/git-manual/blob/master/branching_strategy.md"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Branch Description&lt;/h2&gt;
&lt;h3&gt;master&lt;/h3&gt;
&lt;p&gt;Master branch represents what's in live. It should not be modified directly.&lt;/p&gt;
&lt;p&gt;When it is deployed, it will be tagged so that we can revert to a certain deployment later.&lt;/p&gt;
&lt;p&gt;Lifetime: forever&lt;/p&gt;
&lt;h3&gt;release/xxx&lt;/h3&gt;
&lt;p&gt;After finishing a feature, make a release branch off the develop branch, merge all the necessary feature branches and do final test. Bugs found in this final QA phases can also be hotfixed in the same branch. After everything is complete, we will rebase this branch over &lt;code&gt;develop&lt;/code&gt; branch, then the rebase branch will be merged into the &lt;code&gt;master&lt;/code&gt; branch for release in Live environment.&lt;/p&gt;
&lt;p&gt;Lifetime: Feature Finish ~ Release in Live&lt;/p&gt;
&lt;h3&gt;hotfix/xxx&lt;/h3&gt;
&lt;p&gt;If a bug is found in production, we wil branch hotfix branch off master.&lt;/p&gt;
&lt;p&gt;Lifetime: Bugfix ~ Release in Live&lt;/p&gt;
&lt;h3&gt;develop&lt;/h3&gt;
&lt;p&gt;This is the main branch where feature branches should be branched off. Trivial changes can be directly applied to develop if you are sure it should go into the next version. Major feature/bugfix branches have to go through PR process to be merged into develop.&lt;/p&gt;
&lt;p&gt;Lifetime: forever&lt;/p&gt;
&lt;h3&gt;feature/xxx&lt;/h3&gt;
&lt;p&gt;Feature branch should be branched off develop. While working on feature branches, developers can choose to merge develop into it. Once QA is completed on the feature branch, developers can send PR.&lt;/p&gt;
&lt;p&gt;Lifetime: Feature development ~ PR merge&lt;/p&gt;
&lt;h3&gt;art&lt;/h3&gt;
&lt;p&gt;Art branch lives forever. Artists only need to deal with this branch.&lt;/p&gt;
&lt;p&gt;Lifetime: forever&lt;/p&gt;
&lt;h2&gt;Role Descriptions&lt;/h2&gt;
&lt;h3&gt;Engineer / UIDesigner&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;develop -&amp;gt; feature&lt;/li&gt;
&lt;li&gt;feature -&amp;gt; develop (PR)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Artist&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;art -&amp;gt; art&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Lead Engineer&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;develop -&amp;gt; release&lt;/li&gt;
&lt;li&gt;release -&amp;gt; develop&lt;/li&gt;
&lt;li&gt;master -&amp;gt; hotfix&lt;/li&gt;
&lt;li&gt;hotfix -&amp;gt; master&lt;/li&gt;
&lt;li&gt;hotfix -&amp;gt; develop&lt;/li&gt;
&lt;/ul&gt;</summary><category term="git"></category></entry><entry><title>Unity package management</title><link href="http://minhhh.github.io/posts/unity-package-management" rel="alternate"></link><published>2017-01-09T00:00:00-05:00</published><updated>2017-01-09T00:00:00-05:00</updated><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2017-01-09:posts/unity-package-management</id><summary type="html">&lt;p&gt;A robust package management system is quite important when developing in Unity. People have been asking for one in the Unity &lt;a href="https://forum.unity3d.com/threads/any-robust-package-dependency-management-systems-for-unity.276329/"&gt;forum&lt;/a&gt;. The following survey will list some popular options.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/modesttree/Projeny"&gt;Projeny&lt;/a&gt; The purpose of Projeny is to allow your Unity3D project to easily scale in size without heavily impacting development time. Only available in Windows&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Share any Unity assets (code, scenes, prefabs, etc.) across multiple different Unity projects without copy and pasting&lt;/li&gt;
&lt;li&gt;Instantly switch between platforms&lt;/li&gt;
&lt;li&gt;Easily upgrade or downgrade installed asset store packages&lt;/li&gt;
&lt;li&gt;Optimize compile time of your project by getting Unity to only recompile the code that changes most often&lt;/li&gt;
&lt;li&gt;Split up your project into discrete packages, so that you can manage the dependencies between each, instead of having one giant Unity project of inter-related files&lt;/li&gt;
&lt;li&gt;Declare dependencies between packages, so that you always get the packages that you need without needing to hunt down missing libraries or broken links&lt;/li&gt;
&lt;li&gt;Generate a more intelligent Visual Studio solution than the Unity default, using package dependencies to create csproj dependencies&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/shadowmint/unity-package-template/blob/master/docs/npm.md"&gt;NPM can be used to manage packages and their dependencies&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It's very easy to use and install.&lt;/li&gt;
&lt;li&gt;Can be used with private repo&lt;/li&gt;
&lt;li&gt;Cannot distribute &lt;code&gt;.unitypackage&lt;/code&gt; file&lt;/li&gt;
&lt;li&gt;However, without using private registry, it cannot force resolve to the latest versions of all dependencies. This issue can be resolved using &lt;code&gt;yarn install --flat&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;Some people suggests &lt;a href="http://mymobiledevelopment.blogspot.com/2015/03/unity3d-package-manager.html"&gt;using NuGet&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Seems can download packages correctly&lt;/li&gt;
&lt;li&gt;Have to install a central server to make it work&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://wooga.github.io/Paket.Unity3D/"&gt;Paket.Unity3D&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Same problem as nuget&lt;/li&gt;
&lt;li&gt;Seems to work better in Windows&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/Unity-Technologies/kaizen"&gt;Unity Kaizen&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Deliver packages via a central repository and zip&lt;/li&gt;
&lt;li&gt;Require more work from package maintainer&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://bitbucket.org/Zeroto/upm"&gt;UPM&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;UPM is a package manager designed to work with the Unity game engine. It allows rapid install of unity extension and assets using a command line interface. Packages support dependencies, which will be auto-downloaded when installing a package.&lt;/li&gt;
&lt;li&gt;Seems to be unmaintained&lt;/li&gt;
&lt;li&gt;No MacOS binary&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://github.com/appetizermonster/unity-packman"&gt;unity-packman&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A command-line client to manage Unity package&lt;/li&gt;
&lt;li&gt;Does not support version and nested versions&lt;/li&gt;
&lt;li&gt;Can only export 1 directory, which is really limited&lt;/li&gt;
&lt;/ul&gt;</summary><category term="unity"></category></entry><entry><title>Dither Unity textures to save memory</title><link href="http://minhhh.github.io/posts/dither-unity-textures-to-save-memory" rel="alternate"></link><published>2017-01-05T00:00:00-05:00</published><updated>2017-01-05T00:00:00-05:00</updated><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2017-01-05:posts/dither-unity-textures-to-save-memory</id><summary type="html">&lt;p&gt;The project code is here: https://github.com/minhhh/unity-texture-dither&lt;/p&gt;
&lt;p&gt;In many cases, we want to dither textures so that we can use more compact texture import format to save memory. This project aims to provide a workflow for dithering imported texture automatically, based on settings that can be swapped easily. Note that this has nothing to do with using dithering to achieve some artistic goal or the real time dithering effect to solve color banding problem.&lt;/p&gt;
&lt;p&gt;The algorithms are explained in a &lt;a href="http://www.tannerhelland.com/4660/dithering-eleven-algorithms-source-code/"&gt;blog post&lt;/a&gt; by Tanner Helland and the reference implementations are taken from https://github.com/mcraiha/Dithering-Unity3d with some slight modification.&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;To dither images, put them in a folder whose name ended with &lt;code&gt;Dither&lt;/code&gt;. Then click on the folder and &lt;code&gt;Reimport&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The dither setting, i.e. algorithm and output color space is defined in ScriptableObjects &lt;code&gt;DitheringAlgorithmSetting&lt;/code&gt;. You can find them in the &lt;code&gt;Assets&lt;/code&gt; folder. To change dither setting, select &lt;code&gt;Settings &amp;gt; TextureDitherSetting&lt;/code&gt; and change the field &lt;code&gt;Dither Algorithm Setting&lt;/code&gt; accordingly.&lt;/p&gt;
&lt;p&gt;Supported algorithms are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Atkinson&lt;/li&gt;
&lt;li&gt;Burkes&lt;/li&gt;
&lt;li&gt;FloydSteinberg&lt;/li&gt;
&lt;li&gt;JarvisJudiceNinke&lt;/li&gt;
&lt;li&gt;Sierra&lt;/li&gt;
&lt;li&gt;SierraLite&lt;/li&gt;
&lt;li&gt;SierraTwoRow&lt;/li&gt;
&lt;li&gt;Stucki&lt;/li&gt;
&lt;li&gt;No Dithering (for testing purpose)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Supported color spaces are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;RGBA4444&lt;/li&gt;
&lt;li&gt;Websafe&lt;/li&gt;
&lt;li&gt;TrueColor (for testing purpose)&lt;/li&gt;
&lt;/ul&gt;</summary><category term="unity"></category><category term="dither"></category></entry><entry><title>Using Unity Mecanim animation system</title><link href="http://minhhh.github.io/posts/using-unity-mecanim-animation-system" rel="alternate"></link><published>2017-01-02T00:00:00-05:00</published><updated>2017-01-02T00:00:00-05:00</updated><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2017-01-02:posts/using-unity-mecanim-animation-system</id><summary type="html">&lt;p&gt;See &lt;a href="https://github.com/minhhh/unity-mecanim.git"&gt;unity-mecanim&lt;/a&gt; for sample code of this article&lt;/p&gt;
&lt;h2&gt;Mechanim basics&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=wdOk5QXYC6Y"&gt;Unity 5 Tutorial - Animation Control&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=7-OUZecgXv0"&gt;Unity Third Person Control: Mecanim Nodes - Tutorial 5&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://community.mixamo.com/hc/en-us/articles/203879268"&gt;Unity: Mecanim Animation Basics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://docs.unity3d.com/Manual/animeditor-UsingAnimationEditor.html"&gt;Animation Editor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://docs.unity3d.com/Manual/AnimationSoloMute.html"&gt;Solo and mute&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href="http://docs.unity3d.com/Manual/AnimationParameters.html"&gt;animation parameters&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Animation Parameters are variables that are defined within an Animator Controller that can be accessed and assigned values from scripts. This is how a script can control or affect the flow of the state machine.&lt;/li&gt;
&lt;li&gt;Parameters can be assigned values from a script using functions in the Animator class: SetFloat, SetInt, SetBool, SetTrigger and ResetTrigger&lt;/li&gt;
&lt;li&gt;&lt;a href="http://answers.unity3d.com/questions/600268/mecanim-animation-parameter-types-boolean-vs-trigg.html"&gt;Mecanim Animation Parameter Types: Boolean vs. Trigger&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Parameters can also be controlled in animation using Curve and read in script&lt;ul&gt;
&lt;li&gt;You cannot control an Animation parameter from both Curve and Script, so you have to structure your code correspondingly.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Root motion, Blend Tree&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=k12w-rEbuXI&amp;amp;index=1&amp;amp;list=PL_eGgISVYZkeD-q83hLtPESTB-lPKnfjH"&gt;RPG Character Controller 001 - Unity 5 Root Motion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Layer, Layer Mask&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Layer Usages (&lt;a href="https://unity3d.com/learn/tutorials/topics/animation/animator-controller-layers"&gt;Animator Controller Layers&lt;/a&gt;)&lt;ul&gt;
&lt;li&gt;Additional layer for handling different body parts while the base layer handles the base movement, such as: wave hand while moving&lt;/li&gt;
&lt;li&gt;Blending mode can be: Override or Additive. Normally &lt;code&gt;Override&lt;/code&gt; will be used because using &lt;code&gt;Additive&lt;/code&gt; can be highly unpredictable unless you're an advanced animator. (&lt;a href="https://community.mixamo.com/hc/en-us/articles/204581427-Unity-Mecanim-Advanced-Animation"&gt;advanced animation&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Blend additional movement based on character state such as: heavy breathing when tired&lt;/li&gt;
&lt;li&gt;Sync layer when you have a set of animation for when the character state changes such as: wounded animations&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Avatar Mask(&lt;a href="https://unity3d.com/learn/tutorials/topics/animation/avatar-masks"&gt;Avatar Masks&lt;/a&gt;)&lt;ul&gt;
&lt;li&gt;Could be set in animation to see the effect of Masking only part of the body&lt;/li&gt;
&lt;li&gt;Normally apply to layer which controls part of the body (&lt;a href="https://community.mixamo.com/hc/en-us/articles/204581427-Unity-Mecanim-Advanced-Animation"&gt;advanced animation&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Equip weapon&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Equip immediately without animation&lt;ul&gt;
&lt;li&gt;For models created in Unity&lt;ul&gt;
&lt;li&gt;Create weapon holder node&lt;/li&gt;
&lt;li&gt;Attach the weapons to it&lt;/li&gt;
&lt;li&gt;Hide/Unhide the correct weapon when switching weapon&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;For models created outside Unity&lt;ul&gt;
&lt;li&gt;Find the correct node in the model OR create a weapon holder node like before&lt;/li&gt;
&lt;li&gt;Attach the weapons to it&lt;/li&gt;
&lt;li&gt;Hide/Unhide the correct weapon when switching weapon&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Equip with equip/unequip animations. All weapons are treated the same when equipped (&lt;a href="https://www.youtube.com/watch?v=7gsl43thTsk"&gt;Sword equipping&lt;/a&gt;)&lt;ul&gt;
&lt;li&gt;Create equip/unequip animation for each weapons&lt;/li&gt;
&lt;li&gt;Using layer/layer mask to blend the equip/unequip animations, masking only the necessary parts of the body, such as the arm movement&lt;/li&gt;
&lt;li&gt;Using Animation Event to set value to flags such as: sword_equipped, sword_unequipped&lt;/li&gt;
&lt;li&gt;Attach the corresponding weapon using Animation Event calling functions and/or flags&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Weapons affect whole animation when equiped (&lt;a href="https://www.youtube.com/watch?v=Is9C4i4XyXk"&gt;Applied Mecanim : Character Animation and Combat State Machines&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Using mechanim as state machine&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://forum.unity3d.com/threads/mecanim-as-generic-state-machine.311201/"&gt;Mecanim as generic state machine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pekalicious.com/blog/unity3d-reusing-animator-controllers-with-animatoroverridecontroller/"&gt;Reusing animator controllers with AnimatorOverrideController&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=Is9C4i4XyXk"&gt;Applied Mecanim : Character Animation and Combat State Machines&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;A character with&lt;ul&gt;
&lt;li&gt;8 weapon types&lt;ul&gt;
&lt;li&gt;9-12 ground attacks&lt;/li&gt;
&lt;li&gt;5 aerial attacks&lt;/li&gt;
&lt;li&gt;3 defensive maneuvers&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;4 throwable items&lt;/li&gt;
&lt;li&gt;6 classes of magic each with 3-6 abilities&lt;/li&gt;
&lt;li&gt;Basic locomotion, jump, hit react, death&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;One way is to use SubStateMachine, with several depth layers&lt;/li&gt;
&lt;li&gt;An alternative organization is to use BaseLayer with Overrides Layer and Additive Layer&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=HOURak6BpSo"&gt;Leveraging Unity 5.2's Advanced Animation Features&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;You can manage all transitions between attacks manually&lt;/li&gt;
&lt;li&gt;Or you can use a blend tree. This is slightly better. One problem is if you change the Blend parameter while playing animation, it will change the animation immediately.&lt;/li&gt;
&lt;li&gt;Solution in Unity 5: StateMachineBehaviour on a State. This way you can have code that run at the Start or End of your blendtree.&lt;/li&gt;
&lt;li&gt;You could also have StateMachineBehaviour on a StateMachine. Then you can override &lt;code&gt;OnStateMachineEnter&lt;/code&gt; and &lt;code&gt;OnStateMachineExit&lt;/code&gt; functions&lt;/li&gt;
&lt;li&gt;When the SubStateMachine is a sequence of animations, you can have code on &lt;code&gt;OnStateMachineEnter&lt;/code&gt; to equip weapon&lt;/li&gt;
&lt;li&gt;Can also check for Input in &lt;code&gt;StateMachineBehaviour&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Best Practices&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://answers.unity3d.com/questions/806949/animation-events-not-firing.html"&gt;Animation events not firing&lt;/a&gt; when the event is near the endframe, so either use a third party event dispatcher, or use &lt;code&gt;StateMachineBehaviour&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use custom class to cache animation event&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You might catch animation events using a general event handler function such as &lt;code&gt;OnAnimationEvent (AnimationEvent)&lt;/code&gt;, however this might not be the best solution since you will have to do a switch case in your main logic class. This will make the main logic class (e.g. Enemy, Player) knows too much about the flow to handle animation event. Also you might not be able to reuse common code.&lt;/li&gt;
&lt;li&gt;A better way is to have a generic custom class to handle animation event, e.g. &lt;code&gt;AnimatorHandler&lt;/code&gt;. This class will have most common function such as &lt;code&gt;OnAnimationStart&lt;/code&gt;, &lt;code&gt;OnAnimationEnd&lt;/code&gt;, &lt;code&gt;OnAnimationUpdate&lt;/code&gt;. You can pass custom handle functions in as callback if you need to. This class also has common utility function such as getting current state name, check if any animation is playing etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When importing animations, make sure to &lt;code&gt;Bake into pose&lt;/code&gt; the part where you don't want to move by Root motion. Also use &lt;code&gt;Offset&lt;/code&gt; to fix Average velocity not zero problems, e.g. walking animation that has a X speed&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Change the animation speed of specific layer&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;There's no way to change the animation speed of specific layer. The current best way is to Use blend tree to control the speed of a particular layer based on parameter. See &lt;a href="http://forum.unity3d.com/threads/mecanim-change-animation-speed-of-specific-animation-or-layers.160395/"&gt;Mecanim - Change animation speed of specific animation or layers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;You can also change the speed of particular state in Editor and via script&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Use int parameter instead of boolean or trigger. This way you can use AnyState to transition using condition such as &lt;code&gt;skill=1&lt;/code&gt;, then when entering the mecanim state we set it to another number immediately &lt;a href="https://www.youtube.com/watch?v=Is9C4i4XyXk"&gt;Applied Mecanim : Character Animation and Combat State Machines&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Use substate to simplify your state machine. However, becareful when constructing AnyState transition to deeper substate, since AnyState is global. In this way, we can ignore the immediate substate and only care about the final subtate. We use the most specific condition, such as &lt;code&gt;skill=1 and subskill=2&lt;/code&gt; to trigger the final substate from AnyState. This way we don't have to configure transition to immediate substate and only care about the final state&lt;/li&gt;
&lt;li&gt;Use SMB: &lt;a href="https://www.youtube.com/watch?v=Is9C4i4XyXk"&gt;Applied Mecanim : Character Animation and Combat State Machines&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SMB&lt;/code&gt; makes sure that &lt;code&gt;OnStateMachineExit&lt;/code&gt; is called when exiting a state. Putting a animation event at the end of an animation cannot ensure that for 2 reasons: The animation might be forced to switch in the middle or the animation event might not fire because the animation is played too quickly&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://answers.unity3d.com/questions/685968/running-an-animation-completely-before-transitioni.html"&gt;Running an animation completely before transitioning back&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Make sure Exit time is 1.00, with FixedDuration unchecked.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;How to Run the death animation then destroy GameObject&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use a timer. This is quite a robust solution but maybe not visually correct in some cases, i.e. the animation might be stopped too soon.&lt;/li&gt;
&lt;li&gt;Use animation event. Add an Exit event to the animation at the last frame. This is not very robust, since Unity might skip Animation event&lt;/li&gt;
&lt;li&gt;Use auto transition to a fake after death state. Then use StateMachineBehaviour to detect when we exit the Death state. This is also a robust solution, but requires you to modify the structure of the Animator.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;How to transition out of a substate machine (&lt;a href="https://www.youtube.com/watch?v=lpekqN4_4xg"&gt;Using substate machine&lt;/a&gt;)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Using Up node: Transition to state or StateMachine&lt;/li&gt;
&lt;li&gt;Using Entry/Exit nodes: Transition to/from StateMachine. This facilitates better reusability&lt;/li&gt;
&lt;li&gt;Try to only use one way&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="unity"></category><category term="mecanim"></category></entry><entry><title>Finite state machine for Unity</title><link href="http://minhhh.github.io/posts/finite-state-machine-for-unity" rel="alternate"></link><published>2016-12-28T00:00:00-05:00</published><updated>2016-12-28T00:00:00-05:00</updated><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2016-12-28:posts/finite-state-machine-for-unity</id><summary type="html">&lt;p&gt;Finite State Machine (FSM) is an important technique in game programming. Most games that have some sort of battle will have to design an FSM for its entities. FSM can be applied in UI as well. For example, instead of using flags to enable/disable certain UI elements, we can use a full FSM for all possible states of the targetted UI and its interactions with user inputs.&lt;/p&gt;
&lt;p&gt;The main elements of a FSM include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A representation of a state&lt;/li&gt;
&lt;li&gt;A representation of a transition between 2 state&lt;/li&gt;
&lt;li&gt;A central system that hosts the states and facilitates their transitions&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://unity3d.com/learn/tutorials/topics/scripting/using-interfaces-make-state-machine-ai"&gt;Using Interfaces to Make a State Machine for AI&lt;/a&gt; has a simplest implementation of FSM. A state is represented like this:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public interface IEnemyState
{
    void UpdateState();
    void OnTriggerEnter (Collider other);
    void ToPatrolState();
    void ToAlertState();
    void ToChaseState();
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This implementation hardcodes all state transitions in the interface, thus it's a bad example and should not be used in a serious game.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.voidinspace.com/2013/05/a-simple-finite-state-machine-with-c-delegates-in-unity/"&gt;A simple finite state machine with C# delegates in Unity&lt;/a&gt; provides a slightly better implementation. Instead of hardcoding, it calls a single delegate function when making a transition. Still, it does not separate actions to be executed upon entering and exiting states, so it's not very useful for serious purpose.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://wiki.unity3d.com/index.php?title=Finite_State_Machine"&gt;Finite State Machine&lt;/a&gt; by Unity Wiki does provide overridable functions to be executed when entering and exiting states. However, we also need to perform actions in &lt;code&gt;Update&lt;/code&gt;, &lt;code&gt;FixedUpdate&lt;/code&gt; and similar functions for entities that have time-based changes such as a player, enemies, NPC and so on. So this implementation is not sufficient.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/thefuntastic/Unity3d-Finite-State-Machine"&gt;Unity3D Finite State Machine&lt;/a&gt; satisfies functionality requirements. It provides on enter/exit functions as well as &lt;code&gt;Update&lt;/code&gt;, &lt;code&gt;FixedUpdate&lt;/code&gt;, &lt;code&gt;LateUpdate&lt;/code&gt;. It does not use separate &lt;code&gt;State&lt;/code&gt; class, instead, it uses reflection to call the correct function in the main Component for each state. Therefore, all functions of all states must be defined in the main Component, for instance, &lt;code&gt;Play_Enter&lt;/code&gt;, &lt;code&gt;Play_Exit&lt;/code&gt;, &lt;code&gt;Init_Enter&lt;/code&gt;, &lt;code&gt;Init_Exit&lt;/code&gt;, &lt;code&gt;Move_Enter&lt;/code&gt;, &lt;code&gt;Move_Exit&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;My own implementation of &lt;a href="https://github.com/minhhh/unity-fsm"&gt;Finite State Machine&lt;/a&gt; is similar to the above method, except that I don't want to use generics, since it will make it harder to refer to the &lt;code&gt;FSM&lt;/code&gt; using code.&lt;/p&gt;
&lt;p&gt;Another way to implement FSM is to make each state a separate MonoBehaviour. In this way, you can separate the functions for each state in its own file. In addition, you can examine the states in the Editor easily, like other MonoBehaviour. One issue which needs to be solved is how to access the members of the main Component. So you have to pass in the main Component to the state via constructor and make the members public. An alternative way is to write generic singletons which can be accessed from anywhere.&lt;/p&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/thefuntastic/Unity3d-Finite-State-Machine"&gt;Unity3D Finite State Machine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://wiki.unity3d.com/index.php?title=Finite_State_Machine"&gt;Finite State Machine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.voidinspace.com/2013/05/a-simple-finite-state-machine-with-c-delegates-in-unity/"&gt;A simple finite state machine with C# delegates in Unity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://unity3d.com/learn/tutorials/topics/scripting/using-interfaces-make-state-machine-ai"&gt;Using Interfaces to Make a State Machine for AI&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="unity"></category><category term="fsm"></category></entry><entry><title>Understanding Unity Editor Extensions</title><link href="http://minhhh.github.io/posts/understanding-unity-editor-extensions" rel="alternate"></link><published>2016-12-22T00:00:00-05:00</published><updated>2016-12-22T00:00:00-05:00</updated><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2016-12-22:posts/understanding-unity-editor-extensions</id><summary type="html">&lt;p&gt;Unity Editor offers many ways for extending its functionality to suit your project's specific needs and workflow. Have a look at &lt;a href="https://github.com/minhhh/unity-editorextension-manual"&gt;unity-editorextension-manual&lt;/a&gt; for a complete list of ways you can extend the Unity Editor.&lt;/p&gt;</summary><category term="unity"></category><category term="editor"></category></entry><entry><title>Understanding Unity ScriptableObject</title><link href="http://minhhh.github.io/posts/understanding-unity-scriptableobject" rel="alternate"></link><published>2016-12-15T00:00:00-05:00</published><updated>2016-12-15T00:00:00-05:00</updated><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2016-12-15:posts/understanding-unity-scriptableobject</id><summary type="html">&lt;p&gt;In the &lt;a href="https://unity3d.com/learn/tutorials/modules/beginner/live-training-archive/scriptable-objects"&gt;Introduction to Scriptable Objects&lt;/a&gt; tutorial, they claim that &lt;code&gt;Scriptable Objects are amazing data containers&lt;/code&gt;. However, it's not clear how useful Scriptable Objects really is, and what problems they're trying to solve. In this article we will look at all usecases of Scriptable Objects, what issues they're trying to solve, what the original solutions are, and what the pros and cons of each approach are.&lt;/p&gt;
&lt;h2&gt;Overall&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;What is a Scriptable Object&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Data Container&lt;/li&gt;
&lt;li&gt;Can NOT be attached to GameObject/Prefab&lt;/li&gt;
&lt;li&gt;Can be serialized and inspected like MonoBehaviour&lt;/li&gt;
&lt;li&gt;Can be put into .asset file&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pros&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Built into Unity&lt;/li&gt;
&lt;li&gt;Can be saved as assets&lt;/li&gt;
&lt;li&gt;Can save during runtime&lt;/li&gt;
&lt;li&gt;Can be referenced instead of copied like MonoBehaviour&lt;/li&gt;
&lt;li&gt;Internal solution (no files/parsing). Performance is quite fast.&lt;/li&gt;
&lt;li&gt;Add to structure as you go. No need to go through a large file/multiple files to replace schema.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cons&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Requires Editor Scripting&lt;/li&gt;
&lt;li&gt;Can't edit outside Unity&lt;/li&gt;
&lt;li&gt;Can't save once deployed&lt;/li&gt;
&lt;li&gt;Cannot optimize loading speed since this is Unity code&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Use case 1: Global Game Settings&lt;/h2&gt;
&lt;p&gt;Every game has global settings for various aspects such as: Sounds, Video, Game play. There are some options to store these settings:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Scattered throughout the code, or maybe centralized into one source file.&lt;ol&gt;
&lt;li&gt;Pros: Easy to code&lt;/li&gt;
&lt;li&gt;Cons: Designers cannot find these settings easily. Change cannot persist if you quit &lt;code&gt;Play&lt;/code&gt; mode&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Stored in config files: text/binary.&lt;ol&gt;
&lt;li&gt;Pros: Easy to code. Designers can look at them if they're text files.&lt;/li&gt;
&lt;li&gt;Cons: Cannot change settings while playing. Might be hard for designers to understand and change the settings files since there's no validation method.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Stored in Prefabs&lt;ol&gt;
&lt;li&gt;Pros: Prefab can be stored as assets&lt;/li&gt;
&lt;li&gt;Cons: It might be too heavy for pure data purpose. Duplicate memory if you create instance.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;ScriptableObject can be used to store global settings in &lt;code&gt;.asset&lt;/code&gt; files.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pros&lt;ol&gt;
&lt;li&gt;Easy to find them in Unity&lt;/li&gt;
&lt;li&gt;Easy to change and test&lt;/li&gt;
&lt;li&gt;Can change while playing. Changes persist after quitting play mode&lt;/li&gt;
&lt;li&gt;Can have custom editor so it's easy to note the meaning of each field&lt;/li&gt;
&lt;li&gt;Can be validated using custom editor code.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Implementation&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create a base class for all the global game Settings. It will have a static property &lt;code&gt;Instance&lt;/code&gt;, which provides a way to create a singleton instance in a fixed location. This location will be customized on a project basis.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public class Setting&amp;lt;T&amp;gt; : ScriptableObject where T : Setting&amp;lt;T&amp;gt;
{
...
}
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;Create subclass the &lt;code&gt;Setting&lt;/code&gt; class. Provide a MenuItem for accessing it.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[MenuItem (&amp;quot;Settings/TextureSetting&amp;quot;)]&lt;/span&gt;
&lt;span class="na"&gt;public static void Edit ()&lt;/span&gt;
&lt;span class="na"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;Selection.activeObject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;Instance;&lt;/span&gt;
&lt;span class="na"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Use case 2: Swappable Global Game Settings or Scene Settings&lt;/h2&gt;
&lt;p&gt;Sometimes we don't want to have to change some global settings back and forth between a set of parameters since it's very time-consuming. So we might want to store several pre-defined settings and swap between them quickly.&lt;/p&gt;
&lt;p&gt;Another case is scene settings. These settings only affect the scene, not the whole game, and they usually change between scene reload, for instance, game mode settings: Easy, Medium, Difficult.&lt;/p&gt;
&lt;p&gt;ScriptableObject can deal with this situation:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;To be able to swap setting, create a wrapper setting which references the specific setting&lt;/li&gt;
&lt;li&gt;To swap scene setting, simply load the specific setting in &lt;code&gt;Assets&lt;/code&gt; then assign it to specific field in a &lt;code&gt;MonoBehaviour&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Implementation&lt;/strong&gt;
&lt;em&gt; Create multiple settings
&lt;/em&gt; Define a field in &lt;code&gt;MonoBehaviour&lt;/code&gt; or parent ScriptableObject, referring to the settings ScriptableObject&lt;/p&gt;
&lt;h2&gt;Use case 3: Scriptable Objects as MasterData or Item Database&lt;/h2&gt;
&lt;p&gt;For any sufficiently large game, the game data will be so big that you have to separate them from the code, and they will be referred to as &lt;code&gt;MasterData&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Popular solutions for storing &lt;code&gt;MasterData&lt;/code&gt; include:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Text/Binary files. E.g &lt;a href="https://www.youtube.com/watch?v=nYWlB7HRNSE"&gt;Unity XML Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Database&lt;/li&gt;
&lt;li&gt;Network&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Cons&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;One common disadvantage with these approach is you will need an external viewer to be able to see and modify &lt;code&gt;masterdata&lt;/code&gt; conveniently.&lt;/li&gt;
&lt;li&gt;You will have to replicate the schema in code&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;ScriptableObject can offer a way to create and edit &lt;code&gt;masterdata&lt;/code&gt; inside Unity Editor.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ScriptableObject Pros&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Can have references to Resources&lt;/li&gt;
&lt;li&gt;View, Add, Delete and Edit entities/items conveniently in Unity Editor&lt;/li&gt;
&lt;li&gt;Use ScriptableObject directly in &lt;code&gt;MonoBehaviour&lt;/code&gt; instead of having to create an additional layer of MonoBehaviour&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Implementation&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://unity3d.com/learn/tutorials/modules/beginner/live-training-archive/scriptable-objects"&gt;Introduction to Scriptable Objects&lt;/a&gt; shows how you use Scriptable Object to create and edit Inventory Lists.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=ItZbTYO0Mnw"&gt;Saving Data in Unity: ScriptableObjects&lt;/a&gt; shows how you can create multiple &lt;code&gt;Enemy&lt;/code&gt; ScriptableObject and use them in the &lt;code&gt;EnemyMove&lt;/code&gt; MonoBehaviour.&lt;/p&gt;
&lt;h2&gt;Use case 4: Scriptable Objects as Dynamic Behaviour&lt;/h2&gt;
&lt;p&gt;Another usecase of ScriptableObject is using them as game behaviour which has data that can be modified by designer. They have some instance functions, like &lt;code&gt;MonoBehaviour&lt;/code&gt;, but unlike &lt;code&gt;MonoBehaviour&lt;/code&gt; which cannot be saved independently without prefabs, ScriptableObject can be saved as if they're just pure data. Game programmers can change the code of the behaviour without affecting game designers.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Implementation&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;These ScriptableObjects are similar to the ones in Usecase 3, but they have functions which can act arbitrarily on &lt;code&gt;GameObject&lt;/code&gt;, &lt;code&gt;MonoBehaviour&lt;/code&gt; and so on.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://unity3d.com/learn/tutorials/topics/scripting/ability-system-scriptable-objects?playlist=17117"&gt;Ability System with Scriptable Objects&lt;/a&gt; shows how you implement an Ability System, where &lt;code&gt;Ability&lt;/code&gt; is ScriptableObject with its own behaviour functions.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;Ability&lt;/code&gt; class contains data and abstracts methods which act on &lt;code&gt;GameObject&lt;/code&gt; based on those data.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public abstract class Ability : ScriptableObject
{
    public string aName = &amp;quot;New Ability&amp;quot;;
    public Sprite aSprite;
    public AudioClip aSound;
    public float aBaseCoolDown = 1f;

    public abstract void Initialize (GameObject obj);
    public abstract void TriggerAbility ();
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;ProjectileAbility&lt;/code&gt; is a concrete &lt;code&gt;Ability&lt;/code&gt; subclass, which modifies the target &lt;code&gt;GameObject&lt;/code&gt; as needed and trigger the projectile action.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;using UnityEngine;
using System.Collections;

[CreateAssetMenu (menuName = &amp;quot;Abilities/ProjectileAbility&amp;quot;)]
public class ProjectileAbility : Ability
{
    public float projectileForce = 500f;
    public Rigidbody projectile;

    private ProjectileShootTriggerable launcher;

    public override void Initialize (GameObject obj)
    {
        launcher = obj.GetComponent&amp;lt;ProjectileShootTriggerable&amp;gt; ();
        launcher.projectileForce = projectileForce;
        launcher.projectile = projectile;
    }

    public override void TriggerAbility ()
    {
        launcher.Launch ();
    }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href="https://bitbucket.org/richardfine/scriptableobjectdemo"&gt;ScriptableObjectDemo&lt;/a&gt; is a more comprehensive demo.&lt;/p&gt;
&lt;h2&gt;Other notes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;MasterData can include global settings, constants and any kind of game data. This really depends on the developers/designers to choose.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ScriptableObjects can help you to load some specific items in an Item Database quickly, if the items are stored as individual assets. Refactoring multiple ScriptableObject assets into a collection is simple.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Other Methods to store data&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;From source code&lt;ol&gt;
&lt;li&gt;A lot of code for storing data&lt;/li&gt;
&lt;li&gt;Large binary size&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;From GameObject&lt;ol&gt;
&lt;li&gt;We can store data in &lt;code&gt;Component&lt;/code&gt; inside Prefabs, or in Scene.&lt;/li&gt;
&lt;li&gt;This way is mostly heavier than ScriptableObject&lt;/li&gt;
&lt;li&gt;However, you can pack multiple &lt;code&gt;Component&lt;/code&gt; arbitrarily so it might be helpful.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;From XML, JSON, CSV, Excel&lt;ol&gt;
&lt;li&gt;Cannot have resources reference&lt;/li&gt;
&lt;li&gt;Might be good to have a workflow to convert into ScriptableObject&lt;/li&gt;
&lt;li&gt;To update data in saved data, text/binary are more suitable than ScriptableObject, which cannot be saved once deployed.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;PlayerPrefs&lt;ol&gt;
&lt;li&gt;Can be used to save data&lt;/li&gt;
&lt;li&gt;Not suitable for very large amount of data&lt;/li&gt;
&lt;li&gt;Cannot control the save process easily&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;From embedded DB&lt;ol&gt;
&lt;li&gt;Cannot have resources reference&lt;/li&gt;
&lt;li&gt;Might be good to have a workflow to convert into ScriptableObject&lt;/li&gt;
&lt;li&gt;To update data in saved data, database is very convenient. But we must care about performance.&lt;/li&gt;
&lt;li&gt;We must be aware of encryption capabilities of the DB.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;From Network&lt;ol&gt;
&lt;li&gt;Cannot have resources reference&lt;/li&gt;
&lt;li&gt;Usually used in combination with a text/binary persisted in local storage&lt;/li&gt;
&lt;li&gt;To update data via Network with ScriptableObject, AssetBundle is needed. So the general-purpose text/binary format might be better.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://medium.com/@mormo_music/game-settings-with-scriptable-objects-in-unity3d-6f753fe508fd#.tb9ahxiej"&gt;Game Settings with Scriptable Objects in Unity3D&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://unity3d.com/learn/tutorials/modules/beginner/live-training-archive/scriptable-objects"&gt;Introduction to Scriptable Objects&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://unity3d.com/learn/tutorials/topics/scripting/ability-system-scriptable-objects?playlist=17117"&gt;Ability System with Scriptable Objects&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=ItZbTYO0Mnw"&gt;Saving Data in Unity: ScriptableObjects&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=VBA1QCoEAX4"&gt;Overthrowing the MonoBehaviour tyranny in a glorious ScriptableObject revolution&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://tsubakit1.hateblo.jp/entry/2014/07/24/030607"&gt;Scriptable Object&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://bitbucket.org/richardfine/scriptableobjectdemo"&gt;ScriptableObjectDemo&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://ivanozanchetta.com/gamedev/unity3d/unity-serialization-behind-scriptableobject/"&gt;Unity Serialization… behind the mistery of ScriptableObject&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="unity"></category><category term="scriptableobject"></category></entry><entry><title>Understanding Reactive</title><link href="http://minhhh.github.io/posts/understanding-reactive" rel="alternate"></link><published>2016-12-04T00:00:00-05:00</published><updated>2016-12-04T00:00:00-05:00</updated><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2016-12-04:posts/understanding-reactive</id><summary type="html">&lt;h2&gt;Reactive tutorials and manual&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="https://gist.github.com/staltz/868e7e9bc2a7b8c1f754"&gt;The introduction to Reactive Programming you've been missing&lt;/a&gt;&lt;/strong&gt; Best introduction tutorial to Reactive Programming&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="http://www.introtorx.com/"&gt;Introduction to Rx&lt;/a&gt;&lt;/strong&gt; This book aims to teach you:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;about the new types that Rx will provide&lt;/li&gt;
&lt;li&gt;about the extension methods and how to use them&lt;/li&gt;
&lt;li&gt;how to manage subscriptions to "sequences" of data&lt;/li&gt;
&lt;li&gt;how to visualize "sequences" of data and sketch your solution before coding it&lt;/li&gt;
&lt;li&gt;how to deal with concurrency to your advantage and avoid common pitfalls&lt;/li&gt;
&lt;li&gt;how to compose, aggregate and transform streams&lt;/li&gt;
&lt;li&gt;how to test your Rx code&lt;/li&gt;
&lt;li&gt;some guidance on best practices when using Rx.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="http://reactivex.io/intro.html"&gt;ReactiveX&lt;/a&gt;&lt;/strong&gt; The home of ReactiveX. Introduction, All operators are illustrated with graphical marble diagrams, there makes easy to understand&lt;/p&gt;
&lt;h2&gt;Reactive Design Patterns&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="http://www.slideshare.net/ZalandoTech/reactive-design-patterns-a-talk-by-typesafes-dr-roland-kuhn"&gt;Reactive Design Patterns&lt;/a&gt;&lt;/strong&gt; by Dr. Roland Kuhn: leader of Typesafe’s Akka project, and coauthor of the book Reactive Design Patterns and the Reactive Manifesto. Roland highlighted the importance of making reactive software: of considering responsiveness, maintainability, elasticity and scalability from the outset of development. He explored several architecture elements that are commonly found in reactive systems, such as the circuit breaker, various replication techniques, and flow control protocols. These patterns are language-agnostic and also independent of the abundant choice of reactive programming frameworks and libraries.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="https://www.lightbend.com/resources/e-book/reactive-design-patterns"&gt;Reactive Design Patterns&lt;/a&gt;&lt;/strong&gt; by Roland Kuhn and Jamie Allen&lt;/p&gt;
&lt;h2&gt;Reactive usecases&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="http://blog.flowdock.com/2013/01/22/functional-reactive-programming-with-bacon-js/"&gt;Bacon.js&lt;/a&gt;&lt;/strong&gt; introduces FRP concepts and benefits with Bacon.js, an FRP library for both browsers and server-side JS&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="https://www.youtube.com/watch?v=mS264h8KGwk"&gt;Immutability, interactivity &amp;amp; JavaScript&lt;/a&gt;&lt;/strong&gt; Surprisingly the high performance mutation available in modern JavaScript engines is a great foundation for building high performance immutable collections. Even more surprisingly efficient immutable collections permit new ways of approaching user interface programming. While the details will be in Om, an immutable user interface toolkit written in ClojureScript over Facebook's React, the talk will be primarily focused on high level concepts easily ported to JavaScript. We'll dive in and see how trees of JavaScript arrays can permit building these efficient immutable collections. Then we'll see how embracing immutable values dramatically simplifies some classic hard problems in client side programming including but not limited to undo, error playback, and online/offline synchronization.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="https://www.youtube.com/watch?v=sTSQlYX5DU0"&gt;What does it mean to be Reactive&lt;/a&gt;&lt;/strong&gt; The inimitable Erik Meijer delivering his opening keynote to React 2014&lt;/p&gt;</summary><category term="rx"></category></entry><entry><title>Unity Texture compression and optimization</title><link href="http://minhhh.github.io/posts/unity-texture-compression-and-optimization" rel="alternate"></link><published>2016-12-03T00:01:00-05:00</published><updated>2016-12-03T00:01:00-05:00</updated><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2016-12-03:posts/unity-texture-compression-and-optimization</id><summary type="html">&lt;p&gt;A common question when building Unity games is which texture compression format will be the best. The criteria are: size on disk, memory footprint, performance.&lt;/p&gt;
&lt;p&gt;We have many options in the Unity Engine: ETC1, ETC2, DXT3, DXT5, and so on. How do we choose? Let's look at some optimization tricks to see how others choose their formats.&lt;/p&gt;
&lt;p&gt;First you need to understand &lt;a href="http://gamedev.stackexchange.com/questions/5171/how-much-memory-does-a-texture-take-up-on-the-gpu"&gt;How much memory does a texture take up on the GPU?&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;many modern engines opt to store the same format on disk as they do in memory, leading to files that are the same size as the texture's memory requirements&lt;/li&gt;
&lt;li&gt;Uncompresed image of 256x256 is 256KB. A DXT1 image of 256x256 is 32KB. And DXT3 or DXT5 is 64KB&lt;/li&gt;
&lt;li&gt;&lt;a href="http://mainroach.blogspot.com/2014/03/the-png-vs-gpu-battle-on-android.html"&gt;http://mainroach.blogspot.com/2014/03/the-png-vs-gpu-battle-on-android.html&lt;/a&gt; also explains why you don't want to use plain &lt;code&gt;png&lt;/code&gt; textures. Instead, export them to &lt;code&gt;DXT1&lt;/code&gt;, &lt;code&gt;PVR&lt;/code&gt; or &lt;code&gt;ETC&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://web.archive.org/web/20160826092252/http://android-developers.blogspot.com/2015/01/efficient-game-textures-with-hardware.html"&gt;Efficient Game Textures with Hardware Compression&lt;/a&gt; examines preferable compression formats which are supported on the GPU to help you reduce .apk size and loading times of your game:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;As you can see, with higher OpenGL support you gain access to better formats. There are proprietary formats to replace ETC1, delivering higher quality and alpha channel support. These are shown in the following table:&lt;ul&gt;
&lt;li&gt;ATC   Available with Adreno GPU.&lt;/li&gt;
&lt;li&gt;PVRTC Available with a PowerVR GPU.&lt;/li&gt;
&lt;li&gt;DXT1  S3 DXT1 texture compression. Supported on devices running Nvidia Tegra platform.&lt;/li&gt;
&lt;li&gt;S3TC  S3 texture compression, nonspecific to DXT variant. Supported on devices running Nvidia Tegra platform.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Using hardware accelerated textures in your games will help you reduce the size of your .apk, runtime memory use as well as loading times.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://web.archive.org/web/20160507141202/http://biobeasts.artix.com/unity-2d-texture-optimization/"&gt;Unity 2D Texture Optimization&lt;/a&gt; explains how they group textures by type instead of logical groups to save memory:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2048x2048 sprite sheet above, even with compression applied, took up 4mb in Texture2D memory&lt;/li&gt;
&lt;li&gt;assets fail to render and appear like black shapes&lt;/li&gt;
&lt;li&gt;organize sprite sheets into three compression types: Solids, Fades, and Alpha Punchouts.&lt;/li&gt;
&lt;li&gt;Solids are any rectangular assets with NO alpha. Here we can get a major savings by selecting a 4-bit compression that doesn't support alpha.&lt;/li&gt;
&lt;li&gt;Alpha Punchouts are any other shapes that use binary alpha, meaning the area of the image is either 100% or 0% alpha. Here we select a 5-bit compression&lt;/li&gt;
&lt;li&gt;Fades are reserved for our most complex objects that contain variable degrees of alpha. We use these sparingly and compress them using a minimum of 8-bit RGBA to look best.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://web.archive.org/web/20160513225925/http://forum.unity3d.com/threads/etc1-vs-etc2-texture-compression.219842/"&gt;ETC1 vs ETC2 vs DXT5&lt;/a&gt; discuss which is the best texture format&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ETC2 only for devices supporting ES 3.0&lt;/li&gt;
&lt;li&gt;But if your targeting all devices... which u should consider doing in 2015, then it doesnt matter if you pick ETC2 or DXT5 Crunched because theyre both getting decompressed. Which makes sense for ARGB. And then for RGB just ETC1&lt;/li&gt;
&lt;li&gt;Most devices support ETC1 &lt;a href="http://developer.android.com/guide/topics/graphics/opengl.html#textures"&gt;http://developer.android.com/guide/topics/graphics/opengl.html#textures&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;I was able to remove 25% of my file size this weekend, thanks to switching to ETC1 + DXT5 Crunched&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://web.archive.org/web/20150610061237/https://software.intel.com/en-us/articles/android-texture-compression-a-comparison-study-with-code-sample"&gt;Android Texture Compression - a comparison study with code sample&lt;/a&gt; compares the quality and sizes of different formats on Android devices including: &lt;code&gt;png, etc, etc2, pvrtc and s3tc&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://web.archive.org/web/20160513225136/http://forum.unity3d.com/threads/etc2-as-default-texture-compression-on-android.348582/"&gt;ETC2 as default texture compression on Android&lt;/a&gt; discuss usage of ETC2 format&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We use DXT5 on our sprites to save space on apk file. When the device does not support your texture type, Unity uses software decompression on load and your textures become 32bit RGBA.&lt;/li&gt;
&lt;li&gt;Use ETC2 to save memory. It might be bad for some low-spec device if they don't support ETC2. Also one more reason to pack your own sheets instead of using Unity packer, since you can do dithering yourself&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Some texture optimization recommendations&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Don't use mipmap for 2D &lt;a href="https://web.archive.org/web/20160422114629/http://forum.unity3d.com/threads/is-it-possible-to-turn-on-mip-maps-for-a-sprite.219054/"&gt;Is it possible to turn on Mip Maps for a sprite&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Compress your textures to DXT1 or DXT5 &lt;a href="https://web.archive.org/web/20160428065248/http://forum.unity3d.com/threads/tips-and-tricks-make-sure-to-profile-your-phone-apps-memory-usage.202952/"&gt;Memory optimization tricks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://web.archive.org/web/20160520084556/http://forum.unity3d.com/threads/what-resolution-should-i-be-painting-sprites-in.225845/"&gt;What Resolution should I be painting sprites in?&lt;/a&gt; 2048x2048 seems a bit big already on mobile device&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://support.unity3d.com/hc/en-us/articles/207051116-How-can-I-add-Alpha-to-ETC1-Compression-"&gt;How Can I Add Alpha To ETC1 Compression?&lt;/a&gt; attempts to answer the question about ETC1 + Alpha channel&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sprites placed on some atlas by specifying them with a packing tag&lt;/li&gt;
&lt;li&gt;Make sure to mark the Override for Android checkbox as well as the Compress using ETC1 checkbox. Unity will split the resulting atlas into two textures, each without Alpha and then combine them in the final parts of the RenderPipeline.&lt;/li&gt;
&lt;li&gt;The UI shaders in Unity 5.3.0 and earlier do not support ETC1 + Alpha&lt;/li&gt;
&lt;li&gt;Yes. The UI elements do not work well with ETC1. We have a bug on it. (http://forum.unity3d.com/threads/etc1-alpha-feature.350184/)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://web.archive.org/web/20160726041743/http://developers.mobage.jp/blog/texture-compression"&gt;Unity mobile Splitalpha&lt;/a&gt;. This blogs has solved the issue with ETC1 + Alpha and provided a solution for both Android and iOS devices.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ETC1 with Alpha channel splitalpha&lt;ul&gt;
&lt;li&gt;Split Alpha texture&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;                        合計サイズ (MiB) RGBA       16bit 比のサイズ削減率 (%)
RGBA 16bit              879                         0
RGBA PVRTC 4bit         229                         74
RGBA ETC2 8bit          431                         51
Split Alpha (Android)   249                         72
Split Alpha (iOS)       272                         69
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;https://github.com/keijiro/unity-alphamask&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In conclusion, use ETC + Alpha channel whenever you can because it provides the best build size and memory footprint in most cases, at reasonable quality.&lt;/p&gt;</summary><category term="unity"></category><category term="texture"></category><category term="splitalpha"></category><category term="optimization"></category></entry><entry><title>Unity geometry distortion on child object</title><link href="http://minhhh.github.io/posts/unity-geometry-distortion-on-child-object" rel="alternate"></link><published>2016-12-03T00:00:00-05:00</published><updated>2016-12-03T00:00:00-05:00</updated><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2016-12-03:posts/unity-geometry-distortion-on-child-object</id><summary type="html">&lt;p&gt;In Unity there is a geometry issue with the child object of non-uniformly scaled parent. When the parent object does not have (1,1,1) scale, then the child object will be skewed weirdly when they rotate. This issue has been mentioned in the below references:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;http://answers.unity3d.com/questions/197739/object-skewing-on-rotation.html&lt;/li&gt;
&lt;li&gt;http://answers.unity3d.com/questions/21645/geometry-distortion-on-child-objects.html&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The solution is to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Make the parent uniform, OR&lt;/li&gt;
&lt;li&gt;Child the objects to another uniformly scaled parent&lt;/li&gt;
&lt;/ol&gt;</summary><category term="unity"></category></entry><entry><title>Scale Shuriken Particle System</title><link href="http://minhhh.github.io/posts/scale-shuriken-particle-system" rel="alternate"></link><published>2016-11-29T00:00:00-05:00</published><updated>2016-11-29T00:00:00-05:00</updated><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2016-11-29:posts/scale-shuriken-particle-system</id><summary type="html">&lt;p&gt;Unity does not provide a way to scale Shuriken particle system in Editor. The process to scale each particle system manually is very inconvenient.&lt;/p&gt;
&lt;p&gt;There are some plugins on the Asset Store which can help you with this tasks:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.assetstore.unity3d.com/en/#!/content/9703"&gt;Simple Particle Scaler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.assetstore.unity3d.com/en/#!/content/4400"&gt;Particle Scaler&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I've also written a tool to scale Shuriken Particles in the Editor: &lt;a href="https://github.com/minhhh/unity-particle-scaler"&gt;unity-particle-scaler&lt;/a&gt;. It's very convenient and simple to use.&lt;/p&gt;</summary><category term="unity"></category><category term="particlesystem"></category></entry><entry><title>Unity Asset Bundle</title><link href="http://minhhh.github.io/posts/unity-asset-bundle" rel="alternate"></link><published>2016-11-29T00:00:00-05:00</published><updated>2016-11-29T00:00:00-05:00</updated><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2016-11-29:posts/unity-asset-bundle</id><summary type="html">&lt;p&gt;Asset Bundle is a big topic in Unity. Initially, you want to grasp the basic setup and make something work. As your games get bigger, you might want to do more customization to make sure you have full control of the lifecycle. Here are some documents I've studied while learning about asset bundle. Ultimately, my goal is to make a full asset bundle workflow for big online game, so this blog will be a work in progress until I can transfer it into a working repository.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Asset bundle and AssetBundleManager&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://unity3d.com/learn/tutorials/topics/scripting/assetbundles-and-assetbundle-manager"&gt;AssetBundles and the AssetBundle Manager&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;AssetBundles are downloaded and cached in their entirety.&lt;/li&gt;
&lt;li&gt;AssetBundles do not need to be loaded in their entirety.&lt;/li&gt;
&lt;li&gt;Assets in AssetBundles can have dependencies on other assets.&lt;/li&gt;
&lt;li&gt;Assets in AssetBundles can share dependencies with other assets.&lt;/li&gt;
&lt;li&gt;Each AssetBundle has some technical overhead, both in the size of the file and the need to manage that file.&lt;/li&gt;
&lt;li&gt;AssetBundles should be built for each target platform.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The steps of working with AssetBundles in the editor fall roughly into these steps:&lt;ul&gt;
&lt;li&gt;Organizing &amp;amp; Setting-up AssetBundles in the editor.&lt;/li&gt;
&lt;li&gt;Building AssetBundles.&lt;/li&gt;
&lt;li&gt;Uploading AssetBundles to external storage.&lt;/li&gt;
&lt;li&gt;Downloading AssetBundles at run-time.&lt;/li&gt;
&lt;li&gt;Loading objects from AssetBundles.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Using Asset Variants to support different resolution&lt;ul&gt;
&lt;li&gt;Create Variants folder&lt;/li&gt;
&lt;li&gt;Create corresponding SD and HD folder (must be same structure)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Pack sprites into AssetBundle&lt;ul&gt;
&lt;li&gt;Use packing tag normally. Remember to set Sprite Mode: Single. Then set the AssetBundle&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Load sprite sheet from Asset Bundle&lt;ul&gt;
&lt;li&gt;Can load Sprite or Texture2D, but it can't load Sprite from a SpriteSheet directly&lt;/li&gt;
&lt;li&gt;http://forum.unity3d.com/threads/packing-a-texture-sprite-sheet-in-an-asset-bundle-with-already-sliced-subtextures-possible.313186/&lt;/li&gt;
&lt;li&gt;Basically use LoadAssetWithSubAssets&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Issues&lt;ul&gt;
&lt;li&gt;No subfolder inside AssetBundle&lt;/li&gt;
&lt;li&gt;Clear cache in &lt;code&gt;~/Library/Caches/Unity/&lt;/code&gt; &lt;a href="http://www.leandro.co.uk/unity/caching-assetbundles-in-unity/"&gt;http://www.leandro.co.uk/unity/caching-assetbundles-in-unity/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Loading prefabs with script references from assetbundle&lt;ul&gt;
&lt;li&gt;http://answers.unity3d.com/questions/1032495/loading-prefabs-with-script-references-from-assetb.html&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Variants with prefab&lt;ul&gt;
&lt;li&gt;http://forum.unity3d.com/threads/official-how-did-asset-bundle-variant-fail-to-satisfy-your-hd-sd-use-case.375716/&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Bundles have to be updated across unity version: http://forum.unity3d.com/threads/end-of-the-resources-folder.363800/&lt;ul&gt;
&lt;li&gt;Or force player to update their client&lt;/li&gt;
&lt;li&gt;Client has to update and redownload ALL bundles&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="https://unity3d.com/learn/tutorials/topics/best-practices/assetbundle-usage-patterns"&gt;AssetBundle usage patterns&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If an AssetBundle is unloaded improperly, it can cause Object duplication in memory&lt;/li&gt;
&lt;li&gt;Most projects should use AssetBundle.Unload(true) and adopt a method to ensure that Objects are not duplicated&lt;/li&gt;
&lt;li&gt;&lt;a href="https://unity3d.com/ru/learn/tutorials/topics/best-practices/assetbundle-fundamentals#Loading_Asset_Bundles"&gt;AssetBundle.CreateFromMemory&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;loads an AssetBundle from a managed-code byte array (byte[] in C#)&lt;/li&gt;
&lt;li&gt;If the AssetBundle is LZMA compressed, it will decompress the AssetBundle while copying&lt;/li&gt;
&lt;li&gt;Uncompressed and LZ4-compressed AssetBundles will be copied verbatim&lt;/li&gt;
&lt;li&gt;The peak amount of memory consumed by this API will be at least twice the size of the AssetBundle: one copy in native memory created by the API, and one copy in the managed byte array passed to the API&lt;/li&gt;
&lt;li&gt;Assets loaded from an AssetBundle created via this API will therefore be duplicated three times in memory&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://unity3d.com/ru/learn/tutorials/topics/best-practices/assetbundle-fundamentals#Loading_Asset_Bundles"&gt;AssetBundle.CreateFromFile&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;If the AssetBundles are uncompressed or LZ4&lt;ul&gt;
&lt;li&gt;On device: only load the AssetBundle's header. Objects are loaded on-demand. No excess memory will be consumed.&lt;/li&gt;
&lt;li&gt;On Editor: load the entire AssetBundle into memory&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Calls to AssetBundle.LoadFromFile will always fail for LZMA-compressed AssetBundles.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://unity3d.com/ru/learn/tutorials/topics/best-practices/assetbundle-fundamentals#Loading_Asset_Bundles"&gt;WWW.LoadFromCacheOrDownload&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;WWW object will keep a full copy of the AssetBundle's bytes in native memory&lt;/li&gt;
&lt;li&gt;3 ways to avoid&lt;ul&gt;
&lt;li&gt;Keep AssetBundles small&lt;/li&gt;
&lt;li&gt;If using Unity 5.3 or newer, switch to using the new UnityWebRequest API's DownloadHandlerAssetBundle, which does not cause memory spikes during downloads.&lt;/li&gt;
&lt;li&gt;Write a custom downloader. For more information, see the Custom downloaders section.&lt;/li&gt;
&lt;li&gt;Write a custom downloader&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://unity3d.com/ru/learn/tutorials/topics/best-practices/assetbundle-fundamentals#Loading_Asset_Bundles"&gt;AssetBundleDownloadHandler&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;LZMA-compressed AssetBundles will be decompressed during download and cached uncompressed.&lt;/li&gt;
&lt;li&gt;does not keep a native-code copy of all downloaded bytes&lt;/li&gt;
&lt;li&gt;supports caching in a manner identical to WWW.LoadFromCacheOrDownload&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Examples of situations which may prevent the use of UnityWebRequest or WWW.LoadFromCacheOrDownload:&lt;ul&gt;
&lt;li&gt;When fine-grained control over the AssetBundle cache is required&lt;/li&gt;
&lt;li&gt;When a project needs to implement a custom compression strategy&lt;/li&gt;
&lt;li&gt;When a project wishes to use platform-specific APIs to satisfy certain requirements, such as the need to stream data while inactive. Example: Using iOS' Background Tasks API to download data while in the background.&lt;/li&gt;
&lt;li&gt;When AssetBundles must be delivered over SSL on platforms where Unity does not have proper SSL support (such as PC).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;AssetBundles in the caching system are identified only by their file names&lt;/li&gt;
&lt;li&gt;LZ4 decompress individual Objects without needing to decompress the entire AssetBundle&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="https://docs.unity3d.com/Manual/AssetBundleCompression.html"&gt;Asset Bundle Compression&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="https://matome.naver.jp/odai/2139114084705385001"&gt;Unity AssetBundle summary&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[Unite Japan 2013] Scene / Memory / Asset Bundle&lt;ul&gt;
&lt;li&gt;【process】&lt;ul&gt;
&lt;li&gt;① Build the asset bundle (A).&lt;/li&gt;
&lt;li&gt;② Download the asset bundle (A).&lt;/li&gt;
&lt;li&gt;③ Load the asset bundle (A).&lt;/li&gt;
&lt;li&gt;④ Load the asset (B) from the asset bundle.&lt;/li&gt;
&lt;li&gt;⑤ Generate an instance (C) of the asset.&lt;/li&gt;
&lt;li&gt;⑥ Unload the asset bundle (A).&lt;/li&gt;
&lt;li&gt;(Note that unloaded assets can not depend on other assets)&lt;/li&gt;
&lt;li&gt;⑦ Discard instance (C).&lt;/li&gt;
&lt;li&gt;⑧ Unload asset (B).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;AssetBundle placement place】&lt;ul&gt;
&lt;li&gt;① Server&lt;/li&gt;
&lt;li&gt;② In the StreemingAsset folder&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Minimize size of AssetBundle】&lt;ul&gt;
&lt;li&gt;① It does not depend on others (Include all referenced assets in AssetBundle.)&lt;/li&gt;
&lt;li&gt;② It depends on in-app scripts and basic components.&lt;/li&gt;
&lt;li&gt;③ It depends on another AssetBundle.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;【Correspondence by Platform】&lt;ul&gt;
&lt;li&gt;① Editor (If you are looking at bundled assets bundle, it will be difficult to test, so let's do something.)&lt;/li&gt;
&lt;li&gt;② Android&lt;/li&gt;
&lt;li&gt;③ IOS&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;【How to Load Asset Bundle】&lt;ul&gt;
&lt;li&gt;① Use the cache. 'WWW.LoadFromCacheOrDownload'&lt;/li&gt;
&lt;li&gt;(Note: 150 days deletion and caching can not be deleted.)&lt;/li&gt;
&lt;li&gt;② One time only "WWW (" http: // ... "), WWW (" file: // ... ")"&lt;/li&gt;
&lt;li&gt;③ Save locally and do not use cache. "AssetBundle.CreateFromFile, AssetBundle.CreateFromMemory"&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Supplement 1: How to summarize asset bundles&lt;ul&gt;
&lt;li&gt;① Compressed or uncompressed&lt;/li&gt;
&lt;li&gt;② Individual or large quantity&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Supplement 2&lt;ul&gt;
&lt;li&gt;① Individual synchronous load&lt;/li&gt;
&lt;li&gt;② Individual asynchronous load&lt;/li&gt;
&lt;li&gt;③ bulk synchronous load&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;【Efficient Build】&lt;ul&gt;
&lt;li&gt;① Automation&lt;/li&gt;
&lt;li&gt;② Folder structure&lt;/li&gt;
&lt;li&gt;③ Adjustment of property at build time · · ·&lt;/li&gt;
&lt;li&gt;(Side street: property adjustment at asset import)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;【Correspondence at the time of version up】 · · · I do not use it so I omit it&lt;ul&gt;
&lt;li&gt;① Cash on the URL&lt;/li&gt;
&lt;li&gt;② Compatibility&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;【Others】 · · · I do not use it so I omit it&lt;ul&gt;
&lt;li&gt;① To use binary data.&lt;/li&gt;
&lt;li&gt;② Include the script in the asset bundle. (It is impossible in IOS, so it is omitted)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="unity"></category><category term="assetbundle"></category></entry><entry><title>Game backends</title><link href="http://minhhh.github.io/posts/game-backends" rel="alternate"></link><published>2016-11-25T00:00:00-05:00</published><updated>2016-11-25T00:00:00-05:00</updated><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2016-11-25:posts/game-backends</id><summary type="html">&lt;p&gt;&lt;strong&gt;&lt;a href="http://blog.soom.la/2016/02/top-10-parse-alternatives-game-backend.html"&gt;Top 10 Parse Alternatives For Your Game Backend&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GameSparks&lt;/li&gt;
&lt;li&gt;PlayFab&lt;/li&gt;
&lt;li&gt;HeroicLabs&lt;/li&gt;
&lt;li&gt;Gamedonia&lt;/li&gt;
&lt;li&gt;Kii&lt;/li&gt;
&lt;li&gt;Kinvey&lt;/li&gt;
&lt;li&gt;BrainCloud&lt;/li&gt;
&lt;li&gt;GamuaFlox&lt;/li&gt;
&lt;li&gt;App42&lt;/li&gt;
&lt;li&gt;Photon&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="http://www.pocketgamer.biz/feature/59149/12-reasons-to-use-gamesparks/"&gt;Why should you use GameSparks&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;GameSparks vs PlayFab vs Firebase&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/gamedev/comments/4otyeb/gamesparks_vs_playfab/"&gt;Gamesparks vs PlayFab?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://spaceteamadmirals.club/blog/spaceteam-is-coming-to-your-library/"&gt;Spaceteam&lt;/a&gt; uses GameSparks&lt;/li&gt;
&lt;li&gt;&lt;a href="https://forum.unity3d.com/threads/firebase-vs-playfab-vs-gamesparks.451840/"&gt;Firebase vs Playfab vs Gamesparks?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="game"></category><category term="backend"></category></entry><entry><title>Writing Unity iOS plugin</title><link href="http://minhhh.github.io/posts/writing-unity-ios-plugin" rel="alternate"></link><published>2016-11-25T00:00:00-05:00</published><updated>2016-11-25T00:00:00-05:00</updated><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2016-11-25:posts/writing-unity-ios-plugin</id><summary type="html">&lt;p&gt;&lt;a href="https://docs.unity3d.com/Manual/PluginsForIOS.html"&gt;Building Plugins for iOS&lt;/a&gt; is a guide from Unity.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Two approaches&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Approach 1: Put plugin source code &lt;code&gt;.mm,.c,.cpp&lt;/code&gt; files in &lt;code&gt;Assets/Plugins/iOS&lt;/code&gt; folder.&lt;/li&gt;
&lt;li&gt;Approach 2: Build plugin library to &lt;code&gt;.a&lt;/code&gt; file then put it in &lt;code&gt;Assets/Plugins/iOS&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="http://stackoverflow.com/questions/14834626/how-to-build-unity3d-plugin-for-ios"&gt;How to build Unity3d Plugin for iOS&lt;/a&gt; experience from a developer&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blogs.shephertz.com/2013/08/23/bridging-the-gap-plugin-for-unity-and-ios/"&gt;Plugin for Unity and iOS&lt;/a&gt; iOS plugin with source code inside Asset folder&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.slideshare.net/kaijungchen/unity3-d-plugins-development-guide-29659247"&gt;Unity3D Plugins Development Guide&lt;/a&gt;&lt;/p&gt;</summary><category term="unity"></category><category term="ios"></category></entry><entry><title>How to do blur effect in Unity</title><link href="http://minhhh.github.io/posts/how-to-do-blur-effect-in-unity" rel="alternate"></link><published>2016-11-24T00:00:00-05:00</published><updated>2016-11-24T00:00:00-05:00</updated><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2016-11-24:posts/how-to-do-blur-effect-in-unity</id><summary type="html">&lt;p&gt;&lt;strong&gt;Image Blur&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;can use a camera which render to a rendered texture&lt;/li&gt;
&lt;li&gt;add the images to be rendered to a second canvas, which uses the new camera with screenspace-camera&lt;/li&gt;
&lt;li&gt;Add blur shader to the Camera, or a parent object which contains all images&lt;/li&gt;
&lt;li&gt;Add the rendered texture to anywhere you like in the first camera&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Dynamic Background Blur&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://answers.unity3d.com/questions/21699/unity-blur-behind-window.html"&gt;Blur Behind Window&lt;/a&gt; Use Camera post effect&lt;/li&gt;
&lt;li&gt;&lt;a href="http://forum.unity3d.com/threads/solved-dynamic-blurred-background-on-ui.345083/"&gt;Dynamic Blurred Background on UI&lt;/a&gt; Use Grabpass&lt;/li&gt;
&lt;li&gt;http://blog.ivank.net/fastest-gaussian-blur.html&lt;/li&gt;
&lt;/ul&gt;</summary><category term="unity"></category><category term="blur"></category></entry><entry><title>Unity local network multiplayer</title><link href="http://minhhh.github.io/posts/unity-local-network-multiplayer" rel="alternate"></link><published>2016-11-21T00:00:00-05:00</published><updated>2016-11-21T00:00:00-05:00</updated><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2016-11-21:posts/unity-local-network-multiplayer</id><summary type="html">&lt;p&gt;iOS device can connect to iOS device via Bluetooth using:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.assetstore.unity3d.com/en/#!/content/2739"&gt;MultiPeer Local Multiplayer Plugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://prime31.com/docs#iosGCMP"&gt;GameCenter Multiplayer plugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;U3DXT&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Android device can connect to Android device via Bluetooth using:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Android Bluetooth Multiplayer (Pro)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://github.com/DarkRay/Unity3D-bluetooth"&gt;https://github.com/DarkRay/Unity3D-bluetooth&lt;/a&gt; A low level bluetooth library.&lt;/p&gt;
&lt;p&gt;Android and iOS cannot connect to each other via iOS as mentioned &lt;a href="http://stackoverflow.com/questions/18884705/transfer-data-between-ios-and-android-via-bluetooth"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://stackoverflow.com/questions/13032540/unity3d-for-ios-and-android-multiplayer-bluetooth-connection"&gt;Unity3D for iOS and Android: Multiplayer&lt;/a&gt;. Options for multiplayer game&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;via Bluetooth (using Prime31 plugin)&lt;ul&gt;
&lt;li&gt;iOS&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;via LAN (using Unity RPC) The players can start combats in a Local Area Network with any of above devices: iOS vs iOS, iOS vs Android, Android vs Mac, and so on.&lt;ul&gt;
&lt;li&gt;iOS&lt;/li&gt;
&lt;li&gt;Android&lt;/li&gt;
&lt;li&gt;Mac&lt;/li&gt;
&lt;li&gt;Web (Kongregate)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;via Game Center (using Prime31 plugin): Uses the Game Center multiplayer to match combats.&lt;ul&gt;
&lt;li&gt;iOS&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;via Global Server (an in-house solution): The players can start combats around the world with any of above devices: iOS vs iOS, iOS vs Android, Android vs Mac, and so on.&lt;ul&gt;
&lt;li&gt;iOS&lt;/li&gt;
&lt;li&gt;Android&lt;/li&gt;
&lt;li&gt;Mac&lt;/li&gt;
&lt;li&gt;Web (Kongregate)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://docs.unity3d.com/Manual/UNetOverview.html"&gt;UNET&lt;/a&gt; the new Unity Networking library.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://forum.unity3d.com/threads/unet-sample-projects.331978/"&gt;Unet sample projects&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://unity3d.com/learn/tutorials/topics/multiplayer-networking/introduction-simple-multiplayer-example?playlist=29690"&gt;Multiplayer Networking Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://forum.unity3d.com/threads/unity-5-unet-multiplayer-tutorials-making-a-basic-survival-co-op.325692/"&gt;Unity 5 UNET Multiplayer Tutorials&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="http://www.tasharen.com/?page_id=4518"&gt;TNET&lt;/a&gt; Another option which uses UDP for multiplayer game.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://allseenalliance.org/framework"&gt;Alljoyn&lt;/a&gt; makes it easy for devices to communicate. Unfortunately it does not support Unity.&lt;/p&gt;</summary><category term="unity"></category><category term="bluetooth"></category><category term="multiplayer"></category></entry><entry><title>Setting sorting layer and order in layer of Mesh Renderer</title><link href="http://minhhh.github.io/posts/setting-sorting-layer-and-order-in-layer-of-mesh-renderer" rel="alternate"></link><published>2016-10-30T00:00:00-04:00</published><updated>2016-10-30T00:00:00-04:00</updated><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2016-10-30:posts/setting-sorting-layer-and-order-in-layer-of-mesh-renderer</id><summary type="html">&lt;p&gt;Unity 5.x exposes the sorting layer and order in layer of &lt;code&gt;SpriterRenderer&lt;/code&gt;, but not &lt;code&gt;MeshRenderer&lt;/code&gt;. Fortunately, it's very easy setting these property of the &lt;code&gt;MeshRenderer&lt;/code&gt; in code. I've created a simple solution for setting sorting layer and order in layer of any &lt;code&gt;Renderer&lt;/code&gt; component using a simple component called &lt;a href="https://github.com/minhhh/unity-sortinglayer-setter"&gt;SortingLayerSetter&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It looks like this in the Editor&lt;/p&gt;
&lt;p&gt;&lt;img alt="example 1" src="https://raw.githubusercontent.com/minhhh/unity-sortinglayer-setter/master/images/example1.png" /&gt;&lt;/p&gt;</summary><category term="unity"></category></entry><entry><title>When to use Script Execution Order</title><link href="http://minhhh.github.io/posts/when-to-use-script-execution-order" rel="alternate"></link><published>2016-10-28T00:01:00-04:00</published><updated>2016-10-28T00:01:00-04:00</updated><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2016-10-28:posts/when-to-use-script-execution-order</id><summary type="html">&lt;p&gt;Normally we don't control the execution order of &lt;code&gt;MonoBehaviour&lt;/code&gt; scripts, and we should not. However, there are cases where we do want some scripts to be executed before others. Some usecases include:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A &lt;code&gt;Controller&lt;/code&gt; script that should be executed as the entry point to the scene&lt;/li&gt;
&lt;li&gt;Scripts which use &lt;code&gt;LateUpdate&lt;/code&gt; and must be executed in specific order&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For these cases, we will assign an integer number to those scripts in &lt;code&gt;Edit &amp;gt; Project Settings &amp;gt; Script Execution Order&lt;/code&gt;. It's best practice to use large and discrete number such as &lt;code&gt;100&lt;/code&gt;, &lt;code&gt;200&lt;/code&gt;, &lt;code&gt;-100&lt;/code&gt; instead of &lt;code&gt;1&lt;/code&gt;, &lt;code&gt;2&lt;/code&gt;, &lt;code&gt;3&lt;/code&gt; because it would make it easier to insert something in between them when we need to.&lt;/p&gt;
&lt;p&gt;One inconvenience with Unity Editor GUI for &lt;code&gt;Script Execution Order&lt;/code&gt; is that it's a bit hard to find your classes when there are a lot of them. The solution for this is to add &lt;code&gt;Script Execution Order&lt;/code&gt; as meta information to the class using attribute. There's already an implementation for this: &lt;a href="https://github.com/kwnetzwelt/ugb-source/blob/UGB-3.0/UnityGameBase/Core/Editor/GameScriptExecutionOrder.cs"&gt;https://github.com/kwnetzwelt/ugb-source/blob/UGB-3.0/UnityGameBase/Core/Editor/GameScriptExecutionOrder.cs&lt;/a&gt; and &lt;a href="https://github.com/kwnetzwelt/ugb-source/blob/UGB-3.0/UnityGameBase/ScriptExecutionOrderAttribute.cs"&gt;https://github.com/kwnetzwelt/ugb-source/blob/UGB-3.0/UnityGameBase/ScriptExecutionOrderAttribute.cs&lt;/a&gt;. Using these 2 classes, now we can add &lt;code&gt;Script Execution Order&lt;/code&gt; to any class as follows:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[ScriptExecutionOrder(-1000)]&lt;/span&gt;
&lt;span class="na"&gt;public abstract class Game : MonoBehaviour&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="unity"></category></entry><entry><title>Run specific code when Editor starts</title><link href="http://minhhh.github.io/posts/run-specific-code-when-editor-starts" rel="alternate"></link><published>2016-10-28T00:00:00-04:00</published><updated>2016-10-28T00:00:00-04:00</updated><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2016-10-28:posts/run-specific-code-when-editor-starts</id><summary type="html">&lt;p&gt;Sometimes we want to execute code whenever we hit &lt;code&gt;Play&lt;/code&gt; button in Unity Editor. The reason for this usually is that we want to enforce some workflow automatically such as getting specific environment information (e.g. git hash, date) and fill it in a prefab or something. We could do these things by creating a Custom Window with a button somewhere, but it feels too manual.&lt;/p&gt;
&lt;p&gt;Fortunately, Unity has offered a simple way to do this, that is &lt;code&gt;InitializeOnLoadAttribute&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://web.archive.org/web/20160515043658/http://blog.andreimarks.com/2012/08/16/unity-how-to-run-specific-code-only-when-building-out-a-project"&gt;http://blog.andreimarks.com/2012/08/16/unity-how-to-run-specific-code-only-when-building-out-a-project/&lt;/a&gt; shows an usecase of &lt;code&gt;InitializeOnLoadAttribute&lt;/code&gt;: to generate a tracking tag of the build with the build date.&lt;/p&gt;
&lt;p&gt;Beware of a potential problem &lt;a href="https://web.archive.org/web/20161015115941/http://www.createdbyx.com/post/2013/02/17/Unity-Tip-101-55-%E2%80%93-InitializeOnLoad-ResourcesLoad-gotcha%E2%80%99s.aspx"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;An awesome review of other ways to execute code on startup are listed here &lt;a href="http://www.codingjargames.com/blog/2015/08/04/unity-and-initialization-order/"&gt;http://www.codingjargames.com/blog/2015/08/04/unity-and-initialization-order/&lt;/a&gt;&lt;/p&gt;</summary><category term="unity"></category></entry><entry><title>MVC in Unity</title><link href="http://minhhh.github.io/posts/mvc-in-unity" rel="alternate"></link><published>2016-10-27T00:00:00-04:00</published><updated>2016-10-27T00:00:00-04:00</updated><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2016-10-27:posts/mvc-in-unity</id><summary type="html">&lt;h1&gt;Some MVC like frameworks in Unity&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="https://forum.unity3d.com/threads/3usd-key-value-observing-lightweight-implementation-of-kvo-for-c.330319/"&gt;Key Value Observing&lt;/a&gt;&lt;/strong&gt; This is a simple implementation of MVC according to his own understandings&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="https://github.com/cgarciae/karma"&gt;Karma&lt;/a&gt;&lt;/strong&gt; Lightweight MVC framework using Zenject DI container. It is inspired from &lt;a href="http://engineering.socialpoint.es/MVC-pattern-unity3d-ui.html"&gt;MODEL VIEW CONTROLLER PATTERN FOR UNITY3D USER INTERFACES&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="https://www.assetstore.unity3d.com/en/#!/content/37466"&gt;Marklight&lt;/a&gt;&lt;/strong&gt; Looks nice. It offers XUML and external editor which might be good for view management, but it also feels too restrictive because you have to follow their way.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="http://chromealex.github.io/Unity3d.UI.Windows/"&gt;Unity3d.UI.Windows&lt;/a&gt;&lt;/strong&gt; Uses a Window system to create UI and layout elements. Try doing too many things: Audio, Tweening&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="https://github.com/strangeioc/strangeioc"&gt;strangeioc&lt;/a&gt;&lt;/strong&gt; Obsolete and not maintained&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="https://www.assetstore.unity3d.com/en/#!/content/14381"&gt;uFrame MVVM&lt;/a&gt;&lt;/strong&gt; It's trying to do too much by offering a graphing/diagramming engine and code generation. I really don't like code generation&lt;/p&gt;
&lt;h1&gt;Discussion&lt;/h1&gt;
&lt;p&gt;It looks like the main advantages of using these MVC frameworks are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Some of them can support theme change&lt;/li&gt;
&lt;li&gt;They have some existing controls so you don't have to implement yourself.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;However, there are several disadvantages:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If you don't need to change theme then definitely you don't need to separate View and ViewModel or Presenter.&lt;/li&gt;
&lt;li&gt;UI usually consists of a big container and a lot of smaller views. Testing small views is easy so you don't need to create separate View class for each. Testing the container is complicated, you want to do it with a test scene in Unity anyway, thus there's no need to try to make an ViewModel interface for testing.&lt;/li&gt;
&lt;li&gt;The examples of Unity MVC implementation in some blogs are usually naive and contrived. As such, they don't scale when you have really complex UI. In addition, they usually confuse between UI and gameplay, so they take example such as hitting enemies or updating their HP bar. MVC is suitable for UIs and maybe some turn-based gameplay, but extending it to a fighting gameplay requires much more than some optimistic guesswork.&lt;/li&gt;
&lt;li&gt;Controller needs to behave according to states, that makes the ViewPresenter or ViewModel also have to replicate those states fully or partly. It's quite difficult to know which should be the common behaviour. A simpler way is to just merge Controller and View/ViewPresenter/ViewModel.&lt;/li&gt;
&lt;/ul&gt;</summary><category term="unity"></category><category term="mvc"></category></entry><entry><title>Understanding Promises</title><link href="http://minhhh.github.io/posts/understanding-promises" rel="alternate"></link><published>2016-10-26T00:02:00-04:00</published><updated>2016-10-26T00:02:00-04:00</updated><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2016-10-26:posts/understanding-promises</id><summary type="html">&lt;p&gt;&lt;strong&gt;&lt;a href="https://www.promisejs.org/"&gt;Understand promise vs callback&lt;/a&gt;&lt;/strong&gt; The ABCs of promises&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="https://promise-nuggets.github.io/"&gt;Promise nuggets&lt;/a&gt;&lt;/strong&gt; More examples of promises&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="https://spion.github.io/posts/why-i-am-switching-to-promises.html"&gt;Why I am switching to promises&lt;/a&gt;&lt;/strong&gt; A guy switches from callbacks to promises.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="http://pouchdb.com/2015/05/18/we-have-a-problem-with-promises.html"&gt;We have a problem with promises&lt;/a&gt;&lt;/strong&gt; Promises are not so easy to use if you don't know exactly how to use them properly. Try to avoid the mistakes of using something without fully understanding it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="https://gist.github.com/briancavalier/842626"&gt;Retry patterns&lt;/a&gt;&lt;/strong&gt; Several patterns of retry in promises&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="https://github.com/icodeforlove/promise-retryer"&gt;promise-retryer&lt;/a&gt;&lt;/strong&gt; Another way to do retry with promise which supports
    * custom delays based on attempts
    * maxRetries
    * promise result validation (if it fails then keep trying)&lt;/p&gt;</summary><category term="promise"></category></entry><entry><title>Building social networks</title><link href="http://minhhh.github.io/posts/building-social-networks" rel="alternate"></link><published>2016-10-26T00:01:00-04:00</published><updated>2016-10-26T00:01:00-04:00</updated><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2016-10-26:posts/building-social-networks</id><summary type="html">&lt;p&gt;&lt;strong&gt;&lt;a href="http://www.feverbee.com/2010/01/how-to-build-an-online-community-the-ultimate-list-of-resources.html"&gt;How To Build An Online Community: The Ultimate List Of Resources&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="http://www.communityspark.com/"&gt;CommunitySpark&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="http://headrush.typepad.com/creating_passionate_users/2006/12/how_to_build_a_.html"&gt;How to Build a User Community&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="http://www.chrisbrogan.com/25-ways-to-build-your-community/"&gt;25 Ways to Build Your Community&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="http://blog.guykawasaki.com/2006/02/the_art_of_crea.html#axzz165byhjtT"&gt;The Art of Creating a Community&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="http://www.digital-web.com/articles/building_an_online_community/"&gt;Building an Online Community: Just Add Water&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;</summary><category term="socialnetwork"></category></entry><entry><title>The power of checklist</title><link href="http://minhhh.github.io/posts/the-power-of-checklist" rel="alternate"></link><published>2016-10-10T00:00:00-04:00</published><updated>2016-10-10T00:00:00-04:00</updated><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2016-10-10:posts/the-power-of-checklist</id><summary type="html">&lt;h2&gt;Why&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The world has become more complex&lt;/li&gt;
&lt;li&gt;Our brain has not changed much&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Examples&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Checklists in aviation help alleviate accidents&lt;/li&gt;
&lt;li&gt;Checklists in construction makes the failure list very low&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Benefits&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Checklists verify that the necessary minimum gets done&lt;/strong&gt; Because sometimes the most important stuff is the simple ones.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Checklists free up mental RAM&lt;/strong&gt; Checklists don’t replace judgment, they enhance it.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Checklists instill discipline&lt;/strong&gt; and increase the chance of stuff getting done.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Checklists save time&lt;/strong&gt; because you spend less time fixing simple mistakes.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;How&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Investigate your failures and look for “killer items.”&lt;/strong&gt; Look for failure or friction points in the tasks you do routinely&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Focus only on the “stupid” essential stuff that’s frequently overlooked or skipped&lt;/strong&gt; Just focus on putting down the “stupid” but essential stuff that you frequently miss. Your checklist should have no more than 9 items on it.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Decide if you need a “communication” checklist&lt;/strong&gt; Most checklists are likely procedural (they lay out things you need to do), but some tasks or projects are so complex that communicating with others becomes vital to managing all the moving pieces. In such a case, create a dedicated communication checklist and make sure it includes who needs to talk to whom, by when, and about what.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Decide if your checklist will be a “DO-CONFIRM” or “READ-DO” checklist&lt;/strong&gt;. With DO-CONFIRM checklists, you do your job from memory and experience, but then at a certain point you stop to go through your list to verify you did everything. READ-DO checklists require you to read and perform a task on the checklist before you can move to the next task. If you need more flexibility, go with DO-CONFIRM; if you need more exactness go with READ-DO.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Test your checklist in the real world and refine as needed&lt;/strong&gt;. If you’re still experiencing the same failures or if the checklist makes work cumbersome to the point that it becomes a stumbling block, then you need to refine your checklist.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.artofmanliness.com/2014/12/08/the-power-of-checklists/"&gt;The Power of Checklists&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="checklist"></category></entry><entry><title>Clippings 2016-10-05</title><link href="http://minhhh.github.io/posts/clippings-2016-10-05" rel="alternate"></link><published>2016-10-05T00:00:00-04:00</published><updated>2016-10-05T00:00:00-04:00</updated><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2016-10-05:posts/clippings-2016-10-05</id><summary type="html">&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://medium.com/the-black-box-of-product-management/a-bad-product-decision-340ee680fa0c#.oj0mk9yud"&gt;A Bad Product Decision&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://medium.com/@limedaring/five-tips-for-improving-your-technical-writing-and-documentation-47353723c8a7#.b27zkg7wx"&gt;Five tips for improving your technical writing and documentation&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://medium.com/team-treehouse/7-good-developer-habits-i-wish-id-adopted-sooner-8707931d72f3#.toote9nby"&gt;7 Good Developer Habits I Wish I’d Adopted Sooner&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.sebastiansylvan.com/post/robin-hood-hashing-should-be-your-default-hash-table-implementation/"&gt;Robin Hood Hashing should be your default Hash Table implementation&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="clippings"></category></entry><entry><title>Clippings 2016-10-03</title><link href="http://minhhh.github.io/posts/clippings-2016-10-03" rel="alternate"></link><published>2016-10-03T00:00:00-04:00</published><updated>2016-10-03T00:00:00-04:00</updated><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2016-10-03:posts/clippings-2016-10-03</id><summary type="html">&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://medium.com/@topfunky/think-like-a-software-developer-103dd4db5ec8#.sonyhc7n8"&gt;Think Like a Software Developer&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://nymag.com/news/features/27840/"&gt;How Not to Talk to Your Kids&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://www.mattermost.org/what-slack-might-learn-from-its-open-source-alternative/"&gt;What Slack might learn from its Open Source alternative&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://danluu.com/sounds-easy/"&gt;Why's that company so big? I could do that in a weekend&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://medium.com/the-mission/the-greatest-sales-deck-ive-ever-seen-4f4ef3391ba0#.aatwl06y1"&gt;The Greatest Sales Deck I’ve Ever Seen&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="clippings"></category></entry><entry><title>Generate one-time password from the command line</title><link href="http://minhhh.github.io/posts/generate-one-time-password-from-the-command-line" rel="alternate"></link><published>2016-10-02T00:00:00-04:00</published><updated>2016-10-02T00:00:00-04:00</updated><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2016-10-02:posts/generate-one-time-password-from-the-command-line</id><summary type="html">&lt;p&gt;One-time password is pretty common these days for any type of account that offers two-factor authentication. We can use an app to generate OTP but it would be troublesome if we lost the app or the phone. Fortunately there's a simple way to generate OTP programmatically using libraries such as Python &lt;code&gt;OneTimePass&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;First, install &lt;code&gt;OneTimePass&lt;/code&gt; with &lt;code&gt;pip&lt;/code&gt;:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install onetimepass
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then you get the secret generated from the service provider you're using. Normally it would be a time-based token, such as the ones you use for Google Authenticator.&lt;/p&gt;
&lt;p&gt;To get time-based token you invoke it like this:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;onetimepass&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;otp&lt;/span&gt;

&lt;span class="n"&gt;my_secret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;MFRGGZDFMZTWQ2LK&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;my_token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;otp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_totp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_secret&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;my_token&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Remember to store your secret safely.&lt;/p&gt;</summary><category term="python"></category><category term="otp"></category></entry><entry><title>Unity singleton</title><link href="http://minhhh.github.io/posts/unity-singleton" rel="alternate"></link><published>2016-09-29T00:00:00-04:00</published><updated>2016-09-29T00:00:00-04:00</updated><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2016-09-29:posts/unity-singleton</id><summary type="html">&lt;p&gt;First of all, please remember that Singletons are generally not recommended due to various obvious disadvantages:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hard to reason about code&lt;/li&gt;
&lt;li&gt;Encourage coupling&lt;/li&gt;
&lt;li&gt;Potential concurrency issue&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;However, in game development it's super useful to have singleton for many types of global system, including but not limited to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sound system&lt;/li&gt;
&lt;li&gt;Time manager&lt;/li&gt;
&lt;li&gt;Localization&lt;/li&gt;
&lt;li&gt;Tutorial&lt;/li&gt;
&lt;li&gt;Login&lt;/li&gt;
&lt;li&gt;Global Notifier&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In this article we will look at some options of Singleton implementation we have in Unity to see what problems they're trying to solve and what assumptions they made.&lt;/p&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;p&gt;Let's first review some requirements for a useful singleton system in Unity.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Singleton class types&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MonoBehavior based: These types of singletons extends MonoBehavior and shows themselves in the scene hierarchy so that you can look at their exposed members. Another reason is you want them to have an &lt;code&gt;Update&lt;/code&gt; function to do something useful in it.&lt;/li&gt;
&lt;li&gt;Non MonoBehavior based: Traditional singletons in any OO languages. These singletons don't need to be inspected in the scene nor do they need &lt;code&gt;Update&lt;/code&gt;. We will not focus on these types of singletons.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Singleton lifecycle types&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Has dependencies: These singletons depend on other system or singletons to exist before they can start&lt;/li&gt;
&lt;li&gt;No dependencies: These singletons can be created anytime without waiting for any other entities.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Singleton configurability types&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Has customized parameters: This is a bit overlap with &lt;code&gt;Has dependencies&lt;/code&gt; singletons. These singletons might: 1. Depend on parameters provided by another system, such as the FileSystem to load certian parameters from disk. OR 2. Need customized parameters or linked prefab. They might be in a prefab themselves such as a LevelManager.&lt;/li&gt;
&lt;li&gt;No customized parameters: These singletons behave the same all the time.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Solutions&lt;/h2&gt;
&lt;p&gt;Fortunately there're already some solutions written in &lt;a href="http://wiki.unity3d.com"&gt;unity3d&lt;/a&gt; so we can review and improve them as we wish.&lt;/p&gt;
&lt;h3&gt;AManagerClass&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://wiki.unity3d.com/index.php/AManagerClass"&gt;AManagerClass&lt;/a&gt; is a standard implementation which supports MonoBehavior-based singletons. In the code, we refer to the singleton like this:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    AManager.instance.Foo ();
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;instance&lt;/code&gt; function implementation is as below:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    public static AManager instance {
        get {
            if (s_Instance == null) {
                // This is where the magic happens.
                //  FindObjectOfType(...) returns the first AManager object in the scene.
                s_Instance =  FindObjectOfType(typeof (AManager)) as AManager;
            }

            // If it is still null, create a new instance
            if (s_Instance == null) {
                GameObject obj = new GameObject(&amp;quot;AManager&amp;quot;);
                s_Instance = obj.AddComponent(typeof (AManager)) as AManager;
                Debug.Log (&amp;quot;Could not locate an AManager object. \ AManager was Generated Automaticly.&amp;quot;);
            }

            return s_Instance;
        }
    }
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There are several problems with &lt;code&gt;AManager&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We have to duplicate it for all singleton class&lt;/li&gt;
&lt;li&gt;It's slow due to the 2 checks&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Surely we can do better!&lt;/p&gt;
&lt;h3&gt;AutoSingletonManager&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://wiki.unity3d.com/index.php/AutoSingletonManager"&gt;AutoSingletonManager&lt;/a&gt; solves the code duplication problem of &lt;code&gt;AManager&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here's the main code&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public abstract class AutoSingletonManager : MonoBehaviour { }

public abstract class AutoSingletonManager&amp;lt;T&amp;gt; : AutoSingletonManager where T : AutoSingletonManager
{
    private static bool Compare&amp;lt;T&amp;gt;(T x, T y) where T : class
    {
        return x == y;
    }

    #region Singleton

    private static T _instance = default(T);

    public static T Instance
    {
        get
        {
            if (!Compare&amp;lt;T&amp;gt;(default(T), _instance)) return _instance;

            InitInstance(true);
            return _instance;
        }
    }

    #endregion

    public void Awake()
    {
        InitInstance(false);
    }

    public static void InitInstance(bool shouldInitManager)
    {
        Type thisType = typeof (T);

        _instance = FindObjectOfType&amp;lt;T&amp;gt;();

        if (Compare&amp;lt;T&amp;gt;(default(T), _instance))
        {
            _instance = new GameObject(thisType.Name).AddComponent&amp;lt;T&amp;gt;();
        }

        //Won&amp;#39;t call InitManager from Awake
        if (shouldInitManager)
        {
            (_instance as AutoSingletonManager&amp;lt;T&amp;gt;).InitManager();
        }
    }

    public virtual void InitManager() { }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The code uses recursive generic definition. This allow us to reuse code by inheriting from the singleton class as well as from &lt;code&gt;MonoBehaviour&lt;/code&gt;. Note that we don't have to make &lt;code&gt;AutoSingletonManager&amp;lt;T&amp;gt;&lt;/code&gt; inherits from &lt;code&gt;AutoSingletonManager&lt;/code&gt;, instead we can make it inherit from our own class which in turn inherits from MonoBehavior.&lt;/p&gt;
&lt;p&gt;It supports initializing the instance from &lt;code&gt;Awake&lt;/code&gt; so maybe it can be used by adding directly it to an object in the scene. However, &lt;code&gt;InitManager&lt;/code&gt; is not called in &lt;code&gt;Awake&lt;/code&gt; so if you call &lt;code&gt;AutoSingletonManager.Instance&lt;/code&gt; after it already awakes then InitManager will never be called.&lt;/p&gt;
&lt;p&gt;Another more subtle draw back is it uses an unnecessary comparison &lt;code&gt;if (!Compare&amp;lt;T&amp;gt;(default(T), _instance)) return _instance;&lt;/code&gt; in the &lt;code&gt;Instance&lt;/code&gt; property, so it's not optimal if you call &lt;code&gt;Instance&lt;/code&gt; in a &lt;code&gt;Update&lt;/code&gt; loop or something similar.&lt;/p&gt;
&lt;p&gt;Surely we can do better than this.&lt;/p&gt;
&lt;h3&gt;Secure UnitySingleton&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://wiki.unity3d.com/index.php/Secure_UnitySingleton"&gt;SecureUnitySingleton&lt;/a&gt; is the last one of the three singleton implementation in &lt;a href="http://wiki.unity3d.com"&gt;unity3d&lt;/a&gt;. It has a very clear idea about the usecases of singletons. There are 3 main supported usecases:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Exists In Scene: Searches the current scene for an object with the singleton component attached to it.&lt;/li&gt;
&lt;li&gt;Loaded From Resources: This type creates an instance of a prefab with the singleton component attached to it from a Resources folder.&lt;/li&gt;
&lt;li&gt;Create on New GameObject: This type creates a new GameObject and attaches a new instance of the singleton component to it.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are several issues with approach:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Even though the code is quite functional, it still suffers the performance penalty from checking too many things in the &lt;code&gt;Instance&lt;/code&gt; property.&lt;/li&gt;
&lt;li&gt;Lack of lifecyle methods. Even though it provides a static &lt;code&gt;DeleteInstance&lt;/code&gt; method, there's no other methods to execute when the instance is created. You might think that &lt;code&gt;Awake&lt;/code&gt; can be used for that purpose, but it not explicit enough that &lt;code&gt;Awake&lt;/code&gt; is called immediately after &lt;code&gt;Instance&lt;/code&gt; is called. Another possible issue is &lt;code&gt;Awake&lt;/code&gt; will not be called when the prefab is disabled, which should never be desirable but can happen due to a mistake from the developers.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is quite good but surely we can do better.&lt;/p&gt;
&lt;h2&gt;Discussions&lt;/h2&gt;
&lt;p&gt;First of all, we realize that non of the above methods take into account concurrency issue. If we care about concurrency we can do something like this:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    public class MySingleton ...
    {
        static MySingleton _instance = null;
        static object singletonLock = new object ();

        public static MySingleton Instance
        {
            get {
                if (_instance != null) {
                    return;
                }

                lock (singletonLock) {
                    if (_instance != null) {
                        return _instance;
                    }

                    var singletonGameObject = new GameObject (&amp;quot;MySingleton&amp;quot;);
                    GameObject.DontDestroyOnLoad (singletonGameObject);
                    _instance = singletonGameObject.AddComponent&amp;lt; MySingleton &amp;gt; ();

                    ... other initialization code
                }

                return _instance;
            }
        }
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;By using a simple double lock pattern, we seemingly solve the "concurrency problem". The question is: Do we need to?. Why you have the concurrency problem with singleton? It's because you want to &lt;code&gt;lazy load&lt;/code&gt; the singleton, i.e. only create it when it is used for the first time. But that's exactly what we want to avoid if we want to achieve smooth gameplay. So what you should do instead is just create the bloody singleton at the beginning and forget about it. Remember, &lt;code&gt;preload&lt;/code&gt; is better than &lt;code&gt;lazy load&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Secondly, I've already mentioned the check for null is redundant if we know we only call the singleton after it's been initialized. In the usecases listed by &lt;code&gt;SecureSingleton&lt;/code&gt;, we see that the singleton is either created by code or already exists in the scene as a &lt;code&gt;GameObject&lt;/code&gt; which is supposed to be configured by designers. In either case, the code to initialize the scene should be a good place for calling the initialization code of the singleton and there's no need for making it sooner.&lt;/p&gt;
&lt;p&gt;So what will happen if the &lt;code&gt;Instance&lt;/code&gt; property is called before you initialize the singleton? Obviously an exception will be thrown and this is an ideal case for using Unity Assert because you will have a nice message in development mode but you can also turn it off in production build.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    public class GameSingleton&amp;lt;T&amp;gt; : MyBaseBehaviour where T : GameSingleton&amp;lt;T&amp;gt;
    {
        ...
        public static T Instance
        {
            get {
                Assert.IsNotNull (instance);
                return instance;
            }
        }
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note that &lt;code&gt;MyBaseBehaviour&lt;/code&gt; class is a class derived from &lt;code&gt;MonoBehaviour&lt;/code&gt; and is customized specifically for our game. For instance, it might have general code for handling &lt;code&gt;Update&lt;/code&gt; or &lt;code&gt;OnDestroy&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;All that is left now is writing a function &lt;code&gt;CreateInstance&lt;/code&gt; for creating the singleton. This function should be called once only at the exact place where you want it. This means we should design it in such a way to discourage it from being called multiple times randomly by some careless developers. Calling &lt;code&gt;CreateInstance&lt;/code&gt; twice should throw an exception. This is better than mindlessly guard the function in the name of "defensive programming". It will look something like this:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;        public static T CreateInstance()
        {
            Assert.IsNull (instance);

            GameObject go = new GameObject(typeof(T).Name);
            instance = go.AddComponent&amp;lt;T&amp;gt;();
            instance.OnCreated();
            DontDestroyOnLoad(go);

            return instance;
        }


        protected virtual void OnCreated()
        {
        }
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here we have a virtual function &lt;code&gt;OnCreated&lt;/code&gt; waiting to be overriden in subclass. To destroy the singleton, we don't have to use fancy static function &lt;code&gt;DeleteInstance&lt;/code&gt;, instead we can just get the singleton gameobject and destroy it like this:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    GameObject.Destroy (MySingleton.Instance.gameObject);
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;When the &lt;code&gt;OnDestroy&lt;/code&gt; function is called, we will set &lt;code&gt;instance&lt;/code&gt; variable to null then allow subclass to do cleanup themselves. The reason why we don't use &lt;code&gt;DeleteInstance&lt;/code&gt; is because we don't want developers who use the API to think there's anything special about destroying the singleton than just destroying the container object.&lt;/p&gt;
&lt;p&gt;Finally, we discuss feature &lt;code&gt;destroy if exists in scene&lt;/code&gt;. In my opinion, this feature accounts for a very small proportion of our usecases. Most of the time we have a singleton already exists in scene, or in some prefab is because we want to use Unity to store game data. But that's should not be the main way to deal with game data. We'd better use off-unity format to store game data, like text or database. If we need to store linked resources we can use Scriptable Object. The point is to not rely too much on data stored in prefab or scene just because you want designers to change them easily, they can also change text file or database much more easily than firing up Unity. Also, merging prefab is harder than merging text data.&lt;/p&gt;
&lt;p&gt;If you really want to use avoid duplicate singleton in scene, we can simply use this piece of code from &lt;code&gt;SecureUnitySingleton&lt;/code&gt;:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    protected virtual void Awake()
    {
        if (InstanceExists &amp;amp;&amp;amp; instance != this)
            Destroy(gameObject);
    }
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Implementation&lt;/h2&gt;
&lt;p&gt;After we've considered different aspect of singletons and what our real usecases are, we finalize our own version Unity singleton as follows&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;using UnityEngine;
using System;
using UnityEngine.Assertions;

public class SimpleSingleton&amp;lt;T&amp;gt; : BaseMonoBehaviour where T : SimpleSingleton&amp;lt;T&amp;gt;
{
    private static T instance;

    public static T Instance {
        get {
            Assert.IsNotNull (instance, &amp;quot;Instance is null. Please call CreateInstance first!&amp;quot;);
            return instance;
        }
    }

    public static T CreateInstance ()
    {
        if (instance != null) {
            Assert.IsNull (instance, &amp;quot;Instance is not null. Please call CreateInstance once only&amp;quot;);
        }

        GameObject go = new GameObject (typeof(T).Name);
        instance = go.AddComponent&amp;lt;T&amp;gt; ();

        instance.OnCreated ();

        return instance;
    }

    protected virtual void OnDestroy ()
    {
        instance = null;
    }

    protected virtual void OnCreated ()
    {
    }

}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then remember to call &lt;code&gt;CreateInstance&lt;/code&gt; when necessary and in appropriate order.&lt;/p&gt;
&lt;p&gt;The code with a sample scene is available on github at &lt;a href="https://github.com/minhhh/unity-singleton"&gt;https://github.com/minhhh/unity-singleton&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Regarding the &lt;code&gt;Has Customized Parameters&lt;/code&gt; singletons, there are some implementations of this type using Prefab to set the parameters. This method is not recommended. Instead, we can use ScriptableObject to store the parameter and let the Singleton read from these ScriptableObject. This method will make all the settings centralized in a single location.&lt;/p&gt;
&lt;p&gt;TODO: Create SceneSingleton&lt;/p&gt;</summary><category term="unity"></category><category term="singleton"></category></entry><entry><title>Clippings 2016-09-26</title><link href="http://minhhh.github.io/posts/clippings-2016-09-26" rel="alternate"></link><published>2016-09-26T00:00:00-04:00</published><updated>2016-09-26T00:00:00-04:00</updated><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2016-09-26:posts/clippings-2016-09-26</id><summary type="html">&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://strongloop.com/strongblog/node-js-deploy-production-best-practice/"&gt;Best Practices for Deploying Node.js in Production&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/mr-mig/going-to-production/blob/master/serverside-checklist.md"&gt;Serverside checklist&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://sematext.com/blog/2015/10/06/recipe-rsyslog-apache-kafka-logstash/"&gt;Recipe: rsyslog + Kafka + Logstash&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://sematext.com/blog/2016/09/13/logstash-alternatives/"&gt;5 Logstash Alternatives&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="clippings"></category></entry><entry><title>Maple.js Deconstructed</title><link href="http://minhhh.github.io/posts/maplejs-deconstructed" rel="alternate"></link><published>2016-09-25T00:00:00-04:00</published><updated>2016-09-25T00:00:00-04:00</updated><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2016-09-25:posts/maplejs-deconstructed</id><summary type="html">&lt;p&gt;&lt;a href="https://github.com/BonsaiDen/Maple.js"&gt;Maple.js&lt;/a&gt; is a simple event-based multiplayer framework using Node.js&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Deconstruction&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Maple provides a base class for &lt;code&gt;Client&lt;/code&gt; and &lt;code&gt;Server&lt;/code&gt;. Your specific game code should inherit these base classes.&lt;/li&gt;
&lt;li&gt;The supported functionality includes:&lt;ul&gt;
&lt;li&gt;Connect/Disconnect&lt;/li&gt;
&lt;li&gt;Ping server&lt;/li&gt;
&lt;li&gt;Handle arbitrary message&lt;/li&gt;
&lt;li&gt;Sync client server update tick on every frame&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The problems with Maple are:&lt;ul&gt;
&lt;li&gt;Use Websocket, which is slow&lt;/li&gt;
&lt;li&gt;Require too much sync and only applicable for Round-based games.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="deconstructed"></category><category term="network"></category></entry><entry><title>Osmus Deconstructed</title><link href="http://minhhh.github.io/posts/osmus-deconstructed" rel="alternate"></link><published>2016-09-25T00:00:00-04:00</published><updated>2016-09-25T00:00:00-04:00</updated><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2016-09-25:posts/osmus-deconstructed</id><summary type="html">&lt;p&gt;&lt;a href="https://github.com/borismus/osmus"&gt;Osmus&lt;/a&gt; is a tech demo of a HTML5 multiplayer game inspired by &lt;a href="http://www.osmos-game.com/"&gt;Osmos&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Deconstruction&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Osmus uses node.js for the server and HTML5 Canvas with Javascript on the client side. The simulation code is shared between client and server.&lt;/li&gt;
&lt;li&gt;Regarding network, Osmus uses &lt;code&gt;socket.io&lt;/code&gt;. &lt;code&gt;Socket.io&lt;/code&gt; is quite stable and performant so this is ok.&lt;/li&gt;
&lt;li&gt;The multiplayer architecture is Server/Client, with the server being the sole authority. All inputs from any client will be rebroadcast to all clients in the room. There are several problems with this approach&lt;ul&gt;
&lt;li&gt;Not scalable: Simply rebroadcast all messages will increase the load on the server exponentially so this is totally not acceptable. Some sort of rate limit should be applied, such as only sending messages to viewable entities.&lt;/li&gt;
&lt;li&gt;Sudden positional jump on client: If the client entities can move around, then client simulation. client prediction and interpolation with server states should be applied to ensure smooth movement.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="deconstructed"></category><category term="network"></category></entry><entry><title>Clippings 2016-09-21</title><link href="http://minhhh.github.io/posts/clippings-2016-09-21" rel="alternate"></link><published>2016-09-21T00:00:00-04:00</published><updated>2016-09-21T00:00:00-04:00</updated><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2016-09-21:posts/clippings-2016-09-21</id><summary type="html">&lt;p&gt;&lt;a href="http://www.adweek.com/socialtimes/artix-entertainment-prepares-to-launch-adventurequest-3d-on-mobile/645088"&gt;Artix Entertainment Prepares to Launch AdventureQuest 3D on Mobile&lt;/a&gt;&lt;/p&gt;</summary><category term="clippings"></category></entry><entry><title>Clippings 2016-09-19</title><link href="http://minhhh.github.io/posts/clippings-2016-09-19" rel="alternate"></link><published>2016-09-19T00:00:00-04:00</published><updated>2016-09-19T00:00:00-04:00</updated><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2016-09-19:posts/clippings-2016-09-19</id><summary type="html">&lt;p&gt;&lt;a href="http://www.adweek.com/socialtimes/nexon-launches-oz-broken-kingdom-on-ios-android/644925"&gt;Nexon Launches Oz: Broken Kingdom on iOS, Android&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.adweek.com/socialtimes/mobile-game-roundup-asterix-and-friends-legends-of-callasia-and-more/644953"&gt;Mobile Game Roundup: Asterix and Friends, Legends of Callasia and More&lt;/a&gt;&lt;/p&gt;</summary><category term="clippings"></category></entry><entry><title>Clippings 2016-09-18</title><link href="http://minhhh.github.io/posts/clippings-2016-09-18" rel="alternate"></link><published>2016-09-18T00:00:00-04:00</published><updated>2016-09-18T00:00:00-04:00</updated><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2016-09-18:posts/clippings-2016-09-18</id><summary type="html">&lt;p&gt;&lt;a href="https://medium.com/@nodejs/the-progress-of-node-js-a-year-post-node-js-and-io-js-merge-and-where-the-technology-is-going-f168ce9ec8ee#.3vbikg9g0"&gt;The Progress of Node.js a Year Post Node.js and io.js Merge and Where the Technology is Going&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://medium.com/chris-messina/silicon-valley-is-all-wrong-about-the-airpods-8204ede08f0f#.n40nyqzc6"&gt;Why Silicon Valley is all wrong about Apple’s AirPods&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://medium.theuxblog.com/when-card-ui-design-doesnt-work-f4343118d108#.xoalmb1ta"&gt;When Card UI Design Doesn’t Work&lt;/a&gt;&lt;/p&gt;</summary><category term="clippings"></category></entry><entry><title>Clippings 2016-09-17</title><link href="http://minhhh.github.io/posts/clippings-2016-09-17" rel="alternate"></link><published>2016-09-17T00:00:00-04:00</published><updated>2016-09-17T00:00:00-04:00</updated><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2016-09-17:posts/clippings-2016-09-17</id><summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.cloudflare.com/the-relative-cost-of-bandwidth-around-the-world/"&gt;The Relative Cost of Bandwidth Around the World&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="clippings"></category></entry><entry><title>Clippings 2016-09-16</title><link href="http://minhhh.github.io/posts/clippings-2016-09-16" rel="alternate"></link><published>2016-09-16T00:00:00-04:00</published><updated>2016-09-16T00:00:00-04:00</updated><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2016-09-16:posts/clippings-2016-09-16</id><summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/atrakeur/unity-unet-authoritative-networking"&gt;Unity-unet-authoritative-networking&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="clippings"></category></entry><entry><title>Clippings 2016-09-14</title><link href="http://minhhh.github.io/posts/clippings-2016-09-14" rel="alternate"></link><published>2016-09-14T00:00:00-04:00</published><updated>2016-09-14T00:00:00-04:00</updated><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2016-09-14:posts/clippings-2016-09-14</id><summary type="html">&lt;p&gt;&lt;a href="http://www.adriancourreges.com/blog/2016/09/09/doom-2016-graphics-study/"&gt;DOOM (2016) - Graphics Study&lt;/a&gt;&lt;/p&gt;</summary><category term="clippings"></category></entry><entry><title>Clippings 2016-09-13</title><link href="http://minhhh.github.io/posts/clippings-2016-09-13" rel="alternate"></link><published>2016-09-13T00:00:00-04:00</published><updated>2016-09-13T00:00:00-04:00</updated><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2016-09-13:posts/clippings-2016-09-13</id><summary type="html">&lt;p&gt;&lt;a href="http://www.adweek.com/socialtimes/titanfall-frontline-collectible-card-game-announced-for-ios-android/644703"&gt;Titanfall: Frontline Collectible Card Game Announced for iOS, Android&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.adweek.com/socialtimes/square-enix-announces-guardian-codex-for-mobile/644673"&gt;Square Enix Announces Guardian Codex for Mobile&lt;/a&gt;&lt;/p&gt;</summary><category term="clippings"></category></entry><entry><title>Clippings 2016-09-12</title><link href="http://minhhh.github.io/posts/clippings-2016-09-12" rel="alternate"></link><published>2016-09-12T00:00:00-04:00</published><updated>2016-09-12T00:00:00-04:00</updated><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2016-09-12:posts/clippings-2016-09-12</id><summary type="html">&lt;p&gt;&lt;a href="https://www.reddit.com/r/androiddev/comments/3rrplu/flatbuffers_arent_fast_theyre_lazy_jesse_wilson/"&gt;FlatBuffers aren’t fast, they’re lazy&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.reddit.com/r/gamedev/comments/3lsfcc/savingloading_with_flatbuffers_for_unity_sample/"&gt;Saving/Loading with Flatbuffers for Unity + Sample Code&lt;/a&gt;&lt;/p&gt;</summary><category term="clippings"></category></entry><entry><title>Autoformat C# code from command line</title><link href="http://minhhh.github.io/posts/autoformat-c-code-from-command-line" rel="alternate"></link><published>2016-09-11T00:00:00-04:00</published><updated>2016-09-11T00:00:00-04:00</updated><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2016-09-11:posts/autoformat-c-code-from-command-line</id><summary type="html">&lt;p&gt;We all need a tool to format code automatically according to project's convention. Using an IDE like Visual Studio, Xamarin or MonoDevelop, we can format code easily. However, it's not always convenient to fireup the IDE just for formatting some code, and also having a tool on the command line makes it easier to integrate with other workflows. Therefore, it's great if we have some tool which runs on the command line to auto format our code.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Requirements&lt;/strong&gt;
&lt;em&gt; Customizable format options
&lt;/em&gt; Format whole directory recursively&lt;/p&gt;
&lt;p&gt;The second requirement is relatively easy to implement if we have a tool to format a single file on the commandline because we can just use &lt;code&gt;find&lt;/code&gt; with some filter to iteratively apply the tool to a bunch of files.&lt;/p&gt;
&lt;h2&gt;Solution 1: Astyle&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://astyle.sourceforge.net/"&gt;Artistic Style&lt;/a&gt; is a source code indenter, formatter, and beautifier for the C, C++, C++/CLI, Objective‑C, C# and Java programming languages. We can download and install Astyle rather quickly without any problems on most platforms.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Installation&lt;/strong&gt;
We will use a simple script below to help us install AStyle on Mac OSX. Installation on other platforms can be done in a similar manner&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Usage&lt;/strong&gt;
After we have &lt;code&gt;astyle&lt;/code&gt; available on the command line, applying it for our project is a matter of wrapping everything in a single Make command like so&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# Supposed our Code is in the Code folder
format:
    find Code -iname &amp;quot;*.cs&amp;quot; -not -path &amp;quot;Code/excludedpath/*&amp;quot; | xargs -n 1 -I {} bash -c &amp;quot;astyle --options=.astylerc \&amp;quot;{}\&amp;quot;&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Remember to create a file called &lt;code&gt;.astylerc&lt;/code&gt; and put whatever format options you want to customize for your project there.&lt;/p&gt;
&lt;h2&gt;Solution 2: NRefactory&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/icsharpcode/NRefactory"&gt;NRefactory&lt;/a&gt; is the C# analysis library used in the SharpDevelop and MonoDevelop IDEs. We can write a command line client with our customized parameters and format options, which uses &lt;code&gt;NRefactory&lt;/code&gt; internally to format code.&lt;/p&gt;
&lt;p&gt;TODO: Write a cli using &lt;code&gt;docopt&lt;/code&gt;&lt;/p&gt;</summary><category term="c#"></category><category term="cli"></category></entry><entry><title>Setup Github pages as your blog</title><link href="http://minhhh.github.io/posts/setup-github-pages-as-your-blog" rel="alternate"></link><published>2016-09-10T00:00:00-04:00</published><updated>2016-09-10T00:00:00-04:00</updated><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2016-09-10:posts/setup-github-pages-as-your-blog</id><summary type="html">&lt;p&gt;How to setup github page as your blog? It's actually very easy, just follow the following guides&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://24ways.org/2013/get-started-with-github-pages/"&gt;Get Started With GitHub Pages (Plus Bonus Jekyll)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.thinkful.com/learn/a-guide-to-using-github-pages/start/new-project/user-page/"&gt;A guide to using Github Pages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://knightlab.northwestern.edu/2013/06/13/getting-github-why-journalists-should-know-and-use-the-social-coding-site/"&gt;Getting GitHub: Why journalists should know and use the social coding site&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/csswizardry/csswizardry.github.com"&gt;csswizardry.github.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="blog"></category><category term="github"></category></entry><entry><title>Clippings 2016-09-09</title><link href="http://minhhh.github.io/posts/clippings-2016-09-09" rel="alternate"></link><published>2016-09-09T00:00:00-04:00</published><updated>2016-09-09T00:00:00-04:00</updated><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2016-09-09:posts/clippings-2016-09-09</id><summary type="html">&lt;p&gt;&lt;a href="http://www.alanzucconi.com/2016/07/01/volumetric-rendering/"&gt;Volumetric Rendering&lt;/a&gt;&lt;/p&gt;</summary><category term="clippings"></category></entry><entry><title>Clippings 2016-09-08</title><link href="http://minhhh.github.io/posts/clippings-2016-09-08" rel="alternate"></link><published>2016-09-08T00:00:00-04:00</published><updated>2016-09-08T00:00:00-04:00</updated><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2016-09-08:posts/clippings-2016-09-08</id><summary type="html">&lt;p&gt;&lt;a href="http://www.adweek.com/socialtimes/pokemon-go-is-coming-to-apple-watch/644557"&gt;Pokemon Go Is Coming to Apple Watch&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.adweek.com/socialtimes/nintendo-announces-super-mario-run-for-ios/644523"&gt;Nintendo Announces Super Mario Run for iOS&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.gamefromscratch.com/post/2013/06/11/Creating-art-for-your-game-when-you-are-a-programmer.aspx"&gt;A PROGRAMMER'S GUIDE TO CREATING ART FOR YOUR GAME&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.gamesparks.com/blog/game-engine-analysis-and-comparison/"&gt;Game Engine Analysis and Comparison&lt;/a&gt;&lt;/p&gt;</summary><category term="clippings"></category></entry><entry><title>Clippings 2016-09-07</title><link href="http://minhhh.github.io/posts/clippings-2016-09-07" rel="alternate"></link><published>2016-09-07T00:00:00-04:00</published><updated>2016-09-07T00:00:00-04:00</updated><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2016-09-07:posts/clippings-2016-09-07</id><summary type="html">&lt;p&gt;Some references for object pooling in Unity&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Lean&lt;/span&gt; &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="nl"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//www.assetstore.unity3d.com/en/#!/content/35666)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Object&lt;/span&gt; &lt;span class="n"&gt;Pools&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="nl"&gt;http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//catlikecoding.com/unity/tutorials/object-pools/)&lt;/span&gt;
&lt;span class="nl"&gt;http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//www.theappguruz.com/blog/object-pooling-in-unity-3d&lt;/span&gt;
&lt;span class="nl"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//gist.github.com/quill18/5a7cfffae68892621267&lt;/span&gt;
&lt;span class="nl"&gt;http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//catlikecoding.com/unity/tutorials/object-pools/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Some references for post processing with unity&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;https://interplayoflight.wordpress.com/2015/07/03/adventures-in-postprocessing-with-unity/
http://www.alanzucconi.com/2015/07/08/screen-shaders-and-postprocessing-effects-in-unity3d/
https://www.youtube.com/watch?v=1q3Lt2V8K3k
https://www.youtube.com/watch?v=emCR367rEJQ
&lt;/pre&gt;&lt;/div&gt;</summary><category term="clippings"></category></entry><entry><title>Clippings 2016-09-06</title><link href="http://minhhh.github.io/posts/clippings-2016-09-06" rel="alternate"></link><published>2016-09-06T00:00:00-04:00</published><updated>2016-09-06T00:00:00-04:00</updated><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2016-09-06:posts/clippings-2016-09-06</id><summary type="html">&lt;p&gt;&lt;a href="http://www.gamasutra.com/blogs/SheldonLaframboise/20160222/266309/Breaking_Down_Supercells_Next_Hit_Clash_Royale.php"&gt;Breaking Down Supercell's Next Hit: Clash Royale&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://labertorium.de/unity/789/unity-realtime-mesh-deformation-package/"&gt;UNITY – REALTIME MESH DEFORMATION – PACKAGE&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.gamespot.com/articles/deus-ex-mankind-divided-everything-you-need-to-kno/1100-6442897/"&gt;Deus Ex: Mankind Divided: Everything You Need to Know&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://roguesharp.wordpress.com/"&gt;Creating a Roguelike Game in C#&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Some references for nested prefabs&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;http://coffeepoweredmachine.com/prefab-inception/
http://forum.unity3d.com/threads/prefab-evolution-plugin-nested-prefabs.236719/
http://www.wesleytam.com/010101011/
http://www.demo.bento-studio.com/NestedPrefab/NestedPrefabReference.pdf
https://josephstankowicz.wordpress.com/2013/05/23/the-perils-of-prefabs/
http://www.gamasutra.com/blogs/GuillermoAndrades/20160203/265048/The_Unity_tools_we_use_in_Immortal_Redneck.php
http://www.glenstevens.ca/unity3d-best-practices/#Process
http://rhostatemachine.tumblr.com/post/133273018641/nested-prefabs-in-unity
https://github.com/opencog/unity3d-opencog-game
&lt;/pre&gt;&lt;/div&gt;</summary><category term="clippings"></category></entry><entry><title>Clippings 2016-09-05</title><link href="http://minhhh.github.io/posts/clippings-2016-09-05" rel="alternate"></link><published>2016-09-05T00:00:00-04:00</published><updated>2016-09-05T00:00:00-04:00</updated><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2016-09-05:posts/clippings-2016-09-05</id><summary type="html">&lt;p&gt;&lt;a href="http://www.adweek.com/socialtimes/mobile-game-roundup-a-new-life-riff-racer-and-more/644386"&gt;Mobile Game Roundup: A New Life, Riff Racer and More&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.adweek.com/socialtimes/animoca-brands-launches-he-man-tappers-of-grayskull-on-mobile/644327"&gt;Animoca Brands Launches He-Man Tappers of Grayskull on Mobile&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.gamespot.com/articles/see-brand-new-final-fantasy-15-gameplay-and-more/1100-6443300/"&gt;See Brand New Final Fantasy 15 Gameplay and More&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://blogs.unity3d.com/2016/08/30/get-the-unity-5-5-beta-now/"&gt;GET THE UNITY 5.5 BETA NOW&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.gamespot.com/articles/new-halo-wars-2-gameplay-footage-arrives-as-dev-te/1100-6443305/"&gt;New Halo Wars 2 Gameplay Footage Arrives, As Dev Teases "Completely New" Mode&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Some stuff related to Unity singleton for upcoming blogs&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;http://www.unitygeek.com/unity_c_singleton/
http://huntingtongames.xyz/2016-05-01-unity-using-singletons-for-sound-management/
http://clearcutgames.net/home/?p=437
http://www.theappguruz.com/blog/managers-using-singleton
&lt;/pre&gt;&lt;/div&gt;</summary><category term="clippings"></category></entry><entry><title>Clippings 2016-01-06</title><link href="http://minhhh.github.io/posts/clippings-2016-01-06" rel="alternate"></link><published>2016-01-06T00:00:00-05:00</published><updated>2016-01-06T00:00:00-05:00</updated><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2016-01-06:posts/clippings-2016-01-06</id><summary type="html">&lt;p&gt;&lt;a href="http://stuartsierra.com/2015/12/31/clojure-2015-year-in-review"&gt;Clojure 2015 Year in Review&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://swannodette.github.io/2015/12/23/year-in-review/"&gt;ClojureScript Year In Review&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://medium.com/@pyrolistical/how-to-get-out-of-promise-hell-8c20e0ab0513#.pp1bbsvmi"&gt;How to escape Promise Hell&lt;/a&gt;&lt;/p&gt;</summary><category term="clippings"></category></entry><entry><title>Clippings 2015-12-25</title><link href="http://minhhh.github.io/posts/clippings-2015-12-25" rel="alternate"></link><published>2015-12-25T00:00:00-05:00</published><updated>2015-12-25T00:00:00-05:00</updated><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2015-12-25:posts/clippings-2015-12-25</id><summary type="html">&lt;p&gt;&lt;a href="https://github.com/adleroliveira/dreamjs"&gt;dreamjs&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://stateofstartups.firstround.com/#highlights"&gt;State of Startups&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.itworld.com/article/2935377/open-source-tools/the-slow-death-of-sourceforge.html"&gt;The slow death of SourceForge&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blackshellmedia.com/2015/03/the-7-habits-of-highly-successful-game-developers/"&gt;The 7 Habits of Highly Successful Game Developers&lt;/a&gt;&lt;/p&gt;</summary><category term="clippings"></category></entry><entry><title>Clippings 2015-12-23</title><link href="http://minhhh.github.io/posts/clippings-2015-12-23" rel="alternate"></link><published>2015-12-23T00:00:00-05:00</published><updated>2015-12-23T00:00:00-05:00</updated><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2015-12-23:posts/clippings-2015-12-23</id><summary type="html">&lt;p&gt;&lt;a href="http://www.javacodegeeks.com/2014/05/10-articles-every-programmer-must-read.html"&gt;10 Articles Every Programmer Must Read&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://medium.com/@bryce/how-we-talk-when-we-talk-about-ambition-5fdb4f6fe9cf#.nha9hk3t1"&gt;How We Talk When We Talk About Ambition&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.bithound.io/2015-top-js-devs"&gt;2015's Top JavaScript Devs To Follow&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.phloxblog.in/understanding-view-backbonejs/#.VnpYkNOqpBc"&gt;Understanding view in Backbone.js&lt;/a&gt;&lt;/p&gt;</summary><category term="clippings"></category></entry><entry><title>Clippings 2015-12-18</title><link href="http://minhhh.github.io/posts/clippings-2015-12-18" rel="alternate"></link><published>2015-12-18T00:00:00-05:00</published><updated>2015-12-18T00:00:00-05:00</updated><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2015-12-18:posts/clippings-2015-12-18</id><summary type="html">&lt;p&gt;&lt;a href="https://vimeo.com/125121010"&gt;Making a Silky Smooth Web&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=OrIFaWJ9Glo"&gt;Single Page Web Applications: JavaScript End-to-End (The Hard Stuff)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.gadgette.com/2015/12/16/8-books-for-gamers-that-want-to-know-more-about-the-industry/"&gt;8 books for gamers that want to know more about the industry&lt;/a&gt;&lt;/p&gt;</summary><category term="clippings"></category></entry><entry><title>What is Medium</title><link href="http://minhhh.github.io/posts/what-is-medium" rel="alternate"></link><published>2015-12-03T00:00:00-05:00</published><updated>2015-12-03T00:00:00-05:00</updated><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2015-12-03:posts/what-is-medium</id><summary type="html">&lt;p&gt;Medium is a web-based service that let anyone publish articles online that was founded in 2012 by 2 founders of Twitter: Ev Williams and Biz Stone. Ev Williams said Medium was "a new place on the Internet where people share ideas and stories that are longer than 140 characters and not just for friends."&lt;/p&gt;
&lt;p&gt;According to wikipedia, medium is a &lt;a href="https://en.wikipedia.org/wiki/Medium_(publishing_platform)"&gt;blog publishing platform&lt;/a&gt;. While Medium might look like a standard blogging platform, it had been "designed for little stories that make your day better and manifestos that change the world." And yet "it helps you find the right audience for whatever you have to say.". Also, Medium does not show articles in a reverse-chronological index of content like normal blogging platform.&lt;/p&gt;
&lt;p&gt;Medium seems to do following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create a beautiful, simple blogging platform for everyone&lt;/li&gt;
&lt;li&gt;Pay some people to post to the site, but not most of them&lt;/li&gt;
&lt;li&gt;Promote the people they've paid along with a very small subset of everyone else.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Therefore the content on medium can be either be:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;awesome if they were written by profesisonal writers who were hired and edited by professional editors&lt;/li&gt;
&lt;li&gt;opposite of awesome if they were written by mediocre bloggers.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The differences between Medium and traditional publication are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If the traditional publication publish anything bad or plagiarised, it reflects poorly on them.&lt;/li&gt;
&lt;li&gt;If Medium publishes anything bad or plagiarised, it reflects poorly on the writers&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Medium is good for you if:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You aren’t not going to blog a lot.&lt;/li&gt;
&lt;li&gt;You like the Medium environment.&lt;/li&gt;
&lt;li&gt;You aren’t in it for the money. Medium does have some paid contributors, but not for everyone.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;REFERENCES&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.theatlantic.com/technology/archive/2013/08/what-is-medium/278965/"&gt;What is medium&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://time.com/37586/what-is-medium-medium-is-pretty-cool-thats-what/"&gt;http://time.com/37586/what-is-medium-medium-is-pretty-cool-thats-what/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="medium"></category></entry><entry><title>Setup OSX</title><link href="http://minhhh.github.io/posts/setup-osx" rel="alternate"></link><published>2015-10-14T00:00:00-04:00</published><updated>2015-10-14T00:00:00-04:00</updated><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2015-10-14:posts/setup-osx</id><summary type="html">&lt;p&gt;&lt;div&gt;
    &lt;style type = "text/css" scoped&gt;
.git-content div {
    padding: 0;
    margin: 0;
}

.git-content .git-file {
    border: 1px solid #DEDEDE;
    margin-bottom: 1em;
}

.git-content .git-file .git-meta {
    background-color: #EAEAEA;
    color: #666666;
    font-size: 85%;
    overflow: hidden;
    padding: 0.5em;
}

.git-content .git-file .git-meta a {
    color: #336699;
}

.git-content .git-file .git-meta a:visited {
    color: #773377;
}

.git-content .git-file {
    background-color: #F8F8FF;
    border-bottom: 1px solid #DDDDDD;
    font-size: 100%;
    overflow: auto;
    word-wrap: normal;
}

.git-content .git-file pre {
    background: none repeat scroll 0 0 transparent !important;
    border: medium none !important;
    margin: 0 !important;
    padding: 0 !important;
}
    &lt;/style&gt;
    &lt;div class="git-content"&gt;
        &lt;div class="git-file"&gt;
            &lt;div class="file"&gt;
 &lt;div class="readme blob instapaper_body js-code-block-container" id="readme"&gt;
  &lt;article class="markdown-body entry-content" itemprop="text"&gt;
   &lt;h1&gt;
    &lt;a aria-hidden="true" class="anchor" href="#introduction" id="user-content-introduction"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    INTRODUCTION
   &lt;/h1&gt;
   &lt;p&gt;
    This is the list of some useful tools I used to setup my OSX.
   &lt;/p&gt;
   &lt;p&gt;
    For more awesome osx command lines, see
    &lt;a href="https://github.com/herrbischoff/awesome-osx-command-line"&gt;
     Awesome OS X Command Line
    &lt;/a&gt;
    .
   &lt;/p&gt;
   &lt;h1&gt;
    &lt;a aria-hidden="true" class="anchor" href="#setup" id="user-content-setup"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    SETUP
   &lt;/h1&gt;
   &lt;ul&gt;
    &lt;li&gt;
     &lt;a href="http://lifehacker.com/225873/mac-switchers-tip--remap-the-home-and-end-keys" rel="nofollow"&gt;
      Fix the home and end keys
     &lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
     &lt;a href="http://lifehacker.com/5826055/make-your-keyboard-keys-repeat-properly-when-held-down-in-mac-os-x-lion" rel="nofollow"&gt;
      Make Your Keyboard Keys Repeat Properly
     &lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
     &lt;a href="https://support.apple.com/kb/HT3399" rel="nofollow"&gt;
      Use Fn key normally in Mac
     &lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
     &lt;a href="http://macs.about.com/od/OSXLion107/qt/Os-X-Lion-Automatic-Spelling-Correction.htm" rel="nofollow"&gt;
      Disable automatic spelling
     &lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
     &lt;a href="http://www.michael-noll.com/blog/2007/01/04/word-movement-shortcuts-for-iterm-on-mac-os-x/" rel="nofollow"&gt;
      Word Movement Shortcuts for iTerm
     &lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
     &lt;a href="http://www.hackintosh.zone/downloads/download/506-free-ntfs-driver-for-mac-os-x/" rel="nofollow"&gt;
      Install NTFS driver for macOS
     &lt;/a&gt;
    &lt;/li&gt;
   &lt;/ul&gt;
   &lt;h1&gt;
    &lt;a aria-hidden="true" class="anchor" href="#osx-shortcuts--keys" id="user-content-osx-shortcuts--keys"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    OSX SHORTCUTS &amp;amp; KEYS
   &lt;/h1&gt;
   &lt;div class="highlight highlight-source-shell"&gt;
    &lt;pre&gt;    F11             - Show desktop
    Ctrl left/right - Scroll to the next working desktop
    Command Space   - Show search
    Ctrl Up         - Show all programs
    Ctrl Down       - Show other windows of the same program
    Ctrl Command F  - Toggle full screen
    Cmd Option D    - Toggle taskbar
    Cmd Delete      - Move to trash
    Cmd K           - Clear terminal screen&lt;/pre&gt;
   &lt;/div&gt;
   &lt;h1&gt;
    &lt;a aria-hidden="true" class="anchor" href="#tools" id="user-content-tools"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    TOOLS
   &lt;/h1&gt;
   &lt;ul&gt;
    &lt;li&gt;
     Testdisk - Disk recovery
    &lt;/li&gt;
    &lt;li&gt;
     Blackmagic Disk Speed Test - Disk performance measurement tool.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;a href="http://www.macroplant.com/iexplorer/" rel="nofollow"&gt;
      iexplorer
     &lt;/a&gt;
     - Transfer file with iPhone easily
    &lt;/li&gt;
   &lt;/ul&gt;
   &lt;h2&gt;
    &lt;a aria-hidden="true" class="anchor" href="#quicksilver" id="user-content-quicksilver"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    QuickSilver
   &lt;/h2&gt;
   &lt;ul&gt;
    &lt;li&gt;
     Great replacement for spotlight
    &lt;/li&gt;
   &lt;/ul&gt;
   &lt;h2&gt;
    &lt;a aria-hidden="true" class="anchor" href="#diff-tools" id="user-content-diff-tools"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Diff tools
   &lt;/h2&gt;
   &lt;ul&gt;
    &lt;li&gt;
     &lt;a href="http://scoobygalletas.blogspot.com/2011/09/how-to-install-meld-in-mac-os-x-lion.html" rel="nofollow"&gt;
      Meld
     &lt;/a&gt;
    &lt;/li&gt;
   &lt;/ul&gt;
   &lt;h1&gt;
    &lt;a aria-hidden="true" class="anchor" href="#mount-ssh" id="user-content-mount-ssh"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    MOUNT SSH
   &lt;/h1&gt;
   &lt;p&gt;
    Install sshfs. Then run
   &lt;/p&gt;
   &lt;div class="highlight highlight-source-shell"&gt;
    &lt;pre&gt;    sshfs &lt;span class="pl-k"&gt;&amp;lt;&lt;/span&gt;username&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt;@&lt;span class="pl-k"&gt;&amp;lt;&lt;/span&gt;ip&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt;:&lt;span class="pl-k"&gt;&amp;lt;&lt;/span&gt;folder&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; /Users/&lt;span class="pl-k"&gt;&amp;lt;&lt;/span&gt;username&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt;/&lt;span class="pl-k"&gt;&amp;lt;&lt;/span&gt;folder&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
   &lt;/div&gt;
  &lt;/article&gt;
 &lt;/div&gt;
&lt;/div&gt;

            &lt;div class="git-meta"&gt;
                
                &lt;span&gt;Brought to you by me &lt;a href="https://github.com/minhhh/pelican_git"&gt;pelican_git&lt;/a&gt;.&lt;/span&gt;
                
                &lt;span style="float: right; color: #369;"&gt;&lt;a href="https://github.com/minhhh/wiki/blob/master/mac.md"&gt;view original&lt;/a&gt;&lt;/span&gt;
                &lt;span style="float: right; margin-right: 8px;"&gt;
                    &lt;a style="color: rgb(102, 102, 102);" href="https://github.com/minhhh/wiki/blob/master/mac.md"&gt;mac.md&lt;/a&gt;&lt;/span&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;&lt;/p&gt;</summary><category term="mac"></category><category term="osx"></category></entry><entry><title>An Introduction to Memcache</title><link href="http://minhhh.github.io/posts/an-introduction-to-memcache" rel="alternate"></link><published>2015-10-10T00:00:00-04:00</published><updated>2015-10-10T00:00:00-04:00</updated><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2015-10-10:posts/an-introduction-to-memcache</id><summary type="html">&lt;p&gt;&lt;div&gt;
    &lt;style type = "text/css" scoped&gt;
.git-content div {
    padding: 0;
    margin: 0;
}

.git-content .git-file {
    border: 1px solid #DEDEDE;
    margin-bottom: 1em;
}

.git-content .git-file .git-meta {
    background-color: #EAEAEA;
    color: #666666;
    font-size: 85%;
    overflow: hidden;
    padding: 0.5em;
}

.git-content .git-file .git-meta a {
    color: #336699;
}

.git-content .git-file .git-meta a:visited {
    color: #773377;
}

.git-content .git-file {
    background-color: #F8F8FF;
    border-bottom: 1px solid #DDDDDD;
    font-size: 100%;
    overflow: auto;
    word-wrap: normal;
}

.git-content .git-file pre {
    background: none repeat scroll 0 0 transparent !important;
    border: medium none !important;
    margin: 0 !important;
    padding: 0 !important;
}
    &lt;/style&gt;
    &lt;div class="git-content"&gt;
        &lt;div class="git-file"&gt;
            &lt;div class="file"&gt;
 &lt;div class="readme blob instapaper_body js-code-block-container" id="readme"&gt;
  &lt;article class="markdown-body entry-content" itemprop="text"&gt;
   &lt;h1&gt;
    &lt;a aria-hidden="true" class="anchor" href="#memcache-cheatsheet" id="user-content-memcache-cheatsheet"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    MEMCACHE CHEATSHEET
   &lt;/h1&gt;
   &lt;p&gt;
    Memcached is simple yet powerful. Its simple design promotes quick deployment, ease of development, and solves many problems facing large data caches. Its API is available for most popular languages.
   &lt;/p&gt;
   &lt;h2&gt;
    &lt;a aria-hidden="true" class="anchor" href="#viewing-memcache-stats" id="user-content-viewing-memcache-stats"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Viewing memcache stats
   &lt;/h2&gt;
   &lt;pre&gt;&lt;code&gt;    echo "stats" | nc localhost 11211
&lt;/code&gt;&lt;/pre&gt;
   &lt;h2&gt;
    &lt;a aria-hidden="true" class="anchor" href="#viewing-memcache-server-stats" id="user-content-viewing-memcache-server-stats"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Viewing memcache server stats
   &lt;/h2&gt;
   &lt;pre&gt;&lt;code&gt;    memcached -vv
&lt;/code&gt;&lt;/pre&gt;
   &lt;h2&gt;
    &lt;a aria-hidden="true" class="anchor" href="#viewing-slab-stats" id="user-content-viewing-slab-stats"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Viewing slab stats
   &lt;/h2&gt;
   &lt;pre&gt;&lt;code&gt;    echo "stats slabs" | nc localhost 11211
&lt;/code&gt;&lt;/pre&gt;
   &lt;h2&gt;
    &lt;a aria-hidden="true" class="anchor" href="#viewing-item-stats" id="user-content-viewing-item-stats"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Viewing item stats
   &lt;/h2&gt;
   &lt;pre&gt;&lt;code&gt;    echo "stats items" | nc localhost 11211
&lt;/code&gt;&lt;/pre&gt;
   &lt;h2&gt;
    &lt;a aria-hidden="true" class="anchor" href="#viewing-stats-sizes" id="user-content-viewing-stats-sizes"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Viewing stats sizes
   &lt;/h2&gt;
   &lt;pre&gt;&lt;code&gt;    echo "stats sizes" | nc localhost 11211
&lt;/code&gt;&lt;/pre&gt;
   &lt;h2&gt;
    &lt;a aria-hidden="true" class="anchor" href="#flush-all-cache" id="user-content-flush-all-cache"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Flush all cache
   &lt;/h2&gt;
   &lt;pre&gt;&lt;code&gt;    echo "flush_all" | nc localhost 11211
&lt;/code&gt;&lt;/pre&gt;
   &lt;h2&gt;
    &lt;a aria-hidden="true" class="anchor" href="#print-all-items-of-a-slab" id="user-content-print-all-items-of-a-slab"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Print all items of a slab
   &lt;/h2&gt;
   &lt;pre&gt;&lt;code&gt;    stats cachedump &amp;lt;slabs_id&amp;gt; &amp;lt;limit&amp;gt;
    echo "stats cachedump 1 0" | nc localhost 11211
&lt;/code&gt;&lt;/pre&gt;
   &lt;h2&gt;
    &lt;a aria-hidden="true" class="anchor" href="#get-multiple-items" id="user-content-get-multiple-items"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Get multiple items
   &lt;/h2&gt;
   &lt;pre&gt;&lt;code&gt;    echo "get key1 key2" | nc localhost 11211
&lt;/code&gt;&lt;/pre&gt;
   &lt;h1&gt;
    &lt;a aria-hidden="true" class="anchor" href="#references" id="user-content-references"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    REFERENCES
   &lt;/h1&gt;
   &lt;ul&gt;
    &lt;li&gt;
     &lt;a href="https://code.google.com/p/memcached/wiki/NewStart" rel="nofollow"&gt;
      Memcache Wiki
     &lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
     &lt;a href="http://lzone.de/cheat-sheet/memcached" rel="nofollow"&gt;
      Memcache Cheatsheet
     &lt;/a&gt;
    &lt;/li&gt;
   &lt;/ul&gt;
  &lt;/article&gt;
 &lt;/div&gt;
&lt;/div&gt;

            &lt;div class="git-meta"&gt;
                
                &lt;span&gt;Brought to you by me &lt;a href="https://github.com/minhhh/pelican_git"&gt;pelican_git&lt;/a&gt;.&lt;/span&gt;
                
                &lt;span style="float: right; color: #369;"&gt;&lt;a href="https://github.com/minhhh/wiki/blob/master/memcache.md"&gt;view original&lt;/a&gt;&lt;/span&gt;
                &lt;span style="float: right; margin-right: 8px;"&gt;
                    &lt;a style="color: rgb(102, 102, 102);" href="https://github.com/minhhh/wiki/blob/master/memcache.md"&gt;memcache.md&lt;/a&gt;&lt;/span&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;&lt;/p&gt;</summary><category term="memcache"></category></entry><entry><title>A netcat cheatsheet</title><link href="http://minhhh.github.io/posts/a-netcat-cheatsheet" rel="alternate"></link><published>2015-01-01T00:00:00-05:00</published><updated>2015-01-01T00:00:00-05:00</updated><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2015-01-01:posts/a-netcat-cheatsheet</id><summary type="html">&lt;p&gt;&lt;div&gt;
    &lt;style type = "text/css" scoped&gt;
.git-content div {
    padding: 0;
    margin: 0;
}

.git-content .git-file {
    border: 1px solid #DEDEDE;
    margin-bottom: 1em;
}

.git-content .git-file .git-meta {
    background-color: #EAEAEA;
    color: #666666;
    font-size: 85%;
    overflow: hidden;
    padding: 0.5em;
}

.git-content .git-file .git-meta a {
    color: #336699;
}

.git-content .git-file .git-meta a:visited {
    color: #773377;
}

.git-content .git-file {
    background-color: #F8F8FF;
    border-bottom: 1px solid #DDDDDD;
    font-size: 100%;
    overflow: auto;
    word-wrap: normal;
}

.git-content .git-file pre {
    background: none repeat scroll 0 0 transparent !important;
    border: medium none !important;
    margin: 0 !important;
    padding: 0 !important;
}
    &lt;/style&gt;
    &lt;div class="git-content"&gt;
        &lt;div class="git-file"&gt;
            &lt;div class="file"&gt;
 &lt;div class="readme blob instapaper_body js-code-block-container" id="readme"&gt;
  &lt;article class="markdown-body entry-content" itemprop="text"&gt;
   &lt;h1&gt;
    &lt;a aria-hidden="true" class="anchor" href="#netcat-cheatsheet" id="user-content-netcat-cheatsheet"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    NETCAT CHEATSHEET
   &lt;/h1&gt;
   &lt;p&gt;
    &lt;code&gt;
     netcat
    &lt;/code&gt;
    is a very useful tool for testing/debugging TCP/IP and UDP networking. In this cheetsheet I am sharing some useful examples of netcat usage for everyday purpose.
   &lt;/p&gt;
   &lt;h2&gt;
    &lt;a aria-hidden="true" class="anchor" href="#test-if-a-particular-tcpudp-port-is-open" id="user-content-test-if-a-particular-tcpudp-port-is-open"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Test if a particular TCP/UDP port is open
   &lt;/h2&gt;
   &lt;p&gt;
    To check if a TCP port is open
   &lt;/p&gt;
   &lt;div class="highlight highlight-source-shell"&gt;
    &lt;pre&gt;    nc -v google.com 80
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Connection to google.com port 80 [tcp/http] succeeded!&lt;/span&gt;&lt;/pre&gt;
   &lt;/div&gt;
   &lt;p&gt;
    To check if a UDP port is open, simple add option
    &lt;code&gt;
     -u
    &lt;/code&gt;
   &lt;/p&gt;
   &lt;div class="highlight highlight-source-shell"&gt;
    &lt;pre&gt;    nc -vu google.com 53
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Connection to google.com port 53 [udp/domain] succeeded!&lt;/span&gt;&lt;/pre&gt;
   &lt;/div&gt;
   &lt;h2&gt;
    &lt;a aria-hidden="true" class="anchor" href="#port-scan" id="user-content-port-scan"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Port scan
   &lt;/h2&gt;
   &lt;p&gt;
    Scan UDP ports
   &lt;/p&gt;
   &lt;div class="highlight highlight-source-shell"&gt;
    &lt;pre&gt;    nc -vzu google.com 1-65535&lt;/pre&gt;
   &lt;/div&gt;
   &lt;p&gt;
    To scan TCP ports simply remove the
    &lt;code&gt;
     -u
    &lt;/code&gt;
   &lt;/p&gt;
   &lt;div class="highlight highlight-source-shell"&gt;
    &lt;pre&gt;    nc -vz google.com 1-65535&lt;/pre&gt;
   &lt;/div&gt;
   &lt;h2&gt;
    &lt;a aria-hidden="true" class="anchor" href="#netcat-client-server" id="user-content-netcat-client-server"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Netcat client server
   &lt;/h2&gt;
   &lt;p&gt;
    Open a server that listens to a particular port
   &lt;/p&gt;
   &lt;div class="highlight highlight-source-shell"&gt;
    &lt;pre&gt;    nc -l 2389&lt;/pre&gt;
   &lt;/div&gt;
   &lt;p&gt;
    Open another client connecting to that port
   &lt;/p&gt;
   &lt;div class="highlight highlight-source-shell"&gt;
    &lt;pre&gt;    nc localhost 2389&lt;/pre&gt;
   &lt;/div&gt;
   &lt;p&gt;
    Now you can (insecurely) chat between the 2 terminals.
   &lt;/p&gt;
   &lt;h2&gt;
    &lt;a aria-hidden="true" class="anchor" href="#transfer-single-file" id="user-content-transfer-single-file"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Transfer single file
   &lt;/h2&gt;
   &lt;p&gt;
    On the remote server, open a port which output anything it receives to the target file
   &lt;/p&gt;
   &lt;div class="highlight highlight-source-shell"&gt;
    &lt;pre&gt;    nc -l 2389 &lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;test&lt;/span&gt;&lt;/pre&gt;
   &lt;/div&gt;
   &lt;p&gt;
    On the local host, send the file
   &lt;/p&gt;
   &lt;div class="highlight highlight-source-shell"&gt;
    &lt;pre&gt;    cat testfile &lt;span class="pl-k"&gt;|&lt;/span&gt; nc remotehost 2389&lt;/pre&gt;
   &lt;/div&gt;
   &lt;h2&gt;
    &lt;a aria-hidden="true" class="anchor" href="#transfer-whole-directory" id="user-content-transfer-whole-directory"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Transfer whole directory
   &lt;/h2&gt;
   &lt;p&gt;
    On receiver host
   &lt;/p&gt;
   &lt;div class="highlight highlight-source-shell"&gt;
    &lt;pre&gt;    nc -l 5000 &lt;span class="pl-k"&gt;|&lt;/span&gt; tar xvf -&lt;/pre&gt;
   &lt;/div&gt;
   &lt;p&gt;
    On sender host
   &lt;/p&gt;
   &lt;div class="highlight highlight-source-shell"&gt;
    &lt;pre&gt;    tar cvf - /path/to/dir &lt;span class="pl-k"&gt;|&lt;/span&gt; nc remotehost.com 5000&lt;/pre&gt;
   &lt;/div&gt;
   &lt;h2&gt;
    &lt;a aria-hidden="true" class="anchor" href="#transfer-whole-harddrive" id="user-content-transfer-whole-harddrive"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Transfer whole harddrive
   &lt;/h2&gt;
   &lt;p&gt;
    On receiver host
   &lt;/p&gt;
   &lt;div class="highlight highlight-source-shell"&gt;
    &lt;pre&gt;    nc -lp 5000 &lt;span class="pl-k"&gt;|&lt;/span&gt; sudo dd of=/backup/sdb.img.gz&lt;/pre&gt;
   &lt;/div&gt;
   &lt;p&gt;
    On sender host
   &lt;/p&gt;
   &lt;div class="highlight highlight-source-shell"&gt;
    &lt;pre&gt;    dd if=/dev/sdb &lt;span class="pl-k"&gt;|&lt;/span&gt; gzip -c &lt;span class="pl-k"&gt;|&lt;/span&gt; nc remote_server.com 5000&lt;/pre&gt;
   &lt;/div&gt;
   &lt;h2&gt;
    &lt;a aria-hidden="true" class="anchor" href="#create-a-web-proxy-for-a-particular-websites" id="user-content-create-a-web-proxy-for-a-particular-websites"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Create a web proxy for a particular websites
   &lt;/h2&gt;
   &lt;p&gt;
    The following commands redirect all incoming TCP/5000 connections to
    &lt;code&gt;
     http://www.google.com
    &lt;/code&gt;
   &lt;/p&gt;
   &lt;div class="highlight highlight-source-shell"&gt;
    &lt;pre&gt;    mkfifo proxypipe
    &lt;span class="pl-k"&gt;while&lt;/span&gt; &lt;span class="pl-c1"&gt;true&lt;/span&gt;&lt;span class="pl-k"&gt;;&lt;/span&gt; &lt;span class="pl-k"&gt;do&lt;/span&gt; nc -l 5000 &lt;span class="pl-k"&gt;0&amp;lt;&lt;/span&gt;proxypipe &lt;span class="pl-k"&gt;|&lt;/span&gt; nc www.google.com 80 &lt;span class="pl-k"&gt;1&amp;gt;&lt;/span&gt; proxypipe&lt;span class="pl-k"&gt;;&lt;/span&gt; &lt;span class="pl-k"&gt;done&lt;/span&gt;&lt;/pre&gt;
   &lt;/div&gt;
   &lt;h2&gt;
    &lt;a aria-hidden="true" class="anchor" href="#launch-a-remote-shell" id="user-content-launch-a-remote-shell"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Launch a remote shell
   &lt;/h2&gt;
   &lt;p&gt;
    On remote host
   &lt;/p&gt;
   &lt;div class="highlight highlight-source-shell"&gt;
    &lt;pre&gt;    nc -lp 5000 -e /bin/bash&lt;/pre&gt;
   &lt;/div&gt;
   &lt;p&gt;
    On localhost host
   &lt;/p&gt;
   &lt;div class="highlight highlight-source-shell"&gt;
    &lt;pre&gt;    nc remotehost 5000&lt;/pre&gt;
   &lt;/div&gt;
   &lt;h2&gt;
    &lt;a aria-hidden="true" class="anchor" href="#test-network-speed" id="user-content-test-network-speed"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Test network speed
   &lt;/h2&gt;
   &lt;ul&gt;
    &lt;li&gt;
     &lt;a href="http://deice.daug.net/netcat_speed.html" rel="nofollow"&gt;
      Using netcat to test network speed
     &lt;/a&gt;
    &lt;/li&gt;
   &lt;/ul&gt;
   &lt;h1&gt;
    &lt;a aria-hidden="true" class="anchor" href="#references" id="user-content-references"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    REFERENCES
   &lt;/h1&gt;
   &lt;ul&gt;
    &lt;li&gt;
     &lt;a href="http://www.thegeekstuff.com/2012/04/nc-command-examples/" rel="nofollow"&gt;
      8 Practical Linux Netcat NC Command Examples
     &lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
     &lt;a href="http://xmodulo.com/useful-netcat-examples-linux.html" rel="nofollow"&gt;
      Useful netcat examples on Linux
     &lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
     &lt;a href="http://www.admin-magazine.com/Articles/Netcat-The-Admin-s-Best-Friend" rel="nofollow"&gt;
      Netcat – The Admin’s Best Friend
     &lt;/a&gt;
    &lt;/li&gt;
   &lt;/ul&gt;
  &lt;/article&gt;
 &lt;/div&gt;
&lt;/div&gt;

            &lt;div class="git-meta"&gt;
                
                &lt;span&gt;Brought to you by me &lt;a href="https://github.com/minhhh/pelican_git"&gt;pelican_git&lt;/a&gt;.&lt;/span&gt;
                
                &lt;span style="float: right; color: #369;"&gt;&lt;a href="https://github.com/minhhh/wiki/blob/master/netcat.md"&gt;view original&lt;/a&gt;&lt;/span&gt;
                &lt;span style="float: right; margin-right: 8px;"&gt;
                    &lt;a style="color: rgb(102, 102, 102);" href="https://github.com/minhhh/wiki/blob/master/netcat.md"&gt;netcat.md&lt;/a&gt;&lt;/span&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;&lt;/p&gt;</summary><category term="bash"></category><category term="shell"></category><category term="netcat"></category></entry><entry><title>An Introduction to Bash</title><link href="http://minhhh.github.io/posts/an-introduction-to-bash" rel="alternate"></link><published>2014-11-23T00:00:00-05:00</published><updated>2014-11-23T00:00:00-05:00</updated><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2014-11-23:posts/an-introduction-to-bash</id><summary type="html">&lt;p&gt;&lt;div&gt;
    &lt;style type = "text/css" scoped&gt;
.git-content div {
    padding: 0;
    margin: 0;
}

.git-content .git-file {
    border: 1px solid #DEDEDE;
    margin-bottom: 1em;
}

.git-content .git-file .git-meta {
    background-color: #EAEAEA;
    color: #666666;
    font-size: 85%;
    overflow: hidden;
    padding: 0.5em;
}

.git-content .git-file .git-meta a {
    color: #336699;
}

.git-content .git-file .git-meta a:visited {
    color: #773377;
}

.git-content .git-file {
    background-color: #F8F8FF;
    border-bottom: 1px solid #DDDDDD;
    font-size: 100%;
    overflow: auto;
    word-wrap: normal;
}

.git-content .git-file pre {
    background: none repeat scroll 0 0 transparent !important;
    border: medium none !important;
    margin: 0 !important;
    padding: 0 !important;
}
    &lt;/style&gt;
    &lt;div class="git-content"&gt;
        &lt;div class="git-file"&gt;
            &lt;div class="file"&gt;
 &lt;div class="readme blob instapaper_body js-code-block-container" id="readme"&gt;
  &lt;article class="markdown-body entry-content" itemprop="text"&gt;
   &lt;h1&gt;
    &lt;a aria-hidden="true" class="anchor" href="#bash" id="user-content-bash"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    BASH
   &lt;/h1&gt;
   &lt;h2&gt;
    &lt;a aria-hidden="true" class="anchor" href="#references" id="user-content-references"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    REFERENCES
   &lt;/h2&gt;
   &lt;h3&gt;
    &lt;a aria-hidden="true" class="anchor" href="#general-documents-books-tutorials" id="user-content-general-documents-books-tutorials"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    General Documents, Books, Tutorials
   &lt;/h3&gt;
   &lt;ul&gt;
    &lt;li&gt;
     &lt;a href="http://tldp.org/LDP/abs/html/" rel="nofollow"&gt;
      Advanced Bash Scripting Guide
     &lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
     &lt;a href="https://code.google.com/p/bashscripts/downloads/list" rel="nofollow"&gt;
      Sample Bash files
     &lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
     &lt;a href="https://github.com/azet/community_bash_style_guide/blob/master/README.md"&gt;
      Community Bash Style Guide
     &lt;/a&gt;
    &lt;/li&gt;
   &lt;/ul&gt;
   &lt;h3&gt;
    &lt;a aria-hidden="true" class="anchor" href="#linting" id="user-content-linting"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Linting
   &lt;/h3&gt;
   &lt;ul&gt;
    &lt;li&gt;
     &lt;a href="https://github.com/koalaman/shellcheck"&gt;
      Shellcheck
     &lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
     &lt;a href="https://www.npmjs.org/package/grunt-lint-bash" rel="nofollow"&gt;
      Grunt Lint Bash
     &lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
     &lt;a href="https://github.com/duggan/shlint"&gt;
      SHLint
     &lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
     &lt;a href="http://manpages.ubuntu.com/manpages/natty/man1/checkbashisms.1.html" rel="nofollow"&gt;
      checkbashisms
     &lt;/a&gt;
    &lt;/li&gt;
   &lt;/ul&gt;
   &lt;h3&gt;
    &lt;a aria-hidden="true" class="anchor" href="#unit-testing" id="user-content-unit-testing"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Unit Testing
   &lt;/h3&gt;
   &lt;ul&gt;
    &lt;li&gt;
     &lt;a href="https://github.com/sstephenson/bats"&gt;
      bats
     &lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
     &lt;a href="https://code.google.com/p/shunit2/" rel="nofollow"&gt;
      shunit2
     &lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
     &lt;a href="https://github.com/mlafeldt/sharness"&gt;
      sharness
     &lt;/a&gt;
    &lt;/li&gt;
   &lt;/ul&gt;
   &lt;h3&gt;
    &lt;a aria-hidden="true" class="anchor" href="#profiling" id="user-content-profiling"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Profiling
   &lt;/h3&gt;
   &lt;ul&gt;
    &lt;li&gt;
     &lt;a href="https://github.com/sstephenson/bashprof"&gt;
      bashprof
     &lt;/a&gt;
    &lt;/li&gt;
   &lt;/ul&gt;
   &lt;h3&gt;
    &lt;a aria-hidden="true" class="anchor" href="#debugging" id="user-content-debugging"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Debugging
   &lt;/h3&gt;
   &lt;ul&gt;
    &lt;li&gt;
     &lt;a href="http://tldp.org/LDP/Bash-Beginners-Guide/html/sect_02_03.html" rel="nofollow"&gt;
      Debugging Bash
     &lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
     &lt;a href="http://bashdb.sourceforge.net/bashdb.html" rel="nofollow"&gt;
      bashdb
     &lt;/a&gt;
    &lt;/li&gt;
   &lt;/ul&gt;
   &lt;h2&gt;
    &lt;a aria-hidden="true" class="anchor" href="#basics" id="user-content-basics"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    BASICS
   &lt;/h2&gt;
   &lt;h3&gt;
    &lt;a aria-hidden="true" class="anchor" href="#run-a-bash-script" id="user-content-run-a-bash-script"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Run a bash script
   &lt;/h3&gt;
   &lt;p&gt;
    Forking a new shell
   &lt;/p&gt;
   &lt;div class="highlight highlight-source-shell"&gt;
    &lt;pre&gt;    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; dot slash&lt;/span&gt;
    ./script.sh

    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; specifying the shell interpreter&lt;/span&gt;
    bash script.sh&lt;/pre&gt;
   &lt;/div&gt;
   &lt;p&gt;
    Executes the script in the current shell without forking a new shell
   &lt;/p&gt;
   &lt;div class="highlight highlight-source-shell"&gt;
    &lt;pre&gt;    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; dot space dot slash&lt;/span&gt;
    &lt;span class="pl-c1"&gt;.&lt;/span&gt; ./script.sh

    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; source command : similar to dot space dot slash&lt;/span&gt;
    &lt;span class="pl-c1"&gt;source&lt;/span&gt; script.sh&lt;/pre&gt;
   &lt;/div&gt;
   &lt;h3&gt;
    &lt;a aria-hidden="true" class="anchor" href="#block-comment" id="user-content-block-comment"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Block Comment
   &lt;/h3&gt;
   &lt;div class="highlight highlight-source-shell"&gt;
    &lt;pre&gt;    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#!&lt;/span&gt; /usr/bin/env bash&lt;/span&gt;
    &lt;span class="pl-c1"&gt;:&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-k"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="pl-k"&gt;COMMENT&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-s"&gt;    Copyright (C) 2012 Author &amp;lt;author at gmail dot com&amp;gt;&lt;/span&gt;
&lt;span class="pl-s"&gt;&lt;/span&gt;
&lt;span class="pl-s"&gt;    This program is free software: you can redistribute it and/or modify&lt;/span&gt;
&lt;span class="pl-s"&gt;    it under the terms of the GNU General Public License as published by&lt;/span&gt;
&lt;span class="pl-s"&gt;    the Free Software Foundation version 3.&lt;/span&gt;
&lt;span class="pl-s"&gt;&lt;/span&gt;
&lt;span class="pl-s"&gt;    This program is distributed in the hope that it will be useful,&lt;/span&gt;
&lt;span class="pl-s"&gt;    but WITHOUT ANY WARRANTY; without even the implied warranty of&lt;/span&gt;
&lt;span class="pl-s"&gt;    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&lt;/span&gt;
&lt;span class="pl-s"&gt;    GNU General Public License for more details.&lt;/span&gt;
&lt;span class="pl-s"&gt;&lt;/span&gt;
&lt;span class="pl-s"&gt;    You should have received a copy of the GNU General Public License&lt;/span&gt;
&lt;span class="pl-s"&gt;    along with this program.  If not, see &amp;lt;http://www.gnu.org/licenses/&amp;gt;.&lt;/span&gt;
&lt;span class="pl-s"&gt;    COMMENT&lt;/span&gt;
&lt;span class="pl-s"&gt;&lt;/span&gt;
&lt;span class="pl-s"&gt;    version="v0.1.1"&lt;/span&gt;&lt;/pre&gt;
   &lt;/div&gt;
   &lt;h3&gt;
    &lt;a aria-hidden="true" class="anchor" href="#looping-in-bash" id="user-content-looping-in-bash"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Looping in bash
   &lt;/h3&gt;
   &lt;ul&gt;
    &lt;li&gt;
     &lt;a href="http://www.thegeekstuff.com/2011/07/bash-for-loop-examples/" rel="nofollow"&gt;
      Bash for loop example
     &lt;/a&gt;
    &lt;/li&gt;
   &lt;/ul&gt;
   &lt;h3&gt;
    &lt;a aria-hidden="true" class="anchor" href="#exit-on-error-with-set--e" id="user-content-exit-on-error-with-set--e"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Exit on error with set -e
   &lt;/h3&gt;
   &lt;ul&gt;
    &lt;li&gt;
     Call
     &lt;code&gt;
      set -e
     &lt;/code&gt;
     in your bash and it will exit if any command returns any error.
    &lt;/li&gt;
    &lt;li&gt;
     Call
     &lt;code&gt;
      set -evx
     &lt;/code&gt;
     or
     &lt;code&gt;
      bash -evx script.sh
     &lt;/code&gt;
     to debug script.
    &lt;/li&gt;
   &lt;/ul&gt;
   &lt;h3&gt;
    &lt;a aria-hidden="true" class="anchor" href="#get-current-bash-file-folder" id="user-content-get-current-bash-file-folder"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Get current bash file folder
   &lt;/h3&gt;
   &lt;div class="highlight highlight-source-shell"&gt;
    &lt;pre&gt;    DIR=&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;$(&lt;/span&gt; &lt;span class="pl-c1"&gt;cd&lt;/span&gt; -P &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;$(&lt;/span&gt; dirname &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-smi"&gt;$0&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-pds"&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="pl-c1"&gt;pwd&lt;/span&gt; &lt;span class="pl-pds"&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;
   &lt;/div&gt;
  &lt;/article&gt;
 &lt;/div&gt;
&lt;/div&gt;

            &lt;div class="git-meta"&gt;
                
                &lt;span&gt;Brought to you by me &lt;a href="https://github.com/minhhh/pelican_git"&gt;pelican_git&lt;/a&gt;.&lt;/span&gt;
                
                &lt;span style="float: right; color: #369;"&gt;&lt;a href="https://github.com/minhhh/wiki/blob/master/bash.md"&gt;view original&lt;/a&gt;&lt;/span&gt;
                &lt;span style="float: right; margin-right: 8px;"&gt;
                    &lt;a style="color: rgb(102, 102, 102);" href="https://github.com/minhhh/wiki/blob/master/bash.md"&gt;bash.md&lt;/a&gt;&lt;/span&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;&lt;/p&gt;</summary><category term="bash"></category><category term="shell"></category></entry><entry><title>A Guide to Python's Magic Methods</title><link href="http://minhhh.github.io/posts/a-guide-to-pythons-magic-methods" rel="alternate"></link><published>2014-10-19T00:00:00-04:00</published><updated>2014-10-19T00:00:00-04:00</updated><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2014-10-19:posts/a-guide-to-pythons-magic-methods</id><summary type="html">&lt;p&gt;&lt;div&gt;
    &lt;style type = "text/css" scoped&gt;
.git-content div {
    padding: 0;
    margin: 0;
}

.git-content .git-file {
    border: 1px solid #DEDEDE;
    margin-bottom: 1em;
}

.git-content .git-file .git-meta {
    background-color: #EAEAEA;
    color: #666666;
    font-size: 85%;
    overflow: hidden;
    padding: 0.5em;
}

.git-content .git-file .git-meta a {
    color: #336699;
}

.git-content .git-file .git-meta a:visited {
    color: #773377;
}

.git-content .git-file {
    background-color: #F8F8FF;
    border-bottom: 1px solid #DDDDDD;
    font-size: 100%;
    overflow: auto;
    word-wrap: normal;
}

.git-content .git-file pre {
    background: none repeat scroll 0 0 transparent !important;
    border: medium none !important;
    margin: 0 !important;
    padding: 0 !important;
}
    &lt;/style&gt;
    &lt;div class="git-content"&gt;
        &lt;div class="git-file"&gt;
            &lt;div class="file"&gt;
 &lt;div class="readme blob instapaper_body js-code-block-container" id="readme"&gt;
  &lt;article class="markdown-body entry-content" itemprop="text"&gt;
   &lt;h1&gt;
    &lt;a aria-hidden="true" class="anchor" href="#a-guide-to-pythons-magic-methods" id="user-content-a-guide-to-pythons-magic-methods"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    A Guide to Python's Magic Methods
   &lt;/h1&gt;
   &lt;p&gt;
    A Markdown version of the original.
   &lt;/p&gt;
   &lt;p&gt;
    &lt;strong&gt;
     Rafe Kettler
    &lt;/strong&gt;
   &lt;/p&gt;
   &lt;p&gt;
    Copyright © 2012 Rafe Kettler
   &lt;/p&gt;
   &lt;p&gt;
    Version 1.17
   &lt;/p&gt;
   &lt;p&gt;
    A PDF version of this guide can be obtained from
    &lt;a href="http://www.rafekettler.com/magicmethods.pdf" rel="nofollow"&gt;
     my site
    &lt;/a&gt;
    or
    &lt;a href="https://github.com/RafeKettler/magicmethods/raw/master/magicmethods.pdf"&gt;
     Github
    &lt;/a&gt;
    . The magic methods guide has a git repository at
    &lt;a href="http://www.github.com/RafeKettler/magicmethods"&gt;
     http://www.github.com/RafeKettler/magicmethods
    &lt;/a&gt;
    . Any issues can be reported there, along with comments, (or even contributions!).
   &lt;/p&gt;
   &lt;h3&gt;
    &lt;a aria-hidden="true" class="anchor" href="#table-of-contents" id="user-content-table-of-contents"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Table of Contents
   &lt;/h3&gt;
   &lt;ol&gt;
    &lt;li&gt;
     &lt;a href="#user-content-introduction"&gt;
      Introduction
     &lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
     &lt;a href="#user-content-construction-and-initialization"&gt;
      Construction and Initialization
     &lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
     &lt;a href="#user-content-making-operators-work-on-custom-classes"&gt;
      Making Operators Work on Custom Classes
     &lt;/a&gt;
     &lt;ul&gt;
      &lt;li&gt;
       &lt;a href="#user-content-comparison-magic-methods"&gt;
        Comparison magic methods
       &lt;/a&gt;
      &lt;/li&gt;
      &lt;li&gt;
       &lt;a href="#user-content-numeric-magic-methods"&gt;
        Numeric magic methods
       &lt;/a&gt;
      &lt;/li&gt;
     &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;
     &lt;a href="#user-content-representing-your-classes"&gt;
      Representing your Classes
     &lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
     &lt;a href="#user-content-controlling-attribute-access"&gt;
      Controlling Attribute Access
     &lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
     &lt;a href="#user-content-making-custom-sequences"&gt;
      Making Custom Sequences
     &lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
     &lt;a href="#user-content-reflection"&gt;
      Reflection
     &lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
     &lt;a href="#user-content-callable-objects"&gt;
      Callable Objects
     &lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
     &lt;a href="#user-content-context-managers"&gt;
      Context Managers
     &lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
     &lt;a href="#user-content-abstract-base-classes"&gt;
      Abstract Base Classes
     &lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
     &lt;a href="#user-content-building-descriptor-objects"&gt;
      Building Descriptor Objects
     &lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
     &lt;a href="#user-content-copying"&gt;
      Copying
     &lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
     &lt;a href="#user-content-pickling-your-objects"&gt;
      Pickling your Objects
     &lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
     &lt;a href="#user-content-conclusion"&gt;
      Conclusion
     &lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
     &lt;a href="#user-content-appendix-1-how-to-call-magic-methods"&gt;
      Appendix 1: How to Call Magic Methods
     &lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
     &lt;a href="#user-content-appendix-2-changes-in-python-3"&gt;
      Appendix 2: Changes in Python 3
     &lt;/a&gt;
    &lt;/li&gt;
   &lt;/ol&gt;
   &lt;h2&gt;
    &lt;a aria-hidden="true" class="anchor" href="#introduction" id="user-content-introduction"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Introduction
   &lt;/h2&gt;
   &lt;p&gt;
    This guide is the culmination of a few months' worth of blog posts. The subject is magic methods.
   &lt;/p&gt;
   &lt;p&gt;
    What are magic methods? They're everything in object-oriented Python. They're special methods that you can define to add "magic" to your classes. They're always surrounded by double underscores (e.g.
    &lt;code&gt;
     __init__
    &lt;/code&gt;
    or
    &lt;code&gt;
     __lt__
    &lt;/code&gt;
    ). They're also not as well documented as they need to be. All of the magic methods for Python appear in the same section in the Python docs, but they're scattered about and only loosely organized. There's hardly an example to be found in that section (and that may very well be by design, since they're all detailed in the language reference, along with boring syntax descriptions, etc.).
   &lt;/p&gt;
   &lt;p&gt;
    So, to fix what I perceived as a flaw in Python's documentation, I set out to provide some more plain-English, example-driven documentation for Python's magic methods. I started out with weekly blog posts, and now that I've finished with those, I've put together this guide.
   &lt;/p&gt;
   &lt;p&gt;
    I hope you enjoy it. Use it as a tutorial, a refresher, or a reference; it's just intended to be a user-friendly guide to Python's magic methods.
   &lt;/p&gt;
   &lt;h2&gt;
    &lt;a aria-hidden="true" class="anchor" href="#construction-and-initialization" id="user-content-construction-and-initialization"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Construction and Initialization
   &lt;/h2&gt;
   &lt;p&gt;
    Everyone knows the most basic magic method,
    &lt;code&gt;
     __init__
    &lt;/code&gt;
    . It's the way that we can define the initialization behavior of an object. However, when I call
    &lt;code&gt;
     x = SomeClass()
    &lt;/code&gt;
    ,
    &lt;code&gt;
     __init__
    &lt;/code&gt;
    is not the first thing to get called. Actually, it's a method called
    &lt;code&gt;
     __new__
    &lt;/code&gt;
    , which actually creates the instance, then passes any arguments at creation on to the initializer. At the other end of the object's lifespan, there's
    &lt;code&gt;
     __del__.
    &lt;/code&gt;
    Let's take a closer look at these 3 magic methods:
   &lt;/p&gt;
   &lt;ul&gt;
    &lt;li&gt;
     &lt;p&gt;
      &lt;code&gt;
       __new__(cls, [...)
      &lt;/code&gt;
      -
      &lt;code&gt;
       __new__
      &lt;/code&gt;
      is the first method to get called in an object's instantiation. It takes the class, then any other arguments that it will pass along to
      &lt;code&gt;
       __init__
      &lt;/code&gt;
      .
      &lt;code&gt;
       __new__
      &lt;/code&gt;
      is used fairly rarely, but it does have its purposes, particularly when subclassing an immutable type like a tuple or a string. I don't want to go in to too much detail on
      &lt;code&gt;
       __new__
      &lt;/code&gt;
      because it's not too useful, but it is covered in great detail in the Python docs.
     &lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
     &lt;p&gt;
      &lt;code&gt;
       __init__(self, [...)
      &lt;/code&gt;
      - The initializer for the class. It gets passed whatever the primary constructor was called with (so, for example, if we called
      &lt;code&gt;
       x = SomeClass(10, 'foo')
      &lt;/code&gt;
      ,
      &lt;code&gt;
       __init__
      &lt;/code&gt;
      would get passed
      &lt;code&gt;
       10
      &lt;/code&gt;
      and
      &lt;code&gt;
       'foo'
      &lt;/code&gt;
      as arguments.
      &lt;code&gt;
       __init__
      &lt;/code&gt;
      is almost universally used in Python class definitions.
     &lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
     &lt;p&gt;
      &lt;code&gt;
       __del__(self)
      &lt;/code&gt;
      - If
      &lt;code&gt;
       __new__
      &lt;/code&gt;
      and
      &lt;code&gt;
       __init__
      &lt;/code&gt;
      formed the constructor of the object,
      &lt;code&gt;
       __del__
      &lt;/code&gt;
      is the destructor. It doesn't implement behavior for the statement
      &lt;code&gt;
       del x
      &lt;/code&gt;
      (so that code would not translate to
      &lt;code&gt;
       x.__del__()
      &lt;/code&gt;
      ). Rather, it defines behavior for when an object is garbage collected. It can be quite useful for objects that might require extra cleanup upon deletion, like sockets or file objects. Be careful, however, as there is no guarantee that
      &lt;code&gt;
       __del__
      &lt;/code&gt;
      will be executed if the object is still alive when the interpreter exits, so
      &lt;code&gt;
       __del__
      &lt;/code&gt;
      can't serve as a replacement for good coding practices (like always closing a connection when you're done with it. In fact,
      &lt;code&gt;
       __del__
      &lt;/code&gt;
      should almost never be used because of the precarious circumstances under which it is called; use it with caution!
     &lt;/p&gt;
    &lt;/li&gt;
   &lt;/ul&gt;
   &lt;p&gt;
    Putting it all together, here's an example of
    &lt;code&gt;
     __init__
    &lt;/code&gt;
    and
    &lt;code&gt;
     __del__
    &lt;/code&gt;
    in action:
   &lt;/p&gt;
   &lt;div class="highlight highlight-source-python"&gt;
    &lt;pre&gt;    &lt;span class="pl-k"&gt;from&lt;/span&gt; os.path &lt;span class="pl-k"&gt;import&lt;/span&gt; join

    &lt;span class="pl-k"&gt;class&lt;/span&gt; &lt;span class="pl-en"&gt;FileObject&lt;/span&gt;:
        &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'''&lt;/span&gt;Wrapper for file objects to make sure the file gets closed on deletion.&lt;span class="pl-pds"&gt;'''&lt;/span&gt;&lt;/span&gt;

        &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-c1"&gt;__init__&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-smi"&gt;self&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-smi"&gt;filepath&lt;/span&gt;&lt;span class="pl-k"&gt;=&lt;/span&gt;&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;~&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-smi"&gt;filename&lt;/span&gt;&lt;span class="pl-k"&gt;=&lt;/span&gt;&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;sample.txt&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;):
            &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; open a file filename in filepath in read and write mode&lt;/span&gt;
            &lt;span class="pl-c1"&gt;self&lt;/span&gt;.file &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;open&lt;/span&gt;(join(filepath, filename), &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;r+&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;)

        &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-c1"&gt;__del__&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-smi"&gt;self&lt;/span&gt;&lt;/span&gt;):
            &lt;span class="pl-c1"&gt;self&lt;/span&gt;.file.close()
            &lt;span class="pl-k"&gt;del&lt;/span&gt; &lt;span class="pl-c1"&gt;self&lt;/span&gt;.file&lt;/pre&gt;
   &lt;/div&gt;
   &lt;h2&gt;
    &lt;a aria-hidden="true" class="anchor" href="#making-operators-work-on-custom-classes" id="user-content-making-operators-work-on-custom-classes"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Making Operators Work on Custom Classes
   &lt;/h2&gt;
   &lt;p&gt;
    One of the biggest advantages of using Python's magic methods is that they provide a simple way to make objects behave like built-in types. That means you can avoid ugly, counter-intuitive, and nonstandard ways of performing basic operators. In some languages, it's common to do something like this:
   &lt;/p&gt;
   &lt;div class="highlight highlight-source-python"&gt;
    &lt;pre&gt;    &lt;span class="pl-k"&gt;if&lt;/span&gt; instance.equals(other_instance):
        &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; do something&lt;/span&gt;&lt;/pre&gt;
   &lt;/div&gt;
   &lt;p&gt;
    You could certainly do this in Python, too, but this adds confusion and is unnecessarily verbose. Different libraries might use different names for the same operations, making the client do way more work than necessary. With the power of magic methods, however, we can define one method (
    &lt;code&gt;
     __eq__
    &lt;/code&gt;
    , in this case), and say what we mean instead:
   &lt;/p&gt;
   &lt;div class="highlight highlight-source-python"&gt;
    &lt;pre&gt;    &lt;span class="pl-k"&gt;if&lt;/span&gt; instance &lt;span class="pl-k"&gt;==&lt;/span&gt; other_instance:
        &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt;do something&lt;/span&gt;&lt;/pre&gt;
   &lt;/div&gt;
   &lt;p&gt;
    That's part of the power of magic methods. The vast majority of them allow us to define meaning for operators so that we can use them on our own classes just like they were built in types.
   &lt;/p&gt;
   &lt;h3&gt;
    &lt;a aria-hidden="true" class="anchor" href="#comparison-magic-methods" id="user-content-comparison-magic-methods"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Comparison magic methods
   &lt;/h3&gt;
   &lt;p&gt;
    Python has a whole slew of magic methods designed to implement intuitive comparisons between objects using operators, not awkward method calls. They also provide a way to override the default Python behavior for comparisons of objects (by reference). Here's the list of those methods and what they do:
   &lt;/p&gt;
   &lt;ul&gt;
    &lt;li&gt;
     &lt;code&gt;
      __cmp__(self, other)
     &lt;/code&gt;
     -
     &lt;code&gt;
      __cmp__
     &lt;/code&gt;
     is the most basic of the comparison magic methods. It actually implements behavior for all of the comparison operators (&amp;lt;, ==, !=, etc.), but it might not do it the way you want (for example, if whether one instance was equal to another were determined by one criterion and and whether an instance is greater than another were determined by something else).
     &lt;code&gt;
      __cmp__
     &lt;/code&gt;
     should return a negative integer if
     &lt;code&gt;
      self &amp;lt; other
     &lt;/code&gt;
     , zero if
     &lt;code&gt;
      self == other
     &lt;/code&gt;
     , and positive if
     &lt;code&gt;
      self &amp;gt; other
     &lt;/code&gt;
     . It's usually best to define each comparison you need rather than define them all at once, but
     &lt;code&gt;
      __cmp__
     &lt;/code&gt;
     can be a good way to save repetition and improve clarity when you need all comparisons implemented with similar criteria.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __eq__(self, other)
     &lt;/code&gt;
     -  Defines behavior for the equality operator,
     &lt;code&gt;
      ==
     &lt;/code&gt;
     .
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __ne__(self, other)
     &lt;/code&gt;
     - Defines behavior for the inequality operator,
     &lt;code&gt;
      !=
     &lt;/code&gt;
     .
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __lt__(self, other)
     &lt;/code&gt;
     - Defines behavior for the less-than operator,
     &lt;code&gt;
      &amp;lt;
     &lt;/code&gt;
     .
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __gt__(self, other)
     &lt;/code&gt;
     - Defines behavior for the greater-than operator,
     &lt;code&gt;
      &amp;gt;
     &lt;/code&gt;
     .
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __le__(self, other)
     &lt;/code&gt;
     - Defines behavior for the less-than-or-equal-to operator,
     &lt;code&gt;
      &amp;lt;=
     &lt;/code&gt;
     .
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __ge__(self, other)
     &lt;/code&gt;
     - Defines behavior for the greater-than-or-equal-to operator,
     &lt;code&gt;
      &amp;gt;=
     &lt;/code&gt;
     .
    &lt;/li&gt;
   &lt;/ul&gt;
   &lt;p&gt;
    For an example, consider a class to model a word. We might want to compare words lexicographically (by the alphabet), which is the default comparison behavior for strings, but we also might want to do it based on some other criterion, like length or number of syllables. In this example, we'll compare by length. Here's an implementation:
   &lt;/p&gt;
   &lt;div class="highlight highlight-source-python"&gt;
    &lt;pre&gt;    &lt;span class="pl-k"&gt;class&lt;/span&gt; &lt;span class="pl-en"&gt;Word&lt;/span&gt;(&lt;span class="pl-c1"&gt;str&lt;/span&gt;):
        &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'''&lt;/span&gt;Class for words, defining comparison based on word length.&lt;span class="pl-pds"&gt;'''&lt;/span&gt;&lt;/span&gt;

        &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-c1"&gt;__new__&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-smi"&gt;cls&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-smi"&gt;word&lt;/span&gt;):
            &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Note that we have to use __new__. This is because str is an immutable&lt;/span&gt;
            &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; type, so we have to initialize it early (at creation)&lt;/span&gt;
            &lt;span class="pl-k"&gt;if&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt; &lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;in&lt;/span&gt; word:
                &lt;span class="pl-c1"&gt;print&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Value contains spaces. Truncating to first space.&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
                word &lt;span class="pl-k"&gt;=&lt;/span&gt; word[:word.index(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt; &lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;)] &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Word is now all chars before first space&lt;/span&gt;
            &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-c1"&gt;str&lt;/span&gt;.&lt;span class="pl-c1"&gt;__new__&lt;/span&gt;(&lt;span class="pl-c1"&gt;cls&lt;/span&gt;, word)

        &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-c1"&gt;__gt__&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-smi"&gt;self&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-smi"&gt;other&lt;/span&gt;):
            &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-c1"&gt;len&lt;/span&gt;(&lt;span class="pl-c1"&gt;self&lt;/span&gt;) &lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;len&lt;/span&gt;(other)
        &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-c1"&gt;__lt__&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-smi"&gt;self&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-smi"&gt;other&lt;/span&gt;):
            &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-c1"&gt;len&lt;/span&gt;(&lt;span class="pl-c1"&gt;self&lt;/span&gt;) &lt;span class="pl-k"&gt;&amp;lt;&lt;/span&gt; &lt;span class="pl-c1"&gt;len&lt;/span&gt;(other)
        &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-c1"&gt;__ge__&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-smi"&gt;self&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-smi"&gt;other&lt;/span&gt;):
            &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-c1"&gt;len&lt;/span&gt;(&lt;span class="pl-c1"&gt;self&lt;/span&gt;) &lt;span class="pl-k"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;len&lt;/span&gt;(other)
        &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-c1"&gt;__le__&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-smi"&gt;self&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-smi"&gt;other&lt;/span&gt;):
            &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-c1"&gt;len&lt;/span&gt;(&lt;span class="pl-c1"&gt;self&lt;/span&gt;) &lt;span class="pl-k"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;len&lt;/span&gt;(other)&lt;/pre&gt;
   &lt;/div&gt;
   &lt;br/&gt;
   &lt;p&gt;
    Now, we can create two
    &lt;code&gt;
     Words
    &lt;/code&gt;
    (by using
    &lt;code&gt;
     Word('foo')
    &lt;/code&gt;
    and
    &lt;code&gt;
     Word('bar')
    &lt;/code&gt;
    ) and compare them based on length. Note, however, that we didn't define
    &lt;code&gt;
     __eq__
    &lt;/code&gt;
    and
    &lt;code&gt;
     __ne__.
    &lt;/code&gt;
    This is because this would lead to some weird behavior (notably that
    &lt;code&gt;
     Word('foo') == Word('bar')
    &lt;/code&gt;
    would evaluate to true). It wouldn't make sense to test for equality based on length, so we fall back on str's implementation of equality.
   &lt;/p&gt;
   &lt;p&gt;
    Now would be a good time to note that you don't have to define every comparison magic method to get rich comparisons. The standard library has kindly provided us with a class decorator in the module
    &lt;code&gt;
     functools
    &lt;/code&gt;
    that will define all rich comparison methods if you only define
    &lt;code&gt;
     __eq__
    &lt;/code&gt;
    and one other (e.g.
    &lt;code&gt;
     __gt__
    &lt;/code&gt;
    ,
    &lt;code&gt;
     __lt__
    &lt;/code&gt;
    , etc.) This feature is only available in Python 2.7, but when you get a chance it saves a great deal of time and effort. You can use it by placing
    &lt;code&gt;
     @total_ordering
    &lt;/code&gt;
    above your class definition.
   &lt;/p&gt;
   &lt;h3&gt;
    &lt;a aria-hidden="true" class="anchor" href="#numeric-magic-methods" id="user-content-numeric-magic-methods"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Numeric magic methods
   &lt;/h3&gt;
   &lt;p&gt;
    Just like you can create ways for instances of your class to be compared with comparison operators, you can define behavior for numeric operators. Buckle your seat belts, folks, there's a lot of these. For organization's sake, I've split the numeric magic methods into 5 categories: unary operators, normal arithmetic operators, reflected arithmetic operators (more on this later), augmented assignment, and type conversions.
   &lt;/p&gt;
   &lt;h4&gt;
    &lt;a aria-hidden="true" class="anchor" href="#unary-operators-and-functions" id="user-content-unary-operators-and-functions"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Unary operators and functions
   &lt;/h4&gt;
   &lt;p&gt;
    Unary operators and functions only have one operand, e.g. negation, absolute value, etc.
   &lt;/p&gt;
   &lt;ul&gt;
    &lt;li&gt;
     &lt;code&gt;
      __pos__(self)
     &lt;/code&gt;
     - Implements behavior for unary positive (e.g.
     &lt;code&gt;
      +some_object
     &lt;/code&gt;
     )
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __neg__(self)
     &lt;/code&gt;
     - Implements behavior for negation (e.g.
     &lt;code&gt;
      -some_object
     &lt;/code&gt;
     )
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __abs__(self)
     &lt;/code&gt;
     - Implements behavior for the built in
     &lt;code&gt;
      abs()
     &lt;/code&gt;
     function.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __invert__(self)
     &lt;/code&gt;
     - Implements behavior for inversion using the ~ operator. For an explanation on what this does, see the Wikipedia article on bitwise operations.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __round__(self, n)
     &lt;/code&gt;
     - Implements behavior for the built in
     &lt;code&gt;
      round()
     &lt;/code&gt;
     function.
     &lt;code&gt;
      n
     &lt;/code&gt;
     is the number of decimal places to round to.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __floor__(self)
     &lt;/code&gt;
     - Implements behavior for
     &lt;code&gt;
      math.floor()
     &lt;/code&gt;
     , i.e., rounding down to the nearest integer.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __ceil__(self)
     &lt;/code&gt;
     - Implements behavior for
     &lt;code&gt;
      math.ceil()
     &lt;/code&gt;
     , i.e., rounding up to the nearest integer.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __trunc__(self)
     &lt;/code&gt;
     - Implements behavior for
     &lt;code&gt;
      math.trunc()
     &lt;/code&gt;
     , i.e., truncating to an integral.
    &lt;/li&gt;
   &lt;/ul&gt;
   &lt;h4&gt;
    &lt;a aria-hidden="true" class="anchor" href="#normal-arithmetic-operators" id="user-content-normal-arithmetic-operators"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Normal arithmetic operators
   &lt;/h4&gt;
   &lt;p&gt;
    Now, we cover the typical binary operators (and a function or two):
    &lt;code&gt;
     +
    &lt;/code&gt;
    ,
    &lt;code&gt;
     -
    &lt;/code&gt;
    ,
    &lt;code&gt;
     *
    &lt;/code&gt;
    and the like. These are, for the most part, pretty self-explanatory.
   &lt;/p&gt;
   &lt;ul&gt;
    &lt;li&gt;
     &lt;code&gt;
      __add__(self, other)
     &lt;/code&gt;
     - Implements addition.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __sub__(self, other)
     &lt;/code&gt;
     - Implements subtraction.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __mul__(self, other)
     &lt;/code&gt;
     - Implements multiplication.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __floordiv__(self, other)
     &lt;/code&gt;
     - Implements integer division using the
     &lt;code&gt;
      //
     &lt;/code&gt;
     operator.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __div__(self, other)
     &lt;/code&gt;
     - Implements division using the
     &lt;code&gt;
      /
     &lt;/code&gt;
     operator.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __truediv__(self, other)
     &lt;/code&gt;
     - Implements true division. Note that this only works when from
     &lt;code&gt;
      __future__ import division
     &lt;/code&gt;
     is in effect.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __mod__(self, other)
     &lt;/code&gt;
     - Implements modulo using the
     &lt;code&gt;
      %
     &lt;/code&gt;
     operator.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __divmod__(self, other)
     &lt;/code&gt;
     - Implements behavior for long division using the
     &lt;code&gt;
      divmod()
     &lt;/code&gt;
     built in function.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __pow__
     &lt;/code&gt;
     - Implements behavior for exponents using the
     &lt;code&gt;
      **
     &lt;/code&gt;
     operator.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __lshift__
     &lt;/code&gt;
     -(self, other) Implements left bitwise shift using the
     &lt;code&gt;
      &amp;lt;&amp;lt;
     &lt;/code&gt;
     operator.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __rshift__
     &lt;/code&gt;
     -(self, other) Implements right bitwise shift using the
     &lt;code&gt;
      &amp;gt;&amp;gt;
     &lt;/code&gt;
     operator.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __and__(self, other)
     &lt;/code&gt;
     - Implements bitwise and using the
     &lt;code&gt;
      &amp;amp;
     &lt;/code&gt;
     operator.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __or__(self, other)
     &lt;/code&gt;
     - Implements bitwise or using the
     &lt;code&gt;
      |
     &lt;/code&gt;
     operator.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __xor__(self, other)
     &lt;/code&gt;
     - Implements bitwise xor using the
     &lt;code&gt;
      ^
     &lt;/code&gt;
     operator.
    &lt;/li&gt;
   &lt;/ul&gt;
   &lt;h4&gt;
    &lt;a aria-hidden="true" class="anchor" href="#reflected-arithmetic-operators" id="user-content-reflected-arithmetic-operators"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Reflected arithmetic operators
   &lt;/h4&gt;
   &lt;p&gt;
    You know how I said I would get to reflected arithmetic in a bit? Some of you might think it's some big, scary, foreign concept. It's actually quite simple. Here's an example:
   &lt;/p&gt;
   &lt;div class="highlight highlight-source-python"&gt;
    &lt;pre&gt;    some_object &lt;span class="pl-k"&gt;+&lt;/span&gt; other&lt;/pre&gt;
   &lt;/div&gt;
   &lt;br/&gt;
   &lt;p&gt;
    That was "normal" addition. The reflected equivalent is the same thing, except with the operands switched around:
   &lt;/p&gt;
   &lt;div class="highlight highlight-source-python"&gt;
    &lt;pre&gt;    other &lt;span class="pl-k"&gt;+&lt;/span&gt; some_object&lt;/pre&gt;
   &lt;/div&gt;
   &lt;br/&gt;
   &lt;p&gt;
    So, all of these magic methods do the same thing as their normal equivalents, except the perform the operation with other as the first operand and self as the second, rather than the other way around. In most cases, the result of a reflected operation is the same as its normal equivalent, so you may just end up defining
    &lt;code&gt;
     __radd__
    &lt;/code&gt;
    as calling
    &lt;code&gt;
     __add__
    &lt;/code&gt;
    and so on. Note that the object on the left hand side of the operator (
    &lt;code&gt;
     other
    &lt;/code&gt;
    in the example) must not define (or return
    &lt;code&gt;
     NotImplemented
    &lt;/code&gt;
    ) for its definition of the non-reflected version of an operation. For instance, in the example,
    &lt;code&gt;
     some_object.__radd__
    &lt;/code&gt;
    will only be called if other does not define
    &lt;code&gt;
     __add__
    &lt;/code&gt;
    .
   &lt;/p&gt;
   &lt;ul&gt;
    &lt;li&gt;
     &lt;code&gt;
      __radd__(self, other)
     &lt;/code&gt;
     - Implements reflected addition.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __rsub__(self, other)
     &lt;/code&gt;
     - Implements reflected subtraction.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __rmul__(self, other)
     &lt;/code&gt;
     - Implements reflected multiplication.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __rfloordiv__(self, other)
     &lt;/code&gt;
     - Implements reflected integer division using the
     &lt;code&gt;
      //
     &lt;/code&gt;
     operator.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __rdiv__(self, other)
     &lt;/code&gt;
     - Implements reflected division using the
     &lt;code&gt;
      /
     &lt;/code&gt;
     operator.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __rtruediv__(self, other)
     &lt;/code&gt;
     - Implements reflected true division. Note that this only works when from
     &lt;code&gt;
      __future__ import division
     &lt;/code&gt;
     is in effect.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __rmod__(self, other)
     &lt;/code&gt;
     - Implements reflected modulo using the
     &lt;code&gt;
      %
     &lt;/code&gt;
     operator.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __rdivmod__(self, other)
     &lt;/code&gt;
     - Implements behavior for long division using the
     &lt;code&gt;
      divmod()
     &lt;/code&gt;
     built in function, when
     &lt;code&gt;
      divmod(other, self)
     &lt;/code&gt;
     is called.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __rpow__
     &lt;/code&gt;
     - Implements behavior for reflected exponents using the
     &lt;code&gt;
      **
     &lt;/code&gt;
     operator.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __rlshift__(self, other)
     &lt;/code&gt;
     - Implements reflected left bitwise shift using the
     &lt;code&gt;
      &amp;lt;&amp;lt;
     &lt;/code&gt;
     operator.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __rrshift__(self, other)
     &lt;/code&gt;
     - Implements reflected right bitwise shift using the
     &lt;code&gt;
      &amp;gt;&amp;gt;
     &lt;/code&gt;
     operator.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __rand__(self, other)
     &lt;/code&gt;
     - Implements reflected bitwise and using the
     &lt;code&gt;
      &amp;amp;
     &lt;/code&gt;
     operator.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __ror__(self, other)
     &lt;/code&gt;
     - Implements reflected bitwise or using the
     &lt;code&gt;
      |
     &lt;/code&gt;
     operator.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __rxor__(self, other)
     &lt;/code&gt;
     - Implements reflected bitwise xor using the
     &lt;code&gt;
      ^
     &lt;/code&gt;
     operator.
    &lt;/li&gt;
   &lt;/ul&gt;
   &lt;h4&gt;
    &lt;a aria-hidden="true" class="anchor" href="#augmented-assignment" id="user-content-augmented-assignment"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Augmented assignment
   &lt;/h4&gt;
   &lt;p&gt;
    Python also has a wide variety of magic methods to allow custom behavior to be defined for augmented assignment. You're probably already familiar with augmented assignment, it combines "normal" operators with assignment. If you still don't know what I'm talking about, here's an example:
   &lt;/p&gt;
   &lt;div class="highlight highlight-source-python"&gt;
    &lt;pre&gt;    x &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;5&lt;/span&gt;
    x &lt;span class="pl-k"&gt;+=&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt; &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; in other words x = x + 1&lt;/span&gt;&lt;/pre&gt;
   &lt;/div&gt;
   &lt;br/&gt;
   &lt;p&gt;
    Each of these methods should return the value that the variable on the left hand side should be assigned to (for instance, for
    &lt;code&gt;
     a += b
    &lt;/code&gt;
    ,
    &lt;code&gt;
     __iadd__
    &lt;/code&gt;
    might return
    &lt;code&gt;
     a + b
    &lt;/code&gt;
    , which would be assigned to
    &lt;code&gt;
     a
    &lt;/code&gt;
    ). Here's the list:
   &lt;/p&gt;
   &lt;ul&gt;
    &lt;li&gt;
     &lt;code&gt;
      __iadd__(self, other)
     &lt;/code&gt;
     - Implements addition with assignment.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __isub__(self, other)
     &lt;/code&gt;
     - Implements subtraction with assignment.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __imul__(self, other)
     &lt;/code&gt;
     - Implements multiplication with assignment.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __ifloordiv__(self, other)
     &lt;/code&gt;
     - Implements integer division with assignment using the
     &lt;code&gt;
      //=
     &lt;/code&gt;
     operator.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __idiv__(self, other)
     &lt;/code&gt;
     - Implements division with assignment using the
     &lt;code&gt;
      /=
     &lt;/code&gt;
     operator.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __itruediv__(self, other)
     &lt;/code&gt;
     - Implements true division with assignment. Note that this only works when from
     &lt;code&gt;
      __future__ import division
     &lt;/code&gt;
     is in effect.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __imod__(self, other)
     &lt;/code&gt;
     - Implements modulo with assignment using the
     &lt;code&gt;
      %=
     &lt;/code&gt;
     operator.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __ipow__
     &lt;/code&gt;
     - Implements behavior for exponents with assignment using the
     &lt;code&gt;
      **=
     &lt;/code&gt;
     operator.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __ilshift__(self, other)
     &lt;/code&gt;
     - Implements left bitwise shift with assignment using the
     &lt;code&gt;
      &amp;lt;&amp;lt;=
     &lt;/code&gt;
     operator.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __irshift__(self, other)
     &lt;/code&gt;
     - Implements right bitwise shift with assignment using the
     &lt;code&gt;
      &amp;gt;&amp;gt;=
     &lt;/code&gt;
     operator.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __iand__(self, other)
     &lt;/code&gt;
     - Implements bitwise and with assignment using the
     &lt;code&gt;
      &amp;amp;=
     &lt;/code&gt;
     operator.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __ior__(self, other)
     &lt;/code&gt;
     - Implements bitwise or with assignment using the
     &lt;code&gt;
      |=
     &lt;/code&gt;
     operator.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __ixor__(self, other)
     &lt;/code&gt;
     - Implements bitwise xor with assignment using the
     &lt;code&gt;
      ^=
     &lt;/code&gt;
     operator.
    &lt;/li&gt;
   &lt;/ul&gt;
   &lt;h4&gt;
    &lt;a aria-hidden="true" class="anchor" href="#type-conversion-magic-methods" id="user-content-type-conversion-magic-methods"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Type conversion magic methods
   &lt;/h4&gt;
   &lt;p&gt;
    Python also has an array of magic methods designed to implement behavior for built in type conversion functions like float(). Here they are:
   &lt;/p&gt;
   &lt;ul&gt;
    &lt;li&gt;
     &lt;code&gt;
      __int__(self)
     &lt;/code&gt;
     - Implements type conversion to int.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __long__(self)
     &lt;/code&gt;
     - Implements type conversion to long.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __float__(self)
     &lt;/code&gt;
     - Implements type conversion to float.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __complex__(self)
     &lt;/code&gt;
     - Implements type conversion to complex.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __oct__(self)
     &lt;/code&gt;
     - Implements type conversion to octal.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __hex__(self)
     &lt;/code&gt;
     - Implements type conversion to hexadecimal.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __index__(self)
     &lt;/code&gt;
     - Implements type conversion to an int when the object is used in a slice expression. If you define a custom numeric type that might be used in slicing, you should define
     &lt;code&gt;
      __index__
     &lt;/code&gt;
     .
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __trunc__(self)
     &lt;/code&gt;
     - Called when
     &lt;code&gt;
      math.trunc(self)
     &lt;/code&gt;
     is called.
     &lt;code&gt;
      __trunc__
     &lt;/code&gt;
     should return the value of self truncated to an integral type (usually a long).
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __coerce__(self, other)
     &lt;/code&gt;
     - Method to implement mixed mode arithmetic.
     &lt;code&gt;
      __coerce__
     &lt;/code&gt;
     should return None if type conversion is impossible. Otherwise, it should return a pair (2-tuple) of
     &lt;code&gt;
      self
     &lt;/code&gt;
     and
     &lt;code&gt;
      other
     &lt;/code&gt;
     , manipulated to have the same type.
    &lt;/li&gt;
   &lt;/ul&gt;
   &lt;h2&gt;
    &lt;a aria-hidden="true" class="anchor" href="#representing-your-classes" id="user-content-representing-your-classes"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Representing your Classes
   &lt;/h2&gt;
   &lt;p&gt;
    It's often useful to have a string representation of a class. In Python, there's a few methods that you can implement in your class definition to customize how built in functions that return representations of your class behave.
   &lt;/p&gt;
   &lt;ul&gt;
    &lt;li&gt;
     &lt;code&gt;
      __str__(self)
     &lt;/code&gt;
     - Defines behavior for when
     &lt;code&gt;
      str()
     &lt;/code&gt;
     is called on an instance of your class.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __repr__(self)
     &lt;/code&gt;
     - Defines behavior for when
     &lt;code&gt;
      repr()
     &lt;/code&gt;
     is called on an instance of your class. The major difference between
     &lt;code&gt;
      str()
     &lt;/code&gt;
     and
     &lt;code&gt;
      repr()
     &lt;/code&gt;
     is intended audience.
     &lt;code&gt;
      repr()
     &lt;/code&gt;
     is intended to produce output that is mostly machine-readable (in many cases, it could be valid Python code even), whereas
     &lt;code&gt;
      str()
     &lt;/code&gt;
     is intended to be human-readable.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __unicode__(self)
     &lt;/code&gt;
     - Defines behavior for when
     &lt;code&gt;
      unicode()
     &lt;/code&gt;
     is called on an instance of your class.
     &lt;code&gt;
      unicode()
     &lt;/code&gt;
     is like
     &lt;code&gt;
      str()
     &lt;/code&gt;
     , but it returns a unicode string. Be wary: if a client calls
     &lt;code&gt;
      str()
     &lt;/code&gt;
     on an instance of your class and you've only defined
     &lt;code&gt;
      __unicode__()
     &lt;/code&gt;
     , it won't work. You should always try to define
     &lt;code&gt;
      __str__()
     &lt;/code&gt;
     as well in case someone doesn't have the luxury of using unicode.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __format__(self, formatstr)
     &lt;/code&gt;
     - Defines behavior for when an instance of your class is used in new-style string formatting. For instance,
     &lt;code&gt;
      "Hello, {0:abc}!".format(a)
     &lt;/code&gt;
     would lead to the call
     &lt;code&gt;
      a.__format__("abc")
     &lt;/code&gt;
     . This can be useful for defining your own numerical or string types that you might like to give special formatting options.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __hash__(self)
     &lt;/code&gt;
     - Defines behavior for when
     &lt;code&gt;
      hash()
     &lt;/code&gt;
     is called on an instance of your class. It has to return an integer, and its result is used for quick key comparison in dictionaries. Note that this usually entails implementing
     &lt;code&gt;
      __eq__
     &lt;/code&gt;
     as well. Live by the following rule:
     &lt;code&gt;
      a == b
     &lt;/code&gt;
     implies
     &lt;code&gt;
      hash(a) == hash(b)
     &lt;/code&gt;
     .
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __nonzero__(self)
     &lt;/code&gt;
     - Defines behavior for when
     &lt;code&gt;
      bool()
     &lt;/code&gt;
     is called on an instance of your class. Should return
     &lt;code&gt;
      True
     &lt;/code&gt;
     or
     &lt;code&gt;
      False
     &lt;/code&gt;
     , depending on whether you would want to consider the instance to be
     &lt;code&gt;
      True
     &lt;/code&gt;
     or
     &lt;code&gt;
      False.
     &lt;/code&gt;
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __dir__(self)
     &lt;/code&gt;
     - Defines behavior for when
     &lt;code&gt;
      dir()
     &lt;/code&gt;
     is called on an instance of your class. This method should return a list of attributes for the user. Typically, implementing
     &lt;code&gt;
      __dir__
     &lt;/code&gt;
     is unnecessary, but it can be vitally important for interactive use of your classes if you redefine
     &lt;code&gt;
      __getattr__
     &lt;/code&gt;
     or
     &lt;code&gt;
      __getattribute__
     &lt;/code&gt;
     (which you will see in the next section) or are otherwise dynamically generating attributes.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __sizeof__(self)
     &lt;/code&gt;
     - Defines behavior for when
     &lt;code&gt;
      sys.getsizeof()
     &lt;/code&gt;
     is called on an instance of your class. This should return the size of your object, in bytes. This is generally more useful for Python classes implemented in C extensions, but it helps to be aware of it.
    &lt;/li&gt;
   &lt;/ul&gt;
   &lt;p&gt;
    We're pretty much done with the boring (and example-free) part of the magic methods guide. Now that we've covered some of the more basic magic methods, it's time to move to more advanced material.
   &lt;/p&gt;
   &lt;h2&gt;
    &lt;a aria-hidden="true" class="anchor" href="#controlling-attribute-access" id="user-content-controlling-attribute-access"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Controlling Attribute Access
   &lt;/h2&gt;
   &lt;p&gt;
    Many people coming to Python from other languages complain that it lacks true encapsulation for classes (e.g. no way to define private attributes and then have public getter and setters). This couldn't be farther than the truth: it just happens that Python accomplishes a great deal of encapsulation through "magic", instead of explicit modifiers for methods or fields. Take a look:
   &lt;/p&gt;
   &lt;ul&gt;
    &lt;li&gt;
     &lt;code&gt;
      __getattr__(self, name)
     &lt;/code&gt;
     - You can define behavior for when a user attempts to access an attribute that doesn't exist (either at all or yet). This can be useful for catching and redirecting common misspellings, giving warnings about using deprecated attributes (you can still choose to compute and return that attribute, if you wish), or deftly handing an
     &lt;code&gt;
      -AttributeError
     &lt;/code&gt;
     . It only gets called when a nonexistent attribute is accessed, however, so it isn't a true encapsulation solution.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __setattr__(self, name, value)
     &lt;/code&gt;
     - Unlike
     &lt;code&gt;
      __getattr__
     &lt;/code&gt;
     ,
     &lt;code&gt;
      __setattr__
     &lt;/code&gt;
     is an encapsulation solution. It allows you to define behavior for assignment to an attribute regardless of whether or not that attribute exists, meaning you can define custom rules for any changes in the values of attributes. However, you have to be careful with how you use
     &lt;code&gt;
      __setattr__
     &lt;/code&gt;
     , as the example at the end of the list will show.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __delattr__(self, name)
     &lt;/code&gt;
     - This is the exact same as
     &lt;code&gt;
      __setattr__
     &lt;/code&gt;
     , but for deleting attributes instead of setting them. The same precautions need to be taken as with
     &lt;code&gt;
      __setattr__
     &lt;/code&gt;
     as well in order to prevent infinite recursion (calling
     &lt;code&gt;
      del self.name
     &lt;/code&gt;
     in the implementation of
     &lt;code&gt;
      __delattr__
     &lt;/code&gt;
     would cause infinite recursion).
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __getattribute__(self, name)
     &lt;/code&gt;
     - After all this,
     &lt;code&gt;
      __getattribute__
     &lt;/code&gt;
     fits in pretty well with its companions
     &lt;code&gt;
      __setattr__
     &lt;/code&gt;
     and
     &lt;code&gt;
      __delattr__
     &lt;/code&gt;
     . However, I don't recommend you use it.
     &lt;code&gt;
      __getattribute__
     &lt;/code&gt;
     can only be used with new-style classes (all classes are new-style in the newest versions of Python, and in older versions you can make a class new-style by subclassing object. It allows you to define rules for whenever an attribute's value is accessed. It suffers from some similar infinite recursion problems as its partners-in-crime (this time you call the base class's
     &lt;code&gt;
      __getattribute__
     &lt;/code&gt;
     method to prevent this). It also mainly obviates the need for
     &lt;code&gt;
      __getattr__
     &lt;/code&gt;
     , which only gets called when
     &lt;code&gt;
      __getattribute__
     &lt;/code&gt;
     is implemented if it is called explicitly or an
     &lt;code&gt;
      AttributeError
     &lt;/code&gt;
     is raised. This method can be used (after all, it's your choice), but I don't recommend it because it has a small use case (it's far more rare that we need special behavior to retrieve a value than to assign to it) and because it can be really difficult to implement bug-free.
    &lt;/li&gt;
   &lt;/ul&gt;
   &lt;p&gt;
    You can easily cause a problem in your definitions of any of the methods controlling attribute access. Consider this example:
   &lt;/p&gt;
   &lt;div class="highlight highlight-source-python"&gt;
    &lt;pre&gt;    &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-c1"&gt;__setattr__&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-smi"&gt;self&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-smi"&gt;name&lt;/span&gt;, &lt;span class="pl-smi"&gt;value&lt;/span&gt;):
        &lt;span class="pl-c1"&gt;self&lt;/span&gt;.name &lt;span class="pl-k"&gt;=&lt;/span&gt; value
        &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; since every time an attribute is assigned, __setattr__() is called, this&lt;/span&gt;
        &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; is recursion.&lt;/span&gt;
        &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; so this really means self.__setattr__('name', value). Since the method&lt;/span&gt;
        &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; keeps calling itself, the recursion goes on forever causing a crash&lt;/span&gt;

    &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-c1"&gt;__setattr__&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-smi"&gt;self&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-smi"&gt;name&lt;/span&gt;, &lt;span class="pl-smi"&gt;value&lt;/span&gt;):
        &lt;span class="pl-c1"&gt;self&lt;/span&gt;.&lt;span class="pl-c1"&gt;__dict__&lt;/span&gt;[name] &lt;span class="pl-k"&gt;=&lt;/span&gt; value &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; assigning to the dict of names in the class&lt;/span&gt;
        &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; define custom behavior here&lt;/span&gt;&lt;/pre&gt;
   &lt;/div&gt;
   &lt;br/&gt;
   &lt;p&gt;
    Again, Python's magic methods are incredibly powerful, and with great power comes great responsibility. It's important to know the proper way to use magic methods so you don't break any code.
   &lt;/p&gt;
   &lt;p&gt;
    So, what have we learned about custom attribute access in Python? It's not to be used lightly. In fact, it tends to be excessively powerful and counter-intuitive. But the reason why it exists is to scratch a certain itch: Python doesn't seek to make bad things impossible, but just to make them difficult. Freedom is paramount, so you can really do whatever you want. Here's an example of some of the special attribute access methods in action (note that we use super because not all classes have an attribute
    &lt;code&gt;
     __dict__
    &lt;/code&gt;
    ):
   &lt;/p&gt;
   &lt;div class="highlight highlight-source-python"&gt;
    &lt;pre&gt;    &lt;span class="pl-k"&gt;class&lt;/span&gt; &lt;span class="pl-en"&gt;AccessCounter&lt;/span&gt;(&lt;span class="pl-c1"&gt;object&lt;/span&gt;):
        &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'''&lt;/span&gt;A class that contains a value and implements an access counter.&lt;/span&gt;
&lt;span class="pl-s"&gt;        The counter increments each time the value is changed.&lt;span class="pl-pds"&gt;'''&lt;/span&gt;&lt;/span&gt;

        &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-c1"&gt;__init__&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-smi"&gt;self&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-smi"&gt;val&lt;/span&gt;):
            &lt;span class="pl-c1"&gt;super&lt;/span&gt;(AccessCounter, &lt;span class="pl-c1"&gt;self&lt;/span&gt;).&lt;span class="pl-c1"&gt;__setattr__&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;counter&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;0&lt;/span&gt;)
            &lt;span class="pl-c1"&gt;super&lt;/span&gt;(AccessCounter, &lt;span class="pl-c1"&gt;self&lt;/span&gt;).&lt;span class="pl-c1"&gt;__setattr__&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;value&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;, val)

        &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-c1"&gt;__setattr__&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-smi"&gt;self&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-smi"&gt;name&lt;/span&gt;, &lt;span class="pl-smi"&gt;value&lt;/span&gt;):
            &lt;span class="pl-k"&gt;if&lt;/span&gt; name &lt;span class="pl-k"&gt;==&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;value&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;:
                &lt;span class="pl-c1"&gt;super&lt;/span&gt;(AccessCounter, &lt;span class="pl-c1"&gt;self&lt;/span&gt;).&lt;span class="pl-c1"&gt;__setattr__&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;counter&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;self&lt;/span&gt;.counter &lt;span class="pl-k"&gt;+&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;)
            &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Make this unconditional.&lt;/span&gt;
            &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; If you want to prevent other attributes to be set, raise AttributeError(name)&lt;/span&gt;
            &lt;span class="pl-c1"&gt;super&lt;/span&gt;(AccessCounter, &lt;span class="pl-c1"&gt;self&lt;/span&gt;).&lt;span class="pl-c1"&gt;__setattr__&lt;/span&gt;(name, value)

        &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-c1"&gt;__delattr__&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-smi"&gt;self&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-smi"&gt;name&lt;/span&gt;):
            &lt;span class="pl-k"&gt;if&lt;/span&gt; name &lt;span class="pl-k"&gt;==&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;value&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;:
                &lt;span class="pl-c1"&gt;super&lt;/span&gt;(AccessCounter, &lt;span class="pl-c1"&gt;self&lt;/span&gt;).&lt;span class="pl-c1"&gt;__setattr__&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;counter&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-c1"&gt;self&lt;/span&gt;.counter &lt;span class="pl-k"&gt;+&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;)
            &lt;span class="pl-c1"&gt;super&lt;/span&gt;(AccessCounter, &lt;span class="pl-c1"&gt;self&lt;/span&gt;).&lt;span class="pl-c1"&gt;__delattr__&lt;/span&gt;(name)&lt;/pre&gt;
   &lt;/div&gt;
   &lt;br/&gt;
   &lt;h2&gt;
    &lt;a aria-hidden="true" class="anchor" href="#making-custom-sequences" id="user-content-making-custom-sequences"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Making Custom Sequences
   &lt;/h2&gt;
   &lt;p&gt;
    There's a number of ways to get your Python classes to act like built in sequences (dict, tuple, list, string, etc.). These are by far my favorite magic methods in Python because of the absurd degree of control they give you and the way that they magically make a whole array of global functions work beautifully on instances of your class. But before we get down to the good stuff, a quick word on requirements.
   &lt;/p&gt;
   &lt;h3&gt;
    &lt;a aria-hidden="true" class="anchor" href="#requirements" id="user-content-requirements"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Requirements
   &lt;/h3&gt;
   &lt;p&gt;
    Now that we're talking about creating your own sequences in Python, it's time to talk about protocols. Protocols are somewhat similar to interfaces in other languages in that they give you a set of methods you must define. However, in Python protocols are totally informal and require no explicit declarations to implement. Rather, they're more like guidelines.
   &lt;/p&gt;
   &lt;p&gt;
    Why are we talking about protocols now? Because implementing custom container types in Python involves using some of these protocols. First, there's the protocol for defining immutable containers: to make an immutable container, you need only define
    &lt;code&gt;
     __len__
    &lt;/code&gt;
    and
    &lt;code&gt;
     __getitem__
    &lt;/code&gt;
    (more on these later). The mutable container protocol requires everything that immutable containers require plus
    &lt;code&gt;
     __setitem__
    &lt;/code&gt;
    and
    &lt;code&gt;
     __delitem__.
    &lt;/code&gt;
    Lastly, if you want your object to be iterable, you'll have to define
    &lt;code&gt;
     __iter__
    &lt;/code&gt;
    , which returns an iterator. That iterator must conform to an iterator protocol, which requires iterators to have methods called
    &lt;code&gt;
     __iter__
    &lt;/code&gt;
    (returning itself) and
    &lt;code&gt;
     next
    &lt;/code&gt;
    .
   &lt;/p&gt;
   &lt;h3&gt;
    &lt;a aria-hidden="true" class="anchor" href="#the-magic-behind-containers" id="user-content-the-magic-behind-containers"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    The magic behind containers
   &lt;/h3&gt;
   &lt;p&gt;
    Without any more wait, here are the magic methods that containers use:
   &lt;/p&gt;
   &lt;ul&gt;
    &lt;li&gt;
     &lt;code&gt;
      __len__(self)
     &lt;/code&gt;
     - Returns the length of the container. Part of the protocol for both immutable and mutable containers.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __getitem__(self, key)
     &lt;/code&gt;
     - Defines behavior for when an item is accessed, using the notation
     &lt;code&gt;
      self[key]
     &lt;/code&gt;
     . This is also part of both the mutable and immutable container protocols. It should also raise appropriate exceptions:
     &lt;code&gt;
      TypeError
     &lt;/code&gt;
     if the type of the key is wrong and
     &lt;code&gt;
      KeyError
     &lt;/code&gt;
     if there is no corresponding value for the key.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __setitem__(self, key, value)
     &lt;/code&gt;
     - Defines behavior for when an item is assigned to, using the notation
     &lt;code&gt;
      self[nkey] = value
     &lt;/code&gt;
     . This is part of the mutable container protocol. Again, you should raise
     &lt;code&gt;
      KeyError
     &lt;/code&gt;
     and
     &lt;code&gt;
      TypeError
     &lt;/code&gt;
     where appropriate.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __delitem__(self, key)
     &lt;/code&gt;
     - Defines behavior for when an item is deleted (e.g.
     &lt;code&gt;
      del self[key]
     &lt;/code&gt;
     ). This is only part of the mutable container protocol. You must raise the appropriate exceptions when an invalid key is used.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __iter__(self)
     &lt;/code&gt;
     - Should return an iterator for the container. Iterators are returned in a number of contexts, most notably by the
     &lt;code&gt;
      iter()
     &lt;/code&gt;
     built in function and when a container is looped over using the form
     &lt;code&gt;
      for x in container:
     &lt;/code&gt;
     . Iterators are their own objects, and they also must define an
     &lt;code&gt;
      __iter__
     &lt;/code&gt;
     method that returns
     &lt;code&gt;
      self
     &lt;/code&gt;
     .
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __reversed__(self)
     &lt;/code&gt;
     - Called to implement behavior for the
     &lt;code&gt;
      reversed()
     &lt;/code&gt;
     built in function. Should return a reversed version of the sequence. Implement this only if the sequence class is ordered, like list or tuple.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __contains__(self, item)
     &lt;/code&gt;
     -
     &lt;code&gt;
      __contains__
     &lt;/code&gt;
     defines behavior for membership tests using in and not in. Why isn't this part of a sequence protocol, you ask? Because when
     &lt;code&gt;
      __contains__
     &lt;/code&gt;
     isn't defined, Python just iterates over the sequence and returns
     &lt;code&gt;
      True
     &lt;/code&gt;
     if it comes across the item it's looking for.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __missing__(self, key)
     &lt;/code&gt;
     -
     &lt;code&gt;
      __missing__
     &lt;/code&gt;
     is used in subclasses of
     &lt;code&gt;
      dict
     &lt;/code&gt;
     . It defines behavior for whenever a key is accessed that does not exist in a dictionary (so, for instance, if I had a dictionary
     &lt;code&gt;
      d
     &lt;/code&gt;
     and said
     &lt;code&gt;
      d["george"]
     &lt;/code&gt;
     when "george" is not a key in the dict,
     &lt;code&gt;
      d.__missing__("george")
     &lt;/code&gt;
     would be called).
    &lt;/li&gt;
   &lt;/ul&gt;
   &lt;h3&gt;
    &lt;a aria-hidden="true" class="anchor" href="#an-example" id="user-content-an-example"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    An example
   &lt;/h3&gt;
   &lt;p&gt;
    For our example, let's look at a list that implements some functional constructs that you might be used to from other languages (Haskell, for example).
   &lt;/p&gt;
   &lt;div class="highlight highlight-source-python"&gt;
    &lt;pre&gt;    &lt;span class="pl-k"&gt;class&lt;/span&gt; &lt;span class="pl-en"&gt;FunctionalList&lt;/span&gt;:
        &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'''&lt;/span&gt;A class wrapping a list with some extra functional magic, like head,&lt;/span&gt;
&lt;span class="pl-s"&gt;        tail, init, last, drop, and take.&lt;span class="pl-pds"&gt;'''&lt;/span&gt;&lt;/span&gt;

        &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-c1"&gt;__init__&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-smi"&gt;self&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-smi"&gt;values&lt;/span&gt;&lt;span class="pl-k"&gt;=&lt;/span&gt;&lt;span class="pl-c1"&gt;None&lt;/span&gt;):
            &lt;span class="pl-k"&gt;if&lt;/span&gt; values &lt;span class="pl-k"&gt;is&lt;/span&gt; &lt;span class="pl-c1"&gt;None&lt;/span&gt;:
                &lt;span class="pl-c1"&gt;self&lt;/span&gt;.values &lt;span class="pl-k"&gt;=&lt;/span&gt; []
            &lt;span class="pl-k"&gt;else&lt;/span&gt;:
                &lt;span class="pl-c1"&gt;self&lt;/span&gt;.values &lt;span class="pl-k"&gt;=&lt;/span&gt; values

        &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-c1"&gt;__len__&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-smi"&gt;self&lt;/span&gt;&lt;/span&gt;):
            &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-c1"&gt;len&lt;/span&gt;(&lt;span class="pl-c1"&gt;self&lt;/span&gt;.values)

        &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-c1"&gt;__getitem__&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-smi"&gt;self&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-smi"&gt;key&lt;/span&gt;):
            &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; if key is of invalid type or value, the list values will raise the error&lt;/span&gt;
            &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-c1"&gt;self&lt;/span&gt;.values[key]

        &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-c1"&gt;__setitem__&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-smi"&gt;self&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-smi"&gt;key&lt;/span&gt;, &lt;span class="pl-smi"&gt;value&lt;/span&gt;):
            &lt;span class="pl-c1"&gt;self&lt;/span&gt;.values[key] &lt;span class="pl-k"&gt;=&lt;/span&gt; value

        &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-c1"&gt;__delitem__&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-smi"&gt;self&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-smi"&gt;key&lt;/span&gt;):
            &lt;span class="pl-k"&gt;del&lt;/span&gt; &lt;span class="pl-c1"&gt;self&lt;/span&gt;.values[key]

        &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-c1"&gt;__iter__&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-smi"&gt;self&lt;/span&gt;&lt;/span&gt;):
            &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-c1"&gt;iter&lt;/span&gt;(&lt;span class="pl-c1"&gt;self&lt;/span&gt;.values)

        &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-c1"&gt;__reversed__&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-smi"&gt;self&lt;/span&gt;&lt;/span&gt;):
            &lt;span class="pl-k"&gt;return&lt;/span&gt; FunctionalList(&lt;span class="pl-c1"&gt;reversed&lt;/span&gt;(&lt;span class="pl-c1"&gt;self&lt;/span&gt;.values))

        &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;append&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-smi"&gt;self&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-smi"&gt;value&lt;/span&gt;):
            &lt;span class="pl-c1"&gt;self&lt;/span&gt;.values.append(value)
        &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;head&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-smi"&gt;self&lt;/span&gt;&lt;/span&gt;):
            &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; get the first element&lt;/span&gt;
            &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-c1"&gt;self&lt;/span&gt;.values[&lt;span class="pl-c1"&gt;0&lt;/span&gt;]
        &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;tail&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-smi"&gt;self&lt;/span&gt;&lt;/span&gt;):
            &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; get all elements after the first&lt;/span&gt;
            &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-c1"&gt;self&lt;/span&gt;.values[&lt;span class="pl-c1"&gt;1&lt;/span&gt;:]
        &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;init&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-smi"&gt;self&lt;/span&gt;&lt;/span&gt;):
            &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; get elements up to the last&lt;/span&gt;
            &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-c1"&gt;self&lt;/span&gt;.values[:&lt;span class="pl-k"&gt;-&lt;/span&gt;&lt;span class="pl-c1"&gt;1&lt;/span&gt;]
        &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;last&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-smi"&gt;self&lt;/span&gt;&lt;/span&gt;):
            &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; get last element&lt;/span&gt;
            &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-c1"&gt;self&lt;/span&gt;.values[&lt;span class="pl-k"&gt;-&lt;/span&gt;&lt;span class="pl-c1"&gt;1&lt;/span&gt;]
        &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;drop&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-smi"&gt;self&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-smi"&gt;n&lt;/span&gt;):
            &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; get all elements except first n&lt;/span&gt;
            &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-c1"&gt;self&lt;/span&gt;.values[n:]
        &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;take&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-smi"&gt;self&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-smi"&gt;n&lt;/span&gt;):
            &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; get first n elements&lt;/span&gt;
            &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-c1"&gt;self&lt;/span&gt;.values[:n]&lt;/pre&gt;
   &lt;/div&gt;
   &lt;br/&gt;
   &lt;p&gt;
    There you have it, a (marginally) useful example of how to implement your own sequence. Of course, there are more useful applications of custom sequences, but quite a few of them are already implemented in the standard library (batteries included, right?), like Counter, OrderedDict, and NamedTuple.
   &lt;/p&gt;
   &lt;h2&gt;
    &lt;a aria-hidden="true" class="anchor" href="#reflection" id="user-content-reflection"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Reflection
   &lt;/h2&gt;
   &lt;p&gt;
    You can also control how reflection using the built in functions
    &lt;code&gt;
     isinstance()
    &lt;/code&gt;
    and
    &lt;code&gt;
     issubclass()
    &lt;/code&gt;
    behaves by defining magic methods. The magic methods are:
   &lt;/p&gt;
   &lt;div class="highlight highlight-source-python"&gt;
    &lt;pre&gt;    &lt;span class="pl-c1"&gt;__instancecheck__&lt;/span&gt;(&lt;span class="pl-c1"&gt;self&lt;/span&gt;, instance) Checks &lt;span class="pl-k"&gt;if&lt;/span&gt; an instance &lt;span class="pl-k"&gt;is&lt;/span&gt; an instance of the &lt;span class="pl-k"&gt;class&lt;/span&gt; you defined (e.g. &lt;span class="pl-c1"&gt;isinstance&lt;/span&gt;(instance, &lt;span class="pl-k"&gt;class&lt;/span&gt;).
    &lt;span class="pl-c1"&gt;__subclasscheck__&lt;/span&gt;(&lt;span class="pl-c1"&gt;self&lt;/span&gt;, subclass) Checks &lt;span class="pl-k"&gt;if&lt;/span&gt; a &lt;span class="pl-k"&gt;class&lt;/span&gt; subclasses the &lt;span class="pl-k"&gt;class&lt;/span&gt; you defined (e.g. &lt;span class="pl-c1"&gt;issubclass&lt;/span&gt;(subclass, &lt;span class="pl-k"&gt;class&lt;/span&gt;)).&lt;/pre&gt;
   &lt;/div&gt;
   &lt;br/&gt;
   &lt;p&gt;
    The use case for these magic methods might seem small, and that may very well be true. I won't spend too much more time on reflection magic methods because they aren't very important, but they reflect something important about object-oriented programming in Python and Python in general: there is almost always an easy way to do something, even if it's rarely necessary. These magic methods might not seem useful, but if you ever need them you'll be glad that they're there (and that you read this guide!).
   &lt;/p&gt;
   &lt;h2&gt;
    &lt;a aria-hidden="true" class="anchor" href="#callable-objects" id="user-content-callable-objects"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Callable Objects
   &lt;/h2&gt;
   &lt;p&gt;
    As you may already know, in Python, functions are first-class objects. This means that they can be passed to functions and methods just as if they were objects of any other kind. This is an incredibly powerful feature.
   &lt;/p&gt;
   &lt;p&gt;
    A special magic method in Python allows instances of your classes to behave as if they were functions, so that you can "call" them, pass them to functions that take functions as arguments, and so on. This is another powerful convenience feature that makes programming in Python that much sweeter.
   &lt;/p&gt;
   &lt;ul&gt;
    &lt;li&gt;
     &lt;code&gt;
      __call__(self, [args...])
     &lt;/code&gt;
     -  Allows an instance of a class to be called as a function. Essentially, this means that
     &lt;code&gt;
      x()
     &lt;/code&gt;
     is the same as
     &lt;code&gt;
      x.__call__()
     &lt;/code&gt;
     . Note that
     &lt;code&gt;
      __call__
     &lt;/code&gt;
     takes a variable number of arguments; this means that you define
     &lt;code&gt;
      __call__
     &lt;/code&gt;
     as you would any other function, taking however many arguments you'd like it to.
    &lt;/li&gt;
   &lt;/ul&gt;
   &lt;p&gt;
    &lt;code&gt;
     __call__
    &lt;/code&gt;
    can be particularly useful in classes whose instances that need to often change state. "Calling" the instance can be an intuitive and elegant way to change the object's state. An example might be a class representing an entity's position on a plane:
   &lt;/p&gt;
   &lt;div class="highlight highlight-source-python"&gt;
    &lt;pre&gt;    &lt;span class="pl-k"&gt;class&lt;/span&gt; &lt;span class="pl-en"&gt;Entity&lt;/span&gt;:
        &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'''&lt;/span&gt;Class to represent an entity. Callable to update the entity's position.&lt;span class="pl-pds"&gt;'''&lt;/span&gt;&lt;/span&gt;

        &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-c1"&gt;__init__&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-smi"&gt;self&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-smi"&gt;size&lt;/span&gt;, &lt;span class="pl-smi"&gt;x&lt;/span&gt;, &lt;span class="pl-smi"&gt;y&lt;/span&gt;):
            &lt;span class="pl-c1"&gt;self&lt;/span&gt;.x, &lt;span class="pl-c1"&gt;self&lt;/span&gt;.y &lt;span class="pl-k"&gt;=&lt;/span&gt; x, y
            &lt;span class="pl-c1"&gt;self&lt;/span&gt;.size &lt;span class="pl-k"&gt;=&lt;/span&gt; size

        &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-c1"&gt;__call__&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-smi"&gt;self&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-smi"&gt;x&lt;/span&gt;, &lt;span class="pl-smi"&gt;y&lt;/span&gt;):
            &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'''&lt;/span&gt;Change the position of the entity.&lt;span class="pl-pds"&gt;'''&lt;/span&gt;&lt;/span&gt;
            &lt;span class="pl-c1"&gt;self&lt;/span&gt;.x, &lt;span class="pl-c1"&gt;self&lt;/span&gt;.y &lt;span class="pl-k"&gt;=&lt;/span&gt; x, y

        &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; snip...&lt;/span&gt;&lt;/pre&gt;
   &lt;/div&gt;
   &lt;br/&gt;
   &lt;h2&gt;
    &lt;a aria-hidden="true" class="anchor" href="#context-managers" id="user-content-context-managers"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Context Managers
   &lt;/h2&gt;
   &lt;p&gt;
    In Python 2.5, a new keyword was introduced in Python along with a new method for code reuse, the with statement. The concept of context managers was hardly new in Python (it was implemented before as a part of the library), but not until PEP 343 was accepted did it achieve status as a first class language construct. You may have seen with statements before:
   &lt;/p&gt;
   &lt;div class="highlight highlight-source-python"&gt;
    &lt;pre&gt;    &lt;span class="pl-k"&gt;with&lt;/span&gt; &lt;span class="pl-c1"&gt;open&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;foo.txt&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-k"&gt;as&lt;/span&gt; bar:
            &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; perform some action with bar&lt;/span&gt;&lt;/pre&gt;
   &lt;/div&gt;
   &lt;br/&gt;
   &lt;p&gt;
    Context managers allow setup and cleanup actions to be taken for objects when their creation is wrapped with a
    &lt;code&gt;
     with
    &lt;/code&gt;
    statement. The behavior of the context manager is determined by two magic methods:
   &lt;/p&gt;
   &lt;ul&gt;
    &lt;li&gt;
     &lt;code&gt;
      __enter__(self)
     &lt;/code&gt;
     - Defines what the context manager should do at the beginning of the block created by the with statement. Note that the return value of
     &lt;code&gt;
      __enter__
     &lt;/code&gt;
     is bound to the target of the with statement, or the name after the as.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __exit__(self, exception_type, exception_value, traceback)
     &lt;/code&gt;
     - Defines what the context manager should do after its block has been executed (or terminates). It can be used to handle exceptions, perform cleanup, or do something always done immediately after the action in the block. If the block executes successfully,
     &lt;code&gt;
      exception_type
     &lt;/code&gt;
     ,
     &lt;code&gt;
      exception_value
     &lt;/code&gt;
     , and 	traceback	 will be None. Otherwise, you can choose to handle the exception or let the user handle it; if you want to handle it, make sure
     &lt;code&gt;
      __exit__
     &lt;/code&gt;
     returns True after all is said and done. If you don't want the exception to be handled by the context manager, just let it happen.
    &lt;/li&gt;
   &lt;/ul&gt;
   &lt;p&gt;
    &lt;code&gt;
     __enter__
    &lt;/code&gt;
    and
    &lt;code&gt;
     __exit__
    &lt;/code&gt;
    can be useful for specific classes that have well-defined and common behavior for setup and cleanup. You can also use these methods to create generic context managers that wrap other objects. Here's an example:
   &lt;/p&gt;
   &lt;div class="highlight highlight-source-python"&gt;
    &lt;pre&gt;&lt;span class="pl-k"&gt;class&lt;/span&gt; &lt;span class="pl-en"&gt;Closer&lt;/span&gt;:
    &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'''&lt;/span&gt;A context manager to automatically close an object with a close method&lt;/span&gt;
&lt;span class="pl-s"&gt;    in a with statement.&lt;span class="pl-pds"&gt;'''&lt;/span&gt;&lt;/span&gt;

    &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-c1"&gt;__init__&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-smi"&gt;self&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-smi"&gt;obj&lt;/span&gt;):
        &lt;span class="pl-c1"&gt;self&lt;/span&gt;.obj &lt;span class="pl-k"&gt;=&lt;/span&gt; obj

    &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-c1"&gt;__enter__&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-smi"&gt;self&lt;/span&gt;&lt;/span&gt;):
        &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-c1"&gt;self&lt;/span&gt;.obj &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; bound to target&lt;/span&gt;

    &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-c1"&gt;__exit__&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-smi"&gt;self&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-smi"&gt;exception_type&lt;/span&gt;, &lt;span class="pl-smi"&gt;exception_val&lt;/span&gt;, &lt;span class="pl-smi"&gt;trace&lt;/span&gt;):
        &lt;span class="pl-k"&gt;try&lt;/span&gt;:
           &lt;span class="pl-c1"&gt;self&lt;/span&gt;.obj.close()
        &lt;span class="pl-k"&gt;except&lt;/span&gt; &lt;span class="pl-c1"&gt;AttributeError&lt;/span&gt;: &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; obj isn't closable&lt;/span&gt;
           &lt;span class="pl-c1"&gt;print&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;Not closable.&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;
           &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-c1"&gt;True&lt;/span&gt; &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; exception handled successfully&lt;/span&gt;&lt;/pre&gt;
   &lt;/div&gt;
   &lt;br/&gt;
   &lt;p&gt;
    Here's an example of
    &lt;code&gt;
     Closer
    &lt;/code&gt;
    in action, using an FTP connection to demonstrate it (a closable socket):
   &lt;/p&gt;
   &lt;div class="highlight highlight-source-python"&gt;
    &lt;pre&gt;    &lt;span class="pl-k"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-k"&gt;from&lt;/span&gt; magicmethods &lt;span class="pl-k"&gt;import&lt;/span&gt; Closer
    &lt;span class="pl-k"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-k"&gt;from&lt;/span&gt; ftplib &lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-c1"&gt;FTP&lt;/span&gt;
    &lt;span class="pl-k"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-k"&gt;with&lt;/span&gt; Closer(FTP(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;ftp.somesite.com&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;)) &lt;span class="pl-k"&gt;as&lt;/span&gt; conn:
    &lt;span class="pl-c1"&gt;...&lt;/span&gt;     conn.dir()
    &lt;span class="pl-c1"&gt;...&lt;/span&gt;
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; output omitted for brevity&lt;/span&gt;
    &lt;span class="pl-k"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; conn.dir()
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; long AttributeError message, can't use a connection that's closed&lt;/span&gt;
    &lt;span class="pl-k"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-k"&gt;with&lt;/span&gt; Closer(&lt;span class="pl-c1"&gt;int&lt;/span&gt;(&lt;span class="pl-c1"&gt;5&lt;/span&gt;)) &lt;span class="pl-k"&gt;as&lt;/span&gt; i:
    &lt;span class="pl-c1"&gt;...&lt;/span&gt;     i &lt;span class="pl-k"&gt;+=&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;
    &lt;span class="pl-c1"&gt;...&lt;/span&gt;
    Not closable.
    &lt;span class="pl-k"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; i
    &lt;span class="pl-c1"&gt;6&lt;/span&gt;&lt;/pre&gt;
   &lt;/div&gt;
   &lt;br/&gt;
   &lt;p&gt;
    See how our wrapper gracefully handled both proper and improper uses? That's the power of context managers and magic methods. Note that the Python standard library includes a module
    &lt;code&gt;
     contextlib
    &lt;/code&gt;
    that contains a context manager,
    &lt;code&gt;
     contextlib.closing()
    &lt;/code&gt;
    , that does approximately the same thing (without any handling of the case where an object does not have a
    &lt;code&gt;
     close()
    &lt;/code&gt;
    method).
   &lt;/p&gt;
   &lt;h2&gt;
    &lt;a aria-hidden="true" class="anchor" href="#abstract-base-classes" id="user-content-abstract-base-classes"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Abstract Base Classes
   &lt;/h2&gt;
   &lt;p&gt;
    See
    &lt;a href="http://docs.python.org/2/library/abc.html" rel="nofollow"&gt;
     http://docs.python.org/2/library/abc.html
    &lt;/a&gt;
    .
   &lt;/p&gt;
   &lt;h2&gt;
    &lt;a aria-hidden="true" class="anchor" href="#building-descriptor-objects" id="user-content-building-descriptor-objects"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Building Descriptor Objects
   &lt;/h2&gt;
   &lt;p&gt;
    Descriptors are classes which, when accessed through either getting, setting, or deleting, can also alter other objects. Descriptors aren't meant to stand alone; rather, they're meant to be held by an owner class. Descriptors can be useful when building object-oriented databases or classes that have attributes whose values are dependent on each other. Descriptors are particularly useful when representing attributes in several different units of measurement or representing computed attributes (like distance from the origin in a class to represent a point on a grid).
   &lt;/p&gt;
   &lt;p&gt;
    To be a descriptor, a class must have at least one of
    &lt;code&gt;
     __get__
    &lt;/code&gt;
    ,
    &lt;code&gt;
     __set__
    &lt;/code&gt;
    , and
    &lt;code&gt;
     __delete__
    &lt;/code&gt;
    implemented. Let's take a look at those magic methods:
   &lt;/p&gt;
   &lt;ul&gt;
    &lt;li&gt;
     &lt;code&gt;
      __get__(self, instance, owner)
     &lt;/code&gt;
     - Define behavior for when the descriptor's value is retrieved. instance is the instance of the owner object. owner is the owner class itself.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __set__(self, instance, value)
     &lt;/code&gt;
     - Define behavior for when the descriptor's value is changed. instance is the instance of the owner class and value is the value to set the descriptor to.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __delete__(self, instance)
     &lt;/code&gt;
     - Define behavior for when the descriptor's value is deleted. instance is the instance of the owner object.
    &lt;/li&gt;
   &lt;/ul&gt;
   &lt;p&gt;
    Now, an example of a useful application of descriptors: unit conversions.
   &lt;/p&gt;
   &lt;div class="highlight highlight-source-python"&gt;
    &lt;pre&gt;    &lt;span class="pl-k"&gt;class&lt;/span&gt; &lt;span class="pl-en"&gt;Meter&lt;/span&gt;(&lt;span class="pl-c1"&gt;object&lt;/span&gt;):
        &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'''&lt;/span&gt;Descriptor for a meter.&lt;span class="pl-pds"&gt;'''&lt;/span&gt;&lt;/span&gt;

        &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-c1"&gt;__init__&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-smi"&gt;self&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-smi"&gt;value&lt;/span&gt;&lt;span class="pl-k"&gt;=&lt;/span&gt;&lt;span class="pl-c1"&gt;0.0&lt;/span&gt;):
            &lt;span class="pl-c1"&gt;self&lt;/span&gt;.value &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;float&lt;/span&gt;(value)
        &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-c1"&gt;__get__&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-smi"&gt;self&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-smi"&gt;instance&lt;/span&gt;, &lt;span class="pl-smi"&gt;owner&lt;/span&gt;):
            &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-c1"&gt;self&lt;/span&gt;.value
        &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-c1"&gt;__set__&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-smi"&gt;self&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-smi"&gt;instance&lt;/span&gt;, &lt;span class="pl-smi"&gt;value&lt;/span&gt;):
            &lt;span class="pl-c1"&gt;self&lt;/span&gt;.value &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;float&lt;/span&gt;(value)

    &lt;span class="pl-k"&gt;class&lt;/span&gt; &lt;span class="pl-en"&gt;Foot&lt;/span&gt;(&lt;span class="pl-c1"&gt;object&lt;/span&gt;):
        &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'''&lt;/span&gt;Descriptor for a foot.&lt;span class="pl-pds"&gt;'''&lt;/span&gt;&lt;/span&gt;

        &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-c1"&gt;__get__&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-smi"&gt;self&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-smi"&gt;instance&lt;/span&gt;, &lt;span class="pl-smi"&gt;owner&lt;/span&gt;):
            &lt;span class="pl-k"&gt;return&lt;/span&gt; instance.meter &lt;span class="pl-k"&gt;*&lt;/span&gt; &lt;span class="pl-c1"&gt;3.2808&lt;/span&gt;
        &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-c1"&gt;__set__&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-smi"&gt;self&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-smi"&gt;instance&lt;/span&gt;, &lt;span class="pl-smi"&gt;value&lt;/span&gt;):
            instance.meter &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;float&lt;/span&gt;(value) &lt;span class="pl-k"&gt;/&lt;/span&gt; &lt;span class="pl-c1"&gt;3.2808&lt;/span&gt;

    &lt;span class="pl-k"&gt;class&lt;/span&gt; &lt;span class="pl-en"&gt;Distance&lt;/span&gt;(&lt;span class="pl-c1"&gt;object&lt;/span&gt;):
        &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'''&lt;/span&gt;Class to represent distance holding two descriptors for feet and&lt;/span&gt;
&lt;span class="pl-s"&gt;        meters.&lt;span class="pl-pds"&gt;'''&lt;/span&gt;&lt;/span&gt;
        meter &lt;span class="pl-k"&gt;=&lt;/span&gt; Meter()
        foot &lt;span class="pl-k"&gt;=&lt;/span&gt; Foot()&lt;/pre&gt;
   &lt;/div&gt;
   &lt;br/&gt;
   &lt;h2&gt;
    &lt;a aria-hidden="true" class="anchor" href="#copying" id="user-content-copying"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Copying
   &lt;/h2&gt;
   &lt;p&gt;
    Sometimes, particularly when dealing with mutable objects, you want to be able to copy an object and make changes without affecting what you copied from. This is where Python's copy comes into play. However (fortunately), Python modules are not sentient, so we don't have to worry about a Linux-based robot uprising, but we do have to tell Python how to efficiently copy things.
   &lt;/p&gt;
   &lt;ul&gt;
    &lt;li&gt;
     &lt;code&gt;
      __copy__(self)
     &lt;/code&gt;
     - Defines behavior for
     &lt;code&gt;
      copy.copy()
     &lt;/code&gt;
     for instances of your class.
     &lt;code&gt;
      copy.copy()
     &lt;/code&gt;
     returns a shallow copy of your object -- this means that, while the instance itself is a new instance, all of its data is referenced -- i.e., the object itself is copied, but its data is still referenced (and hence changes to data in a shallow copy may cause changes in the original).
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __deepcopy__(self, memodict={})
     &lt;/code&gt;
     - Defines behavior for
     &lt;code&gt;
      copy.deepcopy()
     &lt;/code&gt;
     for instances of your class.
     &lt;code&gt;
      copy.deepcopy()
     &lt;/code&gt;
     returns a deep copy of your object -- the object and its data are both copied. memodict is a cache of previously copied objects -- this optimizes copying and prevents infinite recursion when copying recursive data structures. When you want to deep copy an individual attribute, call
     &lt;code&gt;
      copy.deepcopy()
     &lt;/code&gt;
     on that attribute with memodict as the first argument.
    &lt;/li&gt;
   &lt;/ul&gt;
   &lt;p&gt;
    What are some use cases for these magic methods? As always, in any case where you need more fine-grained control than what the default behavior gives you. For instance, if you are attempting to copy an object that stores a cache as a dictionary (which might be large), it might not make sense to copy the cache as well -- if the cache can be shared in memory between instances, then it should be.
   &lt;/p&gt;
   &lt;h2&gt;
    &lt;a aria-hidden="true" class="anchor" href="#pickling-your-objects" id="user-content-pickling-your-objects"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Pickling Your Objects
   &lt;/h2&gt;
   &lt;p&gt;
    If you spend time with other Pythonistas, chances are you've at least heard of pickling. Pickling is a serialization process for Python data structures, and can be incredibly useful when you need to store an object and retrieve it later (usually for caching). It's also a major source of worries and confusion.
   &lt;/p&gt;
   &lt;p&gt;
    Pickling is so important that it doesn't just have its own module (
    &lt;code&gt;
     pickle
    &lt;/code&gt;
    ), but its own protocol and the magic methods to go with it. But first, a brief word on how to pickle existing types(feel free to skip it if you already know).
   &lt;/p&gt;
   &lt;h3&gt;
    &lt;a aria-hidden="true" class="anchor" href="#pickling-a-quick-soak-in-the-brine" id="user-content-pickling-a-quick-soak-in-the-brine"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Pickling: A Quick Soak in the Brine
   &lt;/h3&gt;
   &lt;p&gt;
    Let's dive into pickling. Say you have a dictionary that you want to store and retrieve later. You couldwrite it's contents to a file, carefully making sure that you write correct syntax, then retrieve it using either
    &lt;code&gt;
     exec()
    &lt;/code&gt;
    or processing the file input. But this is precarious at best: if you store important data in plain text, it could be corrupted or changed in any number of ways to make your program crash or worse run malicious code on your computer. Instead, we're going to pickle it:
   &lt;/p&gt;
   &lt;div class="highlight highlight-source-python"&gt;
    &lt;pre&gt;    &lt;span class="pl-k"&gt;import&lt;/span&gt; pickle

    data &lt;span class="pl-k"&gt;=&lt;/span&gt; {&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;foo&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;: [&lt;span class="pl-c1"&gt;1&lt;/span&gt;, &lt;span class="pl-c1"&gt;2&lt;/span&gt;, &lt;span class="pl-c1"&gt;3&lt;/span&gt;],
            &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;bar&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;: (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;Hello&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;world!&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;),
            &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;baz&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;: &lt;span class="pl-c1"&gt;True&lt;/span&gt;}
    jar &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;open&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;data.pkl&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;wb&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;)
    pickle.dump(data, jar) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; write the pickled data to the file jar&lt;/span&gt;
    jar.close()&lt;/pre&gt;
   &lt;/div&gt;
   &lt;br/&gt;
   &lt;p&gt;
    Now, a few hours later, we want it back. All we have to do is unpickle it:
   &lt;/p&gt;
   &lt;div class="highlight highlight-source-python"&gt;
    &lt;pre&gt;    &lt;span class="pl-k"&gt;import&lt;/span&gt; pickle

    pkl_file &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;open&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;data.pkl&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;rb&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; connect to the pickled data&lt;/span&gt;
    data &lt;span class="pl-k"&gt;=&lt;/span&gt; pickle.load(pkl_file) &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; load it into a variable&lt;/span&gt;
    &lt;span class="pl-c1"&gt;print&lt;/span&gt; data
    pkl_file.close()&lt;/pre&gt;
   &lt;/div&gt;
   &lt;br/&gt;
   &lt;p&gt;
    What happens? Exactly what you expect. It's just like we had data all along.
   &lt;/p&gt;
   &lt;p&gt;
    Now, for a word of caution: pickling is not perfect. Pickle files are easily corrupted on accident and on purpose. Pickling may be more secure than using flat text files, but it still can be used to run malicious code. It's also incompatible across versions of Python, so don't expect to distribute pickled objects and expect people to be able to open them. However, it can also be a powerful tool for caching and other common serialization tasks.
   &lt;/p&gt;
   &lt;h3&gt;
    &lt;a aria-hidden="true" class="anchor" href="#pickling-your-own-objects" id="user-content-pickling-your-own-objects"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Pickling your own Objects
   &lt;/h3&gt;
   &lt;p&gt;
    Pickling isn't just for built-in types. It's for any class that follows the pickle protocol. The pickle protocol has four optional methods for Python objects to customize how they act (it's a bit different for C extensions, but that's not in our scope):
   &lt;/p&gt;
   &lt;ul&gt;
    &lt;li&gt;
     &lt;code&gt;
      __getinitargs__(self)
     &lt;/code&gt;
     - If you'd like for
     &lt;code&gt;
      __init__
     &lt;/code&gt;
     to be called when your class is unpickled, you can define
     &lt;code&gt;
      __getinitargs__
     &lt;/code&gt;
     , which should return a tuple of the arguments that you'd like to be passed to
     &lt;code&gt;
      __init__
     &lt;/code&gt;
     . Note that this method will only work for old-style classes.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __getnewargs__(self)
     &lt;/code&gt;
     - For new-style classes, you can influence what arguments get passed to
     &lt;code&gt;
      __new__
     &lt;/code&gt;
     upon unpickling. This method should also return a tuple of arguments that will then be passed to
     &lt;code&gt;
      __new__
     &lt;/code&gt;
     .
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __getstate__(self)
     &lt;/code&gt;
     - Instead of the object's
     &lt;code&gt;
      __dict__
     &lt;/code&gt;
     attribute being stored, you can return a custom state to be stored when the object is pickled. That state will be used by
     &lt;code&gt;
      __setstate__
     &lt;/code&gt;
     when the object is unpickled.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __setstate__(self, state)
     &lt;/code&gt;
     - When the object is unpickled, if
     &lt;code&gt;
      __setstate__
     &lt;/code&gt;
     is defined the object's state will be passed to it instead of directly applied to the object's
     &lt;code&gt;
      __dict__
     &lt;/code&gt;
     . This goes hand in hand with
     &lt;code&gt;
      __getstate__
     &lt;/code&gt;
     : when both are defined, you can represent the object's pickled state however you want with whatever you want.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __reduce__(self)
     &lt;/code&gt;
     - When defining extension types (i.e., types implemented using Python's C API), you have to tell Python how to pickle them if you want them to pickle them.
     &lt;code&gt;
      __reduce__()
     &lt;/code&gt;
     is called when an object defining it is pickled. It can either return a string representing a global name that Python will look up and pickle, or a tuple. The tuple contains between 2 and 5 elements: a callable object that is called to recreate the object, a tuple of arguments for that callable object, state to be passed to
     &lt;code&gt;
      __setstate__
     &lt;/code&gt;
     (optional), an iterator yielding list items to be pickled (optional), and an iterator yielding dictionary items to be pickled (optional).
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __reduce_ex__(self)
     &lt;/code&gt;
     -
     &lt;code&gt;
      __reduce_ex__
     &lt;/code&gt;
     exists for compatibility. If it is defined,
     &lt;code&gt;
      __reduce_ex__
     &lt;/code&gt;
     will be called over
     &lt;code&gt;
      __reduce__
     &lt;/code&gt;
     on pickling.
     &lt;code&gt;
      __reduce__
     &lt;/code&gt;
     can be defined as well for older versions of the pickling API that did not support
     &lt;code&gt;
      __reduce_ex__
     &lt;/code&gt;
     .
    &lt;/li&gt;
   &lt;/ul&gt;
   &lt;h3&gt;
    &lt;a aria-hidden="true" class="anchor" href="#an-example-1" id="user-content-an-example-1"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    An Example
   &lt;/h3&gt;
   &lt;p&gt;
    Our example is a
    &lt;code&gt;
     Slate
    &lt;/code&gt;
    , which remembers what its values have been and when those values were written to it. However, this particular slate goes blank each time it is pickled: the current value will not be saved.
   &lt;/p&gt;
   &lt;div class="highlight highlight-source-python"&gt;
    &lt;pre&gt;    &lt;span class="pl-k"&gt;import&lt;/span&gt; time

    &lt;span class="pl-k"&gt;class&lt;/span&gt; &lt;span class="pl-en"&gt;Slate&lt;/span&gt;:
        &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'''&lt;/span&gt;Class to store a string and a changelog, and forget its value when&lt;/span&gt;
&lt;span class="pl-s"&gt;        pickled.&lt;span class="pl-pds"&gt;'''&lt;/span&gt;&lt;/span&gt;

        &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-c1"&gt;__init__&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-smi"&gt;self&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-smi"&gt;value&lt;/span&gt;):
            &lt;span class="pl-c1"&gt;self&lt;/span&gt;.value &lt;span class="pl-k"&gt;=&lt;/span&gt; value
            &lt;span class="pl-c1"&gt;self&lt;/span&gt;.last_change &lt;span class="pl-k"&gt;=&lt;/span&gt; time.asctime()
            &lt;span class="pl-c1"&gt;self&lt;/span&gt;.history &lt;span class="pl-k"&gt;=&lt;/span&gt; {}

        &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;change&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-smi"&gt;self&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-smi"&gt;new_value&lt;/span&gt;):
            &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Change the value. Commit last value to history&lt;/span&gt;
            &lt;span class="pl-c1"&gt;self&lt;/span&gt;.history[&lt;span class="pl-c1"&gt;self&lt;/span&gt;.last_change] &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;self&lt;/span&gt;.value
            &lt;span class="pl-c1"&gt;self&lt;/span&gt;.value &lt;span class="pl-k"&gt;=&lt;/span&gt; new_value
            &lt;span class="pl-c1"&gt;self&lt;/span&gt;.last_change &lt;span class="pl-k"&gt;=&lt;/span&gt; time.asctime()

        &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;print_changes&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-smi"&gt;self&lt;/span&gt;&lt;/span&gt;):
            &lt;span class="pl-c1"&gt;print&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;Changelog for Slate object:&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;
            &lt;span class="pl-k"&gt;for&lt;/span&gt; k, v &lt;span class="pl-k"&gt;in&lt;/span&gt; &lt;span class="pl-c1"&gt;self&lt;/span&gt;.history.items():
                &lt;span class="pl-c1"&gt;print&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;span class="pl-c1"&gt;%s&lt;/span&gt;&lt;span class="pl-cce"&gt;\t&lt;/span&gt; &lt;span class="pl-c1"&gt;%s&lt;/span&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;%&lt;/span&gt; (k, v)

        &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-c1"&gt;__getstate__&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-smi"&gt;self&lt;/span&gt;&lt;/span&gt;):
            &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Deliberately do not return self.value or self.last_change.&lt;/span&gt;
            &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; We want to have a "blank slate" when we unpickle.&lt;/span&gt;
            &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-c1"&gt;self&lt;/span&gt;.history

        &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-c1"&gt;__setstate__&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-smi"&gt;self&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-smi"&gt;state&lt;/span&gt;):
            &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Make self.history = state and last_change and value undefined&lt;/span&gt;
            &lt;span class="pl-c1"&gt;self&lt;/span&gt;.history &lt;span class="pl-k"&gt;=&lt;/span&gt; state
            &lt;span class="pl-c1"&gt;self&lt;/span&gt;.value, &lt;span class="pl-c1"&gt;self&lt;/span&gt;.last_change &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;None&lt;/span&gt;, &lt;span class="pl-c1"&gt;None&lt;/span&gt;&lt;/pre&gt;
   &lt;/div&gt;
   &lt;br/&gt;
   &lt;h2&gt;
    &lt;a aria-hidden="true" class="anchor" href="#conclusion" id="user-content-conclusion"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Conclusion
   &lt;/h2&gt;
   &lt;p&gt;
    The goal of this guide is to bring something to anyone that reads it, regardless of their experience with Python or object-oriented programming. If you're just getting started with Python, you've gained valuable knowledge of the basics of writing feature-rich, elegant, and easy-to-use classes. If you're an intermediate Python programmer, you've probably picked up some slick new concepts and strategies and some good ways to reduce the amount of code written by you and clients. If you're an expert Pythonista, you've been refreshed on some of the stuff you might have forgotten about and maybe picked up a few new tricks along the way. Whatever your experience level, I hope that this trip through Python's special methods has been truly magical (I couldn't resist the final pun).
   &lt;/p&gt;
   &lt;h2&gt;
    &lt;a aria-hidden="true" class="anchor" href="#appendix-1-how-to-call-magic-methods" id="user-content-appendix-1-how-to-call-magic-methods"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Appendix 1: How to Call Magic Methods
   &lt;/h2&gt;
   &lt;p&gt;
    Some of the magic methods in Python directly map to built-in functions; in this case, how to invoke them is fairly obvious. However, in other cases, the invocation is far less obvious. This appendix is devoted to exposing non-obvious syntax that leads to magic methods getting called.
   &lt;/p&gt;
   &lt;table&gt;
    &lt;thead&gt;
     &lt;tr&gt;
      &lt;th&gt;
       Magic Method
      &lt;/th&gt;
      &lt;th&gt;
       When it gets invoked (example)
      &lt;/th&gt;
      &lt;th&gt;
       Explanation
      &lt;/th&gt;
     &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
     &lt;tr&gt;
      &lt;td&gt;
       &lt;code&gt;
        __new__(cls [,...])
       &lt;/code&gt;
      &lt;/td&gt;
      &lt;td&gt;
       &lt;code&gt;
        instance = MyClass(arg1, arg2)
       &lt;/code&gt;
      &lt;/td&gt;
      &lt;td&gt;
       &lt;code&gt;
        __new__
       &lt;/code&gt;
       is called on instance creation
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       &lt;code&gt;
        __init__(self [,...])
       &lt;/code&gt;
      &lt;/td&gt;
      &lt;td&gt;
       &lt;code&gt;
        instance = MyClass(arg1, arg2)
       &lt;/code&gt;
      &lt;/td&gt;
      &lt;td&gt;
       &lt;code&gt;
        __init__
       &lt;/code&gt;
       is called on instance creation
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       &lt;code&gt;
        __cmp__(self, other)
       &lt;/code&gt;
      &lt;/td&gt;
      &lt;td&gt;
       &lt;code&gt;
        self == other, self &amp;gt; other, etc.
       &lt;/code&gt;
      &lt;/td&gt;
      &lt;td&gt;
       Called for any comparison
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       &lt;code&gt;
        __pos__(self)
       &lt;/code&gt;
      &lt;/td&gt;
      &lt;td&gt;
       &lt;code&gt;
        +self
       &lt;/code&gt;
      &lt;/td&gt;
      &lt;td&gt;
       Unary plus sign
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       &lt;code&gt;
        __neg__(self)
       &lt;/code&gt;
      &lt;/td&gt;
      &lt;td&gt;
       &lt;code&gt;
        -self
       &lt;/code&gt;
      &lt;/td&gt;
      &lt;td&gt;
       Unary minus sign
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       &lt;code&gt;
        __invert__(self)
       &lt;/code&gt;
      &lt;/td&gt;
      &lt;td&gt;
       &lt;code&gt;
        ~self
       &lt;/code&gt;
      &lt;/td&gt;
      &lt;td&gt;
       Bitwise inversion
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       &lt;code&gt;
        __index__(self)
       &lt;/code&gt;
      &lt;/td&gt;
      &lt;td&gt;
       &lt;code&gt;
        x[self]
       &lt;/code&gt;
      &lt;/td&gt;
      &lt;td&gt;
       Conversion when object is used as index
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       &lt;code&gt;
        __nonzero__(self)
       &lt;/code&gt;
      &lt;/td&gt;
      &lt;td&gt;
       &lt;code&gt;
        bool(self)
       &lt;/code&gt;
      &lt;/td&gt;
      &lt;td&gt;
       Boolean value of the object
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       &lt;code&gt;
        __getattr__(self, name)
       &lt;/code&gt;
      &lt;/td&gt;
      &lt;td&gt;
       &lt;code&gt;
        self.name # name doesn't exist
       &lt;/code&gt;
      &lt;/td&gt;
      &lt;td&gt;
       Accessing nonexistent attribute
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       &lt;code&gt;
        __setattr__(self, name, val)
       &lt;/code&gt;
      &lt;/td&gt;
      &lt;td&gt;
       &lt;code&gt;
        self.name = val
       &lt;/code&gt;
      &lt;/td&gt;
      &lt;td&gt;
       Assigning to an attribute
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       &lt;code&gt;
        __delattr__(self, name)
       &lt;/code&gt;
      &lt;/td&gt;
      &lt;td&gt;
       &lt;code&gt;
        del self.name
       &lt;/code&gt;
      &lt;/td&gt;
      &lt;td&gt;
       Deleting an attribute
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       &lt;code&gt;
        __getattribute__(self, name)
       &lt;/code&gt;
      &lt;/td&gt;
      &lt;td&gt;
       &lt;code&gt;
        self.name
       &lt;/code&gt;
      &lt;/td&gt;
      &lt;td&gt;
       Accessing any attribute
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       &lt;code&gt;
        __getitem__(self, key)
       &lt;/code&gt;
      &lt;/td&gt;
      &lt;td&gt;
       &lt;code&gt;
        self[key]
       &lt;/code&gt;
      &lt;/td&gt;
      &lt;td&gt;
       Accessing an item using an index
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       &lt;code&gt;
        __setitem__(self, key, val)
       &lt;/code&gt;
      &lt;/td&gt;
      &lt;td&gt;
       &lt;code&gt;
        self[key] = val
       &lt;/code&gt;
      &lt;/td&gt;
      &lt;td&gt;
       Assigning to an item using an index
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       &lt;code&gt;
        __delitem__(self, key)
       &lt;/code&gt;
      &lt;/td&gt;
      &lt;td&gt;
       &lt;code&gt;
        del self[key]
       &lt;/code&gt;
      &lt;/td&gt;
      &lt;td&gt;
       Deleting an item using an index
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       &lt;code&gt;
        __iter__(self)
       &lt;/code&gt;
      &lt;/td&gt;
      &lt;td&gt;
       &lt;code&gt;
        for x in self
       &lt;/code&gt;
      &lt;/td&gt;
      &lt;td&gt;
       Iteration
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       &lt;code&gt;
        __contains__(self, value)
       &lt;/code&gt;
      &lt;/td&gt;
      &lt;td&gt;
       &lt;code&gt;
        value in self, value not in self
       &lt;/code&gt;
      &lt;/td&gt;
      &lt;td&gt;
       Membership tests using
       &lt;code&gt;
        in
       &lt;/code&gt;
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       &lt;code&gt;
        __call__(self [,...])
       &lt;/code&gt;
      &lt;/td&gt;
      &lt;td&gt;
       &lt;code&gt;
        self(args)
       &lt;/code&gt;
      &lt;/td&gt;
      &lt;td&gt;
       "Calling" an instance
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       &lt;code&gt;
        __enter__(self)
       &lt;/code&gt;
      &lt;/td&gt;
      &lt;td&gt;
       &lt;code&gt;
        with self as x:
       &lt;/code&gt;
      &lt;/td&gt;
      &lt;td&gt;
       &lt;code&gt;
        with
       &lt;/code&gt;
       statement context managers
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       &lt;code&gt;
        __exit__(self, exc, val, trace)
       &lt;/code&gt;
      &lt;/td&gt;
      &lt;td&gt;
       &lt;code&gt;
        with self as x:
       &lt;/code&gt;
      &lt;/td&gt;
      &lt;td&gt;
       &lt;code&gt;
        with
       &lt;/code&gt;
       statement context managers
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       &lt;code&gt;
        __getstate__(self)
       &lt;/code&gt;
      &lt;/td&gt;
      &lt;td&gt;
       &lt;code&gt;
        pickle.dump(pkl_file, self)
       &lt;/code&gt;
      &lt;/td&gt;
      &lt;td&gt;
       Pickling
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       &lt;code&gt;
        __setstate__(self)
       &lt;/code&gt;
      &lt;/td&gt;
      &lt;td&gt;
       &lt;code&gt;
        data = pickle.load(pkl_file)
       &lt;/code&gt;
      &lt;/td&gt;
      &lt;td&gt;
       Pickling
      &lt;/td&gt;
     &lt;/tr&gt;
    &lt;/tbody&gt;
   &lt;/table&gt;
   &lt;p&gt;
    Hopefully, this table should have cleared up any questions you might have had about what syntax invokes which magic method.
   &lt;/p&gt;
   &lt;h2&gt;
    &lt;a aria-hidden="true" class="anchor" href="#appendix-2-changes-in-python-3" id="user-content-appendix-2-changes-in-python-3"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Appendix 2: Changes in Python 3
   &lt;/h2&gt;
   &lt;p&gt;
    Here, we document a few major places where Python 3 differs from 2.x in terms of its object model:
   &lt;/p&gt;
   &lt;ul&gt;
    &lt;li&gt;
     Since the distinction between string and unicode has been done away with in Python 3,
     &lt;code&gt;
      __unicode__
     &lt;/code&gt;
     is gone and
     &lt;code&gt;
      __bytes__
     &lt;/code&gt;
     (which behaves similarly to
     &lt;code&gt;
      __str__
     &lt;/code&gt;
     and
     &lt;code&gt;
      __unicode__
     &lt;/code&gt;
     in 2.7) exists for a new built-in for constructing byte arrays.
    &lt;/li&gt;
    &lt;li&gt;
     Since division defaults to true division in Python 3,
     &lt;code&gt;
      __div__
     &lt;/code&gt;
     is gone in Python 3
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __coerce__
     &lt;/code&gt;
     is gone due to redundancy with other magic methods and confusing behavior
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __cmp__
     &lt;/code&gt;
     is gone due to redundancy with other magic methods
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      __nonzero__
     &lt;/code&gt;
     has been renamed to
     &lt;code&gt;
      __bool__
     &lt;/code&gt;
    &lt;/li&gt;
   &lt;/ul&gt;
   &lt;p&gt;
    &lt;a href="https://bitdeli.com/free" rel="nofollow" title="Bitdeli Badge"&gt;
     &lt;img alt="Bitdeli Badge" data-canonical-src="https://d2weczhvl823v0.cloudfront.net/minhhh/magicmethods/trend.png" src="https://camo.githubusercontent.com/cfc702718d96e78f9afef53956bd7fbb03deaabb/68747470733a2f2f64327765637a68766c38323376302e636c6f756466726f6e742e6e65742f6d696e6868682f6d616769636d6574686f64732f7472656e642e706e67" style="max-width:100%;"/&gt;
    &lt;/a&gt;
   &lt;/p&gt;
  &lt;/article&gt;
 &lt;/div&gt;
&lt;/div&gt;

            &lt;div class="git-meta"&gt;
                
                &lt;span&gt;Brought to you by me &lt;a href="https://github.com/minhhh/pelican_git"&gt;pelican_git&lt;/a&gt;.&lt;/span&gt;
                
                &lt;span style="float: right; color: #369;"&gt;&lt;a href="https://github.com/minhhh/magicmethods/blob/master/README.md"&gt;view original&lt;/a&gt;&lt;/span&gt;
                &lt;span style="float: right; margin-right: 8px;"&gt;
                    &lt;a style="color: rgb(102, 102, 102);" href="https://github.com/minhhh/magicmethods/blob/master/README.md"&gt;README.md&lt;/a&gt;&lt;/span&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;&lt;/p&gt;</summary><category term="python"></category><category term="magic method"></category></entry><entry><title>Awk tutorial</title><link href="http://minhhh.github.io/posts/awk-tutorial" rel="alternate"></link><published>2014-10-05T00:00:00-04:00</published><updated>2014-10-05T00:00:00-04:00</updated><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2014-10-05:posts/awk-tutorial</id><summary type="html">&lt;p&gt;&lt;div&gt;
    &lt;style type = "text/css" scoped&gt;
.git-content div {
    padding: 0;
    margin: 0;
}

.git-content .git-file {
    border: 1px solid #DEDEDE;
    margin-bottom: 1em;
}

.git-content .git-file .git-meta {
    background-color: #EAEAEA;
    color: #666666;
    font-size: 85%;
    overflow: hidden;
    padding: 0.5em;
}

.git-content .git-file .git-meta a {
    color: #336699;
}

.git-content .git-file .git-meta a:visited {
    color: #773377;
}

.git-content .git-file {
    background-color: #F8F8FF;
    border-bottom: 1px solid #DDDDDD;
    font-size: 100%;
    overflow: auto;
    word-wrap: normal;
}

.git-content .git-file pre {
    background: none repeat scroll 0 0 transparent !important;
    border: medium none !important;
    margin: 0 !important;
    padding: 0 !important;
}
    &lt;/style&gt;
    &lt;div class="git-content"&gt;
        &lt;div class="git-file"&gt;
            &lt;div class="file"&gt;
 &lt;div class="readme blob instapaper_body js-code-block-container" id="readme"&gt;
  &lt;article class="markdown-body entry-content" itemprop="text"&gt;
   &lt;h1&gt;
    &lt;a aria-hidden="true" class="anchor" href="#awk-cheatsheet" id="user-content-awk-cheatsheet"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    AWK CHEATSHEET
   &lt;/h1&gt;
   &lt;h2&gt;
    &lt;a aria-hidden="true" class="anchor" href="#run" id="user-content-run"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Run
   &lt;/h2&gt;
   &lt;p&gt;
    Call from command line
   &lt;/p&gt;
   &lt;div class="highlight highlight-source-shell"&gt;
    &lt;pre&gt;    awk &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;pattern1 {action1}&lt;/span&gt;
&lt;span class="pl-s"&gt;    pattern2 {action2} ...&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt; file1 file2 ..&lt;/pre&gt;
   &lt;/div&gt;
   &lt;br/&gt;
   &lt;p&gt;
    Call a script
   &lt;/p&gt;
   &lt;div class="highlight highlight-source-shell"&gt;
    &lt;pre&gt;    awk -f script file1 file2 ...&lt;/pre&gt;
   &lt;/div&gt;
   &lt;br/&gt;
   &lt;p&gt;
    Call without input files
   &lt;/p&gt;
   &lt;div class="highlight highlight-source-shell"&gt;
    &lt;pre&gt;    awk &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;program&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;
   &lt;/div&gt;
   &lt;br/&gt;
   &lt;h2&gt;
    &lt;a aria-hidden="true" class="anchor" href="#regular-expression" id="user-content-regular-expression"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Regular expression
   &lt;/h2&gt;
   &lt;p&gt;
    Awk can use regular exrepssion as conditions
   &lt;/p&gt;
   &lt;div class="highlight highlight-source-shell"&gt;
    &lt;pre&gt;    awk &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;/foo/ {program}&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt; file&lt;/pre&gt;
   &lt;/div&gt;
   &lt;br/&gt;
   &lt;p&gt;
    Awk supports Character class in POSIX standard such as [:alpha], [:alnum:]
   &lt;/p&gt;
   &lt;h3&gt;
    &lt;a aria-hidden="true" class="anchor" href="#case-sensitivity" id="user-content-case-sensitivity"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Case sensitivity
   &lt;/h3&gt;
   &lt;p&gt;
    Either use function
    &lt;code&gt;
     tolower
    &lt;/code&gt;
   &lt;/p&gt;
   &lt;div class="highlight highlight-source-shell"&gt;
    &lt;pre&gt;    tolower(&lt;span class="pl-smi"&gt;$1&lt;/span&gt;) &lt;span class="pl-k"&gt;~&lt;/span&gt; /foo/ {...}&lt;/pre&gt;
   &lt;/div&gt;
   &lt;br/&gt;
   &lt;p&gt;
    Or set variable
    &lt;code&gt;
     IGNORECASE
    &lt;/code&gt;
    to non-zero
   &lt;/p&gt;
   &lt;div class="highlight highlight-source-shell"&gt;
    &lt;pre&gt;    IGNORECASE = 1&lt;/pre&gt;
   &lt;/div&gt;
   &lt;br/&gt;
   &lt;h3&gt;
    &lt;a aria-hidden="true" class="anchor" href="#dynamic-regex" id="user-content-dynamic-regex"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Dynamic regex
   &lt;/h3&gt;
   &lt;p&gt;
    Awk provides facility to define dynamic regular expressions
   &lt;/p&gt;
   &lt;div class="highlight highlight-source-shell"&gt;
    &lt;pre&gt;    BEGIN { digits_regexp = &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;[[:digit:]]+&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; }&lt;/pre&gt;
   &lt;/div&gt;
   &lt;br/&gt;
   &lt;p&gt;
    You shouldn't use string constants for regex because it needs to be processed twice and hard to read.
   &lt;/p&gt;
   &lt;h3&gt;
    &lt;a aria-hidden="true" class="anchor" href="#startup-and-cleanup-actions" id="user-content-startup-and-cleanup-actions"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Startup and cleanup actions
   &lt;/h3&gt;
   &lt;p&gt;
    In other words, do something even if there are no line to process
   &lt;/p&gt;
   &lt;div class="highlight highlight-source-shell"&gt;
    &lt;pre&gt;    awk &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;BEGIN {do something}&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;
   &lt;/div&gt;
   &lt;br/&gt;
   &lt;p&gt;
    &lt;code&gt;
     END
    &lt;/code&gt;
    specifies command to do at the end of loop.
   &lt;/p&gt;
   &lt;h3&gt;
    &lt;a aria-hidden="true" class="anchor" href="#change-field-seperator" id="user-content-change-field-seperator"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Change field seperator
   &lt;/h3&gt;
   &lt;p&gt;
    &lt;code&gt;
     awk -F:
    &lt;/code&gt;
    changes the field separator to colon.
   &lt;/p&gt;
   &lt;p&gt;
    Or it can be set in the BEGIN condition like this
   &lt;/p&gt;
   &lt;div class="highlight highlight-source-shell"&gt;
    &lt;pre&gt;    BEGIN {FS = &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;}&lt;/pre&gt;
   &lt;/div&gt;
   &lt;br/&gt;
   &lt;h3&gt;
    &lt;a aria-hidden="true" class="anchor" href="#quote-and-quoting" id="user-content-quote-and-quoting"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Quote and quoting
   &lt;/h3&gt;
   &lt;p&gt;
    Awk support many standard escape sequence that can be use inside strings or regular expression
   &lt;/p&gt;
   &lt;p&gt;
    There are various way to escape single quote and double quotes.
   &lt;/p&gt;
   &lt;p&gt;
    Once nice way is to use octal escape:
    &lt;code&gt;
     \42
    &lt;/code&gt;
    is double quote and
    &lt;code&gt;
     \47
    &lt;/code&gt;
    is single quote.
   &lt;/p&gt;
   &lt;p&gt;
    &lt;code&gt;
     \xhh
    &lt;/code&gt;
    produces hexadecimal escape sequence
   &lt;/p&gt;
   &lt;h3&gt;
    &lt;a aria-hidden="true" class="anchor" href="#special-variables" id="user-content-special-variables"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Special Variables
   &lt;/h3&gt;
   &lt;ul&gt;
    &lt;li&gt;
     &lt;code&gt;
      $0
     &lt;/code&gt;
     is the current line. $1 is the first field, $2 is the second field and so on
    &lt;/li&gt;
    &lt;li&gt;
     Note that $NR is the first field in the first record, second in the second one, and so on
    &lt;/li&gt;
    &lt;li&gt;
     $(2x2) is equivalent to $4
    &lt;/li&gt;
    &lt;li&gt;
     $5 = something when the line has fewer than 5 fields will create the 5th field and change both $0 and NF
    &lt;/li&gt;
    &lt;li&gt;
     you get the idea
    &lt;/li&gt;
    &lt;li&gt;
     To force awk to rebuild the record,
    &lt;/li&gt;
   &lt;/ul&gt;
   &lt;div class="highlight highlight-source-shell"&gt;
    &lt;pre&gt;    &lt;span class="pl-smi"&gt;$1&lt;/span&gt; = &lt;span class="pl-smi"&gt;$1&lt;/span&gt;&lt;span class="pl-k"&gt;;&lt;/span&gt; &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; force record to be rebuilt&lt;/span&gt;&lt;/pre&gt;
   &lt;/div&gt;
   &lt;br/&gt;
   &lt;ul&gt;
    &lt;li&gt;
     NF is the number of fields
    &lt;/li&gt;
    &lt;li&gt;
     $NF is the last field.
    &lt;/li&gt;
    &lt;li&gt;
     NR is the total of records read so far in all files.
    &lt;/li&gt;
    &lt;li&gt;
     FNR is the number of records read so far in the current input files. This should be used instead of NR.
    &lt;/li&gt;
    &lt;li&gt;
     RS is the record separator. It can be changed at BEGIN
    &lt;/li&gt;
    &lt;li&gt;
     ORS is the output record separator.
    &lt;/li&gt;
    &lt;li&gt;
     RT contains the actual text that match RS if RS is a regular expression. If RS is just a normal character, then RT and RS are the same.
    &lt;/li&gt;
    &lt;li&gt;
     FS is the field separator
     &lt;ul&gt;
      &lt;li&gt;
       FS can be specified at the beginning as well
      &lt;/li&gt;
     &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;
     OFS is output field separator
    &lt;/li&gt;
    &lt;li&gt;
     FIELDWIDTHS is a string that specifies field widths separated by spaces.
     &lt;ul&gt;
      &lt;li&gt;
       For instance
       &lt;code&gt;
        9 10 6 3 4 ...
       &lt;/code&gt;
      &lt;/li&gt;
      &lt;li&gt;
       If PROCINFO["FS"] "FS" then FS is being used, otherwise fixed width method is being used.
      &lt;/li&gt;
     &lt;/ul&gt;
    &lt;/li&gt;
   &lt;/ul&gt;
   &lt;h4&gt;
    &lt;a aria-hidden="true" class="anchor" href="#operators" id="user-content-operators"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Operators
   &lt;/h4&gt;
   &lt;ul&gt;
    &lt;li&gt;
     &lt;code&gt;
      ~
     &lt;/code&gt;
     (tilde) used to match a string with a regular expression
    &lt;/li&gt;
   &lt;/ul&gt;
   &lt;div class="highlight highlight-source-shell"&gt;
    &lt;pre&gt;    $ awk &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;$1 ~ /J/&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt; file
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; matches line where the first field start with J&lt;/span&gt;&lt;/pre&gt;
   &lt;/div&gt;
   &lt;br/&gt;
   &lt;ul&gt;
    &lt;li&gt;
     &lt;code&gt;
      !~
     &lt;/code&gt;
     not match regular expression
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      ==
     &lt;/code&gt;
     is the equal operator
    &lt;/li&gt;
   &lt;/ul&gt;
   &lt;h3&gt;
    &lt;a aria-hidden="true" class="anchor" href="#useful-functions" id="user-content-useful-functions"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Useful functions
   &lt;/h3&gt;
   &lt;ul&gt;
    &lt;li&gt;
     length() returns the string length.
    &lt;/li&gt;
    &lt;li&gt;
     substr(s, m, n) produces substring of s beginning at position m and with length n
    &lt;/li&gt;
    &lt;li&gt;
     tolower(s) , toupper(s) transform text s to all lower or upper cases
    &lt;/li&gt;
    &lt;li&gt;
     sub("something", "withsomething")
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      getline
     &lt;/code&gt;
     read the next line from input, returns 1 if it finds a record, 0 if end of file and -1 if there are any errors.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      getline tmp
     &lt;/code&gt;
     reads the next line from input to a variable named
     &lt;code&gt;
      tmp
     &lt;/code&gt;
     , the variable
     &lt;code&gt;
      $0
     &lt;/code&gt;
     is not affected by this getline. This function allows to skip one line ahead.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      getlines var &amp;lt; 'file'
     &lt;/code&gt;
     reads the next line from file to a variable named
     &lt;code&gt;
      var
     &lt;/code&gt;
    &lt;/li&gt;
   &lt;/ul&gt;
   &lt;div class="highlight highlight-source-shell"&gt;
    &lt;pre&gt;    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; The following code copies all input files to the output, except for records that say @include filename&lt;/span&gt;
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; in this case it will replace such records with the content of the file `filename`&lt;/span&gt;
    &lt;span class="pl-k"&gt;if&lt;/span&gt; (NF 2 &lt;span class="pl-k"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="pl-smi"&gt;$1&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;@include&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) {
        &lt;span class="pl-k"&gt;while&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;((&lt;/span&gt;getline line &lt;span class="pl-k"&gt;&amp;lt;&lt;/span&gt; &lt;span class="pl-smi"&gt;$2&lt;/span&gt;) &lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;0&lt;/span&gt;)&lt;/span&gt;
&lt;span class="pl-s"&gt;            print line&lt;/span&gt;
&lt;span class="pl-s"&gt;        close(&lt;span class="pl-smi"&gt;$2&lt;/span&gt;)&lt;/span&gt;
&lt;span class="pl-s"&gt;    } else&lt;/span&gt;
&lt;span class="pl-s"&gt;        print&lt;/span&gt;&lt;/pre&gt;
   &lt;/div&gt;
   &lt;br/&gt;
   &lt;ul&gt;
    &lt;li&gt;
     &lt;code&gt;
      command | getline
     &lt;/code&gt;
     . In this case the string
     &lt;code&gt;
      command
     &lt;/code&gt;
     is run as a shell command and its output is piped to getline
    &lt;/li&gt;
   &lt;/ul&gt;
   &lt;div class="highlight highlight-source-shell"&gt;
    &lt;pre&gt;    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; line begins with @execute is replaced by the output of the command after that&lt;/span&gt;
    {
        &lt;span class="pl-k"&gt;if&lt;/span&gt; (&lt;span class="pl-smi"&gt;$1&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;@execute&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;) {
            tmp = substr(&lt;span class="pl-smi"&gt;$0&lt;/span&gt;, 10)
            &lt;span class="pl-k"&gt;while&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;((&lt;/span&gt;tmp &lt;span class="pl-k"&gt;|&lt;/span&gt; getline) &lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;0&lt;/span&gt;)&lt;/span&gt;
&lt;span class="pl-s"&gt;                print&lt;/span&gt;
&lt;span class="pl-s"&gt;            close(tmp)&lt;/span&gt;
&lt;span class="pl-s"&gt;        } else&lt;/span&gt;
&lt;span class="pl-s"&gt;            print&lt;/span&gt;
&lt;span class="pl-s"&gt;    }&lt;/span&gt;&lt;/pre&gt;
   &lt;/div&gt;
   &lt;br/&gt;
   &lt;ul&gt;
    &lt;li&gt;
     &lt;code&gt;
      command | getline var
     &lt;/code&gt;
     , the output of
     &lt;code&gt;
      commands
     &lt;/code&gt;
     is sent through a pipe to getline and into variable
     &lt;code&gt;
      var
     &lt;/code&gt;
     .
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      print "some query" |&amp;amp; "db_server"
     &lt;/code&gt;
     sends a query to a process. (This maybe useful but we don't use it yet)
    &lt;/li&gt;
    &lt;li&gt;
     Mathematical functions such as: sqrt(), atan2(), rand().
     &lt;ul&gt;
      &lt;li&gt;
       DO NOT put a space between the function name and the parentheses. It can be confused with string concatenation
      &lt;/li&gt;
      &lt;li&gt;
       Operator precedence.
      &lt;/li&gt;
     &lt;/ul&gt;
    &lt;/li&gt;
   &lt;/ul&gt;
   &lt;h3&gt;
    &lt;a aria-hidden="true" class="anchor" href="#printing-and-output" id="user-content-printing-and-output"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Printing and output
   &lt;/h3&gt;
   &lt;ul&gt;
    &lt;li&gt;
     print something, something, ...
    &lt;/li&gt;
    &lt;li&gt;
     printf "format string", something, something .... Similar to C printf function
    &lt;/li&gt;
    &lt;li&gt;
     OMFT contains the default format specification when print converts a number to a string
    &lt;/li&gt;
    &lt;li&gt;
     OFS and ORS do not have any effects on printf
    &lt;/li&gt;
    &lt;li&gt;
     The print and printf function can be redirected just as in the shell
     &lt;ul&gt;
      &lt;li&gt;
       print items &amp;gt; file
      &lt;/li&gt;
      &lt;li&gt;
       print items &amp;gt;&amp;gt; file
      &lt;/li&gt;
      &lt;li&gt;
       print items | command
      &lt;/li&gt;
      &lt;li&gt;
       print items |&amp;amp; command: the output from command can be read with
       &lt;code&gt;
        getline
       &lt;/code&gt;
      &lt;/li&gt;
      &lt;li&gt;
       Some version of awk only allows one open pipe , so we can call print items &amp;gt; file multiple times to append more items to the file, unlike in the shell where we have to use &amp;gt;&amp;gt; the second time onwards.
      &lt;/li&gt;
     &lt;/ul&gt;
    &lt;/li&gt;
   &lt;/ul&gt;
   &lt;h3&gt;
    &lt;a aria-hidden="true" class="anchor" href="#standard-descriptors" id="user-content-standard-descriptors"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Standard descriptors
   &lt;/h3&gt;
   &lt;ul&gt;
    &lt;li&gt;
     Gawk supports special filenames for standard input, output and error streams
     &lt;ul&gt;
      &lt;li&gt;
       /dev/stdin
      &lt;/li&gt;
      &lt;li&gt;
       /dev/stdout
      &lt;/li&gt;
      &lt;li&gt;
       /dev/stderr
      &lt;/li&gt;
      &lt;li&gt;
       /dev/fd/N : file associated with descriptor N.
      &lt;/li&gt;
     &lt;/ul&gt;
    &lt;/li&gt;
   &lt;/ul&gt;
   &lt;div class="highlight highlight-source-shell"&gt;
    &lt;pre&gt;    print &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;serious error detected &lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;/dev/stderr&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;
   &lt;/div&gt;
   &lt;br/&gt;
   &lt;h3&gt;
    &lt;a aria-hidden="true" class="anchor" href="#special-files-for-process-related-information" id="user-content-special-files-for-process-related-information"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Special files for process-related information
   &lt;/h3&gt;
   &lt;ul&gt;
    &lt;li&gt;
     Gwak supports special file for accessing information about the running gawk process.
    &lt;/li&gt;
   &lt;/ul&gt;
   &lt;h3&gt;
    &lt;a aria-hidden="true" class="anchor" href="#special-files-for-network-communication" id="user-content-special-files-for-network-communication"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Special files for network communication
   &lt;/h3&gt;
   &lt;ul&gt;
    &lt;li&gt;
     Gawk, awk can open two-way TCP-IP connection.
    &lt;/li&gt;
   &lt;/ul&gt;
   &lt;h3&gt;
    &lt;a aria-hidden="true" class="anchor" href="#close-input-and-output-redirection" id="user-content-close-input-and-output-redirection"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Close input and output redirection
   &lt;/h3&gt;
   &lt;ul&gt;
    &lt;li&gt;
     &lt;code&gt;
      close(filename)
     &lt;/code&gt;
     or
     &lt;code&gt;
      close(command)
     &lt;/code&gt;
     close the input or output redirection pipe
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      filename
     &lt;/code&gt;
     or
     &lt;code&gt;
      command
     &lt;/code&gt;
     must
     &lt;code&gt;
      exactly match
     &lt;/code&gt;
    &lt;/li&gt;
   &lt;/ul&gt;
   &lt;h3&gt;
    &lt;a aria-hidden="true" class="anchor" href="#piping-to-sh" id="user-content-piping-to-sh"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Piping to sh
   &lt;/h3&gt;
   &lt;p&gt;
    A good way to build command line and execute them in the shell is to pipe them to
    &lt;code&gt;
     sh
    &lt;/code&gt;
   &lt;/p&gt;
   &lt;div class="highlight highlight-source-shell"&gt;
    &lt;pre&gt;    { printf(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;mv %s %s\n&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-smi"&gt;$0&lt;/span&gt;, tolower(&lt;span class="pl-smi"&gt;$0&lt;/span&gt;)) &lt;span class="pl-k"&gt;|&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;sh&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; }
    END {close(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;sh&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)}&lt;/pre&gt;
   &lt;/div&gt;
   &lt;br/&gt;
   &lt;h3&gt;
    &lt;a aria-hidden="true" class="anchor" href="#change-the-content-of-a-field" id="user-content-change-the-content-of-a-field"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Change the content of a field
   &lt;/h3&gt;
   &lt;ul&gt;
    &lt;li&gt;
     The content of a field can be change during processing , like this
    &lt;/li&gt;
   &lt;/ul&gt;
   &lt;div class="highlight highlight-source-shell"&gt;
    &lt;pre&gt;    awk &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;{$2=$2-10; print $0}&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; will subtract 10 from the second field, and the second field should be&lt;/span&gt;
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; a number for this to work.&lt;/span&gt;&lt;/pre&gt;
   &lt;/div&gt;
   &lt;br/&gt;
   &lt;h4&gt;
    &lt;a aria-hidden="true" class="anchor" href="#variables" id="user-content-variables"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Variables
   &lt;/h4&gt;
   &lt;ul&gt;
    &lt;li&gt;
     Custom variables can be created and default to zero
    &lt;/li&gt;
   &lt;/ul&gt;
   &lt;div class="highlight highlight-source-shell"&gt;
    &lt;pre&gt;    {
        str = &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;hello&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="pl-k"&gt;;&lt;/span&gt;
    }&lt;/pre&gt;
   &lt;/div&gt;
   &lt;br/&gt;
   &lt;ul&gt;
    &lt;li&gt;
     Variables can be assigned in the command line.
    &lt;/li&gt;
    &lt;li&gt;
     Strings and number conversions.
    &lt;/li&gt;
    &lt;li&gt;
     Arithmetic Operators.
    &lt;/li&gt;
    &lt;li&gt;
     String concatenation is done by placing the operands next to each other
     &lt;ul&gt;
      &lt;li&gt;
       &lt;code&gt;
        ()
       &lt;/code&gt;
       should be used around concatenation in all but the most common context
      &lt;/li&gt;
     &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;
     True and false in awk. Zero and null string is false, other values are true.
    &lt;/li&gt;
    &lt;li&gt;
     Boolean expressions:
     &lt;code&gt;
      !
     &lt;/code&gt;
     ,
     &lt;code&gt;
      &amp;amp;&amp;amp;
     &lt;/code&gt;
     and
     &lt;code&gt;
      ||
     &lt;/code&gt;
     . Tenary operator
     &lt;code&gt;
      condition?expression1:expression2
     &lt;/code&gt;
    &lt;/li&gt;
   &lt;/ul&gt;
   &lt;h3&gt;
    &lt;a aria-hidden="true" class="anchor" href="#patterns" id="user-content-patterns"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Patterns
   &lt;/h3&gt;
   &lt;ul&gt;
    &lt;li&gt;
     Patterns control the execution of rules, a rule is executed when its pattern matches the current input record (line).
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      Record range
     &lt;/code&gt;
     is specified in the form
     &lt;code&gt;
      beginpatter, endpattern
     &lt;/code&gt;
     . Every record between inclusive is processed.
     &lt;ul&gt;
      &lt;li&gt;
       The range pattern can be turned on and off by the same record.
      &lt;/li&gt;
      &lt;li&gt;
       Range pattern cannot be combined with other patterns.
      &lt;/li&gt;
     &lt;/ul&gt;
    &lt;/li&gt;
   &lt;/ul&gt;
   &lt;h3&gt;
    &lt;a aria-hidden="true" class="anchor" href="#control-statements" id="user-content-control-statements"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Control Statements
   &lt;/h3&gt;
   &lt;p&gt;
    if-else
   &lt;/p&gt;
   &lt;div class="highlight highlight-source-shell"&gt;
    &lt;pre&gt;    &lt;span class="pl-k"&gt;if&lt;/span&gt; (x % 2 0)
        print &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;x is even&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
    &lt;span class="pl-k"&gt;else&lt;/span&gt;
        print &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;x is odd&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;
   &lt;/div&gt;
   &lt;br/&gt;
   &lt;p&gt;
    while
   &lt;/p&gt;
   &lt;div class="highlight highlight-source-shell"&gt;
    &lt;pre&gt;    &lt;span class="pl-k"&gt;while&lt;/span&gt; (i &lt;span class="pl-k"&gt;&amp;lt;&lt;/span&gt;= 3) {
        print &lt;span class="pl-smi"&gt;$i&lt;/span&gt;
        i++
    }&lt;/pre&gt;
   &lt;/div&gt;
   &lt;br/&gt;
   &lt;p&gt;
    do while
   &lt;/p&gt;
   &lt;div class="highlight highlight-source-shell"&gt;
    &lt;pre&gt;    &lt;span class="pl-k"&gt;do&lt;/span&gt; {
        print &lt;span class="pl-smi"&gt;$0&lt;/span&gt;
        i++
    } &lt;span class="pl-k"&gt;while&lt;/span&gt; (i &lt;span class="pl-k"&gt;&amp;lt;&lt;/span&gt;= 10)&lt;/pre&gt;
   &lt;/div&gt;
   &lt;br/&gt;
   &lt;p&gt;
    for
   &lt;/p&gt;
   &lt;div class="highlight highlight-source-shell"&gt;
    &lt;pre&gt;    &lt;span class="pl-k"&gt;for&lt;/span&gt; (i = 1&lt;span class="pl-k"&gt;;&lt;/span&gt; i &lt;span class="pl-k"&gt;&amp;lt;&lt;/span&gt;= 3&lt;span class="pl-k"&gt;;&lt;/span&gt; i++)
        print &lt;span class="pl-smi"&gt;$i&lt;/span&gt;&lt;/pre&gt;
   &lt;/div&gt;
   &lt;br/&gt;
   &lt;p&gt;
    switch: break
   &lt;/p&gt;
   &lt;div class="highlight highlight-source-shell"&gt;
    &lt;pre&gt;    switch (NR &lt;span class="pl-k"&gt;*&lt;/span&gt; 2 + 1) {
    &lt;span class="pl-k"&gt;case&lt;/span&gt; 3:
        &lt;span class="pl-c1"&gt;break&lt;/span&gt;
    &lt;span class="pl-k"&gt;case&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;11&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;:
        print NR - 1
        &lt;span class="pl-c1"&gt;break&lt;/span&gt;
    &lt;span class="pl-k"&gt;case&lt;/span&gt; /2[[:digit:]]+/:
        print NR
        &lt;span class="pl-c1"&gt;break&lt;/span&gt;
    default:
        print NR + 1
        &lt;span class="pl-c1"&gt;break&lt;/span&gt;
    &lt;span class="pl-k"&gt;case&lt;/span&gt; -1:
        print NR &lt;span class="pl-k"&gt;*&lt;/span&gt; -1
        &lt;span class="pl-c1"&gt;break&lt;/span&gt;
    }&lt;/pre&gt;
   &lt;/div&gt;
   &lt;br/&gt;
   &lt;p&gt;
    switch: continue
   &lt;/p&gt;
   &lt;div class="highlight highlight-source-shell"&gt;
    &lt;pre&gt;    BEGIN {
        &lt;span class="pl-k"&gt;for&lt;/span&gt; (x = 0&lt;span class="pl-k"&gt;;&lt;/span&gt; x &lt;span class="pl-k"&gt;&amp;lt;&lt;/span&gt;= 20&lt;span class="pl-k"&gt;;&lt;/span&gt; x++) {
            &lt;span class="pl-k"&gt;if&lt;/span&gt; (x 5)
                &lt;span class="pl-k"&gt;continue&lt;/span&gt;
            &lt;span class="pl-c1"&gt;printf&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;%d &lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;, x
        }
        print &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;
    }&lt;/pre&gt;
   &lt;/div&gt;
   &lt;br/&gt;
   &lt;ul&gt;
    &lt;li&gt;
     next: stop processing the current record and go on to the next record
    &lt;/li&gt;
    &lt;li&gt;
     nextfile : stop processing the current file and go on to the next file
    &lt;/li&gt;
    &lt;li&gt;
     exit n: stops execution for the current rule and execute the END rule if any.
    &lt;/li&gt;
   &lt;/ul&gt;
   &lt;div class="highlight highlight-source-shell"&gt;
    &lt;pre&gt;    BEGIN {
    &lt;span class="pl-k"&gt;if&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;((&lt;/span&gt;"date" &lt;span class="pl-k"&gt;|&lt;/span&gt; getline date_now) &lt;span class="pl-k"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;0&lt;/span&gt;) {&lt;/span&gt;
&lt;span class="pl-s"&gt;    print "Can’t get system date" &amp;gt; "/dev/stderr"&lt;/span&gt;
&lt;span class="pl-s"&gt;    exit &lt;span class="pl-c1"&gt;1&lt;/span&gt;&lt;/span&gt;
&lt;span class="pl-s"&gt;    }&lt;/span&gt;
&lt;span class="pl-s"&gt;    print "current date is", date_now&lt;/span&gt;
&lt;span class="pl-s"&gt;    close("date")&lt;/span&gt;
&lt;span class="pl-s"&gt;    }&lt;/span&gt;&lt;/pre&gt;
   &lt;/div&gt;
   &lt;br/&gt;
   &lt;h3&gt;
    &lt;a aria-hidden="true" class="anchor" href="#functions" id="user-content-functions"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Functions
   &lt;/h3&gt;
   &lt;ul&gt;
    &lt;li&gt;
     Controlling output buffering with
     &lt;code&gt;
      system
     &lt;/code&gt;
     &lt;ul&gt;
      &lt;li&gt;
       Use
       &lt;code&gt;
        system("")
       &lt;/code&gt;
       to fflush output buffering instead of
       &lt;code&gt;
        fflush
       &lt;/code&gt;
      &lt;/li&gt;
     &lt;/ul&gt;
    &lt;/li&gt;
   &lt;/ul&gt;
   &lt;h1&gt;
    &lt;a aria-hidden="true" class="anchor" href="#howtos" id="user-content-howtos"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    HOWTOS
   &lt;/h1&gt;
   &lt;h2&gt;
    &lt;a aria-hidden="true" class="anchor" href="#how-to-remove-special-characters-from-files" id="user-content-how-to-remove-special-characters-from-files"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    How to remove special characters from files
   &lt;/h2&gt;
   &lt;ul&gt;
    &lt;li&gt;
     Suppose you have a list of files starting with a certain number of special character that you want to remove
    &lt;/li&gt;
    &lt;li&gt;
     The idea is to generate the new file name for each of the files then use the
     &lt;code&gt;
      mv
     &lt;/code&gt;
     or
     &lt;code&gt;
      rename
     &lt;/code&gt;
     command to change the orginal file name
    &lt;/li&gt;
    &lt;li&gt;
     First, export the list of filenames to a first file test1
    &lt;/li&gt;
   &lt;/ul&gt;
   &lt;div class="highlight highlight-source-shell"&gt;
    &lt;pre&gt;    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Suppose that the original files are in folder original_files and we want to copy them to&lt;/span&gt;
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; folder new_files&lt;/span&gt;
    ls original_files &lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; list1 &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; generate list of files&lt;/span&gt;
    awk &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;{gsub(/[^a-zA-Z0-9 .]/, "", $0); print;}&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt; list1 &lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; list2 &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; removes all special characters and generate a second list&lt;/span&gt;

    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; combine list1 and list2 to a list of shell command in list3&lt;/span&gt;
    &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; We will use strong quoting&lt;/span&gt;
    awk &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;{gsub(/\47/, "\47\\\47\47", $0); str = $0; getline &amp;lt; "list2"; print "cp -f \47original_files/"str "\47 \47new_files/"$0"\47" &amp;gt; "list3";}&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt; list1

    sh list3 &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; run the list of commands in list3&lt;/span&gt;
    rm -frv list1 list2 list3 &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; remove all temporary files&lt;/span&gt;&lt;/pre&gt;
   &lt;/div&gt;
   &lt;br/&gt;
   &lt;h2&gt;
    &lt;a aria-hidden="true" class="anchor" href="#make-each-character-a-separate-field" id="user-content-make-each-character-a-separate-field"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Make each character a separate field
   &lt;/h2&gt;
   &lt;ul&gt;
    &lt;li&gt;
     By changing the field separtor to null string
    &lt;/li&gt;
   &lt;/ul&gt;
   &lt;div class="highlight highlight-source-shell"&gt;
    &lt;pre&gt;    BEGIN {FS=&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;}&lt;/pre&gt;
   &lt;/div&gt;
   &lt;br/&gt;
   &lt;h1&gt;
    &lt;a aria-hidden="true" class="anchor" href="#books" id="user-content-books"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    BOOKS
   &lt;/h1&gt;
   &lt;ul&gt;
    &lt;li&gt;
     &lt;a href="http://www.gnu.org/software/gawk/manual/gawk.pdf" rel="nofollow"&gt;
      Gwak Effective awk programming
     &lt;/a&gt;
     - Free book, great for understanding details about awk and gawk programming.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;a href="http://gregable.com/2010/09/why-you-should-know-just-little-awk.html" rel="nofollow"&gt;
      Why you should learn just a little Awk - An Awk Tutorial by Example
     &lt;/a&gt;
    &lt;/li&gt;
   &lt;/ul&gt;
   &lt;h1&gt;
    &lt;a aria-hidden="true" class="anchor" href="#articles" id="user-content-articles"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    ARTICLES
   &lt;/h1&gt;
   &lt;ul&gt;
    &lt;li&gt;
     &lt;a href="http://www.differencebetween.net/technology/software-technology/difference-between-gawk-and-awk/" rel="nofollow"&gt;
      Differences between different versions of awk
     &lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
     &lt;a href="http://www.thegeekstuff.com/2011/06/awk-nawk-gawk/" rel="nofollow"&gt;
      http://www.thegeekstuff.com/2011/06/awk-nawk-gawk/
     &lt;/a&gt;
     .
    &lt;/li&gt;
   &lt;/ul&gt;
  &lt;/article&gt;
 &lt;/div&gt;
&lt;/div&gt;

            &lt;div class="git-meta"&gt;
                
                &lt;span&gt;Brought to you by me &lt;a href="https://github.com/minhhh/pelican_git"&gt;pelican_git&lt;/a&gt;.&lt;/span&gt;
                
                &lt;span style="float: right; color: #369;"&gt;&lt;a href="https://github.com/minhhh/wiki/blob/master/awk.md"&gt;view original&lt;/a&gt;&lt;/span&gt;
                &lt;span style="float: right; margin-right: 8px;"&gt;
                    &lt;a style="color: rgb(102, 102, 102);" href="https://github.com/minhhh/wiki/blob/master/awk.md"&gt;awk.md&lt;/a&gt;&lt;/span&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;&lt;/p&gt;</summary><category term="awk"></category><category term="cli"></category></entry><entry><title>Python decorator tutorial</title><link href="http://minhhh.github.io/posts/python-decorator-tutorial" rel="alternate"></link><published>2014-10-05T00:00:00-04:00</published><updated>2014-10-05T00:00:00-04:00</updated><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2014-10-05:posts/python-decorator-tutorial</id><summary type="html">&lt;p&gt;&lt;div&gt;
    &lt;style type = "text/css" scoped&gt;
.git-content div {
    padding: 0;
    margin: 0;
}

.git-content .git-file {
    border: 1px solid #DEDEDE;
    margin-bottom: 1em;
}

.git-content .git-file .git-meta {
    background-color: #EAEAEA;
    color: #666666;
    font-size: 85%;
    overflow: hidden;
    padding: 0.5em;
}

.git-content .git-file .git-meta a {
    color: #336699;
}

.git-content .git-file .git-meta a:visited {
    color: #773377;
}

.git-content .git-file {
    background-color: #F8F8FF;
    border-bottom: 1px solid #DDDDDD;
    font-size: 100%;
    overflow: auto;
    word-wrap: normal;
}

.git-content .git-file pre {
    background: none repeat scroll 0 0 transparent !important;
    border: medium none !important;
    margin: 0 !important;
    padding: 0 !important;
}
    &lt;/style&gt;
    &lt;div class="git-content"&gt;
        &lt;div class="git-file"&gt;
            &lt;div class="file"&gt;
 &lt;div class="readme blob instapaper_body js-code-block-container" id="readme"&gt;
  &lt;article class="markdown-body entry-content" itemprop="text"&gt;
   &lt;h1&gt;
    &lt;a aria-hidden="true" class="anchor" href="#python-decorator-tutorial" id="user-content-python-decorator-tutorial"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    PYTHON DECORATOR TUTORIAL
   &lt;/h1&gt;
   &lt;p&gt;
    Decorators are a powerful tool for getting rid of code duplication, aka following DRY principle. It also helps with standardization of code in a project without forcing developers to remember predefined snippets or patters. In this tutorial, we'll discover how to create and use them.
   &lt;/p&gt;
   &lt;p&gt;
    Another important point to note is I'm aiming for practical value of the decorators so there will be no
    &lt;code&gt;
     foo
    &lt;/code&gt;
    ,
    &lt;code&gt;
     bar
    &lt;/code&gt;
    examples, all examples must solve real world problem and/or taken from good source.
   &lt;/p&gt;
   &lt;h2&gt;
    &lt;a aria-hidden="true" class="anchor" href="#first-level" id="user-content-first-level"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    First level
   &lt;/h2&gt;
   &lt;p&gt;
    We all know memoization and probably implement it as a function that takes an arbitrary function and return a memoized function:
   &lt;/p&gt;
   &lt;div class="highlight highlight-source-python"&gt;
    &lt;pre&gt;    memoized_factorial &lt;span class="pl-k"&gt;=&lt;/span&gt; construct_memoize(factorial)&lt;/pre&gt;
   &lt;/div&gt;
   &lt;br/&gt;
   &lt;p&gt;
    This is extremely cumbersome if
    &lt;code&gt;
     factorial
    &lt;/code&gt;
    is a method of some class because then we have to use temporary variable to store the memoized function and somehow reassign it to the method. We want some way to elegantly do all the manual things to make a memoized version of a function, this is where
    &lt;code&gt;
     decorator
    &lt;/code&gt;
    comes in.
   &lt;/p&gt;
   &lt;p&gt;
    In its simplest form, a decorator is a function that takes the original function and returns a
    &lt;code&gt;
     decorated function
    &lt;/code&gt;
   &lt;/p&gt;
   &lt;div class="highlight highlight-source-python"&gt;
    &lt;pre&gt;    cache_obj &lt;span class="pl-k"&gt;=&lt;/span&gt; {}

    &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;cache&lt;/span&gt;(&lt;span class="pl-smi"&gt;func&lt;/span&gt;):
        &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;inner&lt;/span&gt;(&lt;span class="pl-k"&gt;*&lt;/span&gt;&lt;span class="pl-smi"&gt;args&lt;/span&gt;, &lt;span class="pl-k"&gt;**&lt;/span&gt;&lt;span class="pl-smi"&gt;kwargs&lt;/span&gt;):
            &lt;span class="pl-k"&gt;global&lt;/span&gt; cache_obj
            key &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;str&lt;/span&gt;(args) &lt;span class="pl-k"&gt;+&lt;/span&gt; &lt;span class="pl-c1"&gt;str&lt;/span&gt;(kwargs)
            &lt;span class="pl-k"&gt;if&lt;/span&gt; key &lt;span class="pl-k"&gt;not&lt;/span&gt; &lt;span class="pl-k"&gt;in&lt;/span&gt; cache_obj:
                cache_obj[key] &lt;span class="pl-k"&gt;=&lt;/span&gt; func(&lt;span class="pl-k"&gt;*&lt;/span&gt;args, &lt;span class="pl-k"&gt;**&lt;/span&gt;kwargs)
            &lt;span class="pl-k"&gt;else&lt;/span&gt;:
                &lt;span class="pl-c1"&gt;print&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Get from cache &lt;span class="pl-c1"&gt;{}&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;.format(key)
            &lt;span class="pl-k"&gt;return&lt;/span&gt; cache_obj[key]
        &lt;span class="pl-k"&gt;return&lt;/span&gt; inner

    &lt;span class="pl-en"&gt;@cache&lt;/span&gt;
    &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-c1"&gt;sum&lt;/span&gt;(&lt;span class="pl-smi"&gt;a&lt;/span&gt;, &lt;span class="pl-smi"&gt;b&lt;/span&gt;):
        &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"""&lt;/span&gt;Sum 2 numbers&lt;/span&gt;
&lt;span class="pl-s"&gt;        &lt;span class="pl-pds"&gt;"""&lt;/span&gt;&lt;/span&gt;
        &lt;span class="pl-k"&gt;return&lt;/span&gt; a &lt;span class="pl-k"&gt;+&lt;/span&gt; b&lt;/pre&gt;
   &lt;/div&gt;
   &lt;br/&gt;
   &lt;p&gt;
    The
    &lt;code&gt;
     @
    &lt;/code&gt;
    is a special syntax that applies the decorator function to the underneath function or class. Here,
    &lt;code&gt;
     cache(func)
    &lt;/code&gt;
    is called, passing original
    &lt;code&gt;
     func
    &lt;/code&gt;
    to the decorator, then replace
    &lt;code&gt;
     func
    &lt;/code&gt;
    with whatever function is returned from
    &lt;code&gt;
     cache(func)
    &lt;/code&gt;
    .
   &lt;/p&gt;
   &lt;p&gt;
    Using global cache object
    &lt;code&gt;
     cache_obj
    &lt;/code&gt;
    is not a great idea, because different functions can have the same arguments, then your cache is overwritten. It's better to assign the cache object directly to the original function
   &lt;/p&gt;
   &lt;div class="highlight highlight-source-python"&gt;
    &lt;pre&gt;    &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;memoize_2&lt;/span&gt;(&lt;span class="pl-smi"&gt;func&lt;/span&gt;):
        &lt;span class="pl-k"&gt;if&lt;/span&gt; &lt;span class="pl-k"&gt;not&lt;/span&gt; &lt;span class="pl-c1"&gt;hasattr&lt;/span&gt;(func, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;cache&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;):
            func.cache &lt;span class="pl-k"&gt;=&lt;/span&gt; {}
        &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;inner&lt;/span&gt;(&lt;span class="pl-k"&gt;*&lt;/span&gt;&lt;span class="pl-smi"&gt;args&lt;/span&gt;, &lt;span class="pl-k"&gt;**&lt;/span&gt;&lt;span class="pl-smi"&gt;kwargs&lt;/span&gt;):
            key &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;str&lt;/span&gt;(args) &lt;span class="pl-k"&gt;+&lt;/span&gt; &lt;span class="pl-c1"&gt;str&lt;/span&gt;(kwargs)
            &lt;span class="pl-k"&gt;if&lt;/span&gt; key &lt;span class="pl-k"&gt;not&lt;/span&gt; &lt;span class="pl-k"&gt;in&lt;/span&gt; func.cache:
                func.cache[key] &lt;span class="pl-k"&gt;=&lt;/span&gt; func(&lt;span class="pl-k"&gt;*&lt;/span&gt;args, &lt;span class="pl-k"&gt;**&lt;/span&gt;kwargs)
            &lt;span class="pl-k"&gt;else&lt;/span&gt;:
                &lt;span class="pl-c1"&gt;print&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Get from cache &lt;span class="pl-c1"&gt;{}&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;.format(key)
            &lt;span class="pl-k"&gt;return&lt;/span&gt; func.cache[key]
        &lt;span class="pl-k"&gt;return&lt;/span&gt; inner

    &lt;span class="pl-en"&gt;@memoize_2&lt;/span&gt;
    &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;multiply&lt;/span&gt;(&lt;span class="pl-smi"&gt;a&lt;/span&gt;, &lt;span class="pl-smi"&gt;b&lt;/span&gt;):
        &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"""&lt;/span&gt;Multiply 2 numbers&lt;/span&gt;
&lt;span class="pl-s"&gt;        &lt;span class="pl-pds"&gt;"""&lt;/span&gt;&lt;/span&gt;
        &lt;span class="pl-k"&gt;return&lt;/span&gt; a &lt;span class="pl-k"&gt;*&lt;/span&gt; b

    multiply(&lt;span class="pl-c1"&gt;1&lt;/span&gt;,&lt;span class="pl-c1"&gt;2&lt;/span&gt;)
    multiply(&lt;span class="pl-c1"&gt;1&lt;/span&gt;,&lt;span class="pl-c1"&gt;2&lt;/span&gt;)&lt;/pre&gt;
   &lt;/div&gt;
   &lt;br/&gt;
   &lt;p&gt;
    This decorator is nice, but in practice nobody does this, and it's too bad that a lot of tutorials keep giving these non-working examples. The reason is the new decorated function lose all its original information such as name, docstring, module name and so on.
   &lt;/p&gt;
   &lt;div class="highlight highlight-source-python"&gt;
    &lt;pre&gt;    &lt;span class="pl-c1"&gt;print&lt;/span&gt; multiply.&lt;span class="pl-c1"&gt;__doc__&lt;/span&gt; &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; None&lt;/span&gt;&lt;/pre&gt;
   &lt;/div&gt;
   &lt;br/&gt;
   &lt;p&gt;
    To keep these information, we use
    &lt;code&gt;
     functools.wrapper
    &lt;/code&gt;
   &lt;/p&gt;
   &lt;div class="highlight highlight-source-python"&gt;
    &lt;pre&gt;    &lt;span class="pl-k"&gt;import&lt;/span&gt; functools
    &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;memoize&lt;/span&gt;(&lt;span class="pl-smi"&gt;func&lt;/span&gt;):
        &lt;span class="pl-en"&gt;@functools.wraps&lt;/span&gt;(func)
        &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;inner&lt;/span&gt;(&lt;span class="pl-k"&gt;*&lt;/span&gt;&lt;span class="pl-smi"&gt;args&lt;/span&gt;, &lt;span class="pl-k"&gt;**&lt;/span&gt;&lt;span class="pl-smi"&gt;kwargs&lt;/span&gt;):
            key &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;str&lt;/span&gt;(args) &lt;span class="pl-k"&gt;+&lt;/span&gt; &lt;span class="pl-c1"&gt;str&lt;/span&gt;(kwargs)
            &lt;span class="pl-k"&gt;if&lt;/span&gt; &lt;span class="pl-k"&gt;not&lt;/span&gt; &lt;span class="pl-c1"&gt;hasattr&lt;/span&gt;(func, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;cache&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;):
                func.cache &lt;span class="pl-k"&gt;=&lt;/span&gt; {}
            &lt;span class="pl-k"&gt;if&lt;/span&gt; key &lt;span class="pl-k"&gt;not&lt;/span&gt; &lt;span class="pl-k"&gt;in&lt;/span&gt; func.cache:
                func.cache[key] &lt;span class="pl-k"&gt;=&lt;/span&gt; func(&lt;span class="pl-k"&gt;*&lt;/span&gt;args, &lt;span class="pl-k"&gt;**&lt;/span&gt;kwargs)
            &lt;span class="pl-k"&gt;else&lt;/span&gt;:
                &lt;span class="pl-c1"&gt;print&lt;/span&gt; &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Get from cache &lt;span class="pl-c1"&gt;{}&lt;/span&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;.format(key)
            &lt;span class="pl-k"&gt;return&lt;/span&gt; func.cache[key]
        &lt;span class="pl-k"&gt;return&lt;/span&gt; inner

    &lt;span class="pl-c1"&gt;print&lt;/span&gt; multiply.&lt;span class="pl-c1"&gt;__doc__&lt;/span&gt; &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Multiply 2 numbers&lt;/span&gt;&lt;/pre&gt;
   &lt;/div&gt;
   &lt;br/&gt;
   &lt;p&gt;
    Now the decorated function also retain important information from the original functions, that's neat!
   &lt;/p&gt;
   &lt;h2&gt;
    &lt;a aria-hidden="true" class="anchor" href="#higher-level" id="user-content-higher-level"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Higher level
   &lt;/h2&gt;
   &lt;p&gt;
    The
    &lt;code&gt;
     memoize
    &lt;/code&gt;
    decorator doesn't need any customization, but there are a lot of pattern that requires some kind of customization. For instance, we want to apply a retry pattern to a function that follows special protocol. Obviously, we have to specify the number of retries, the delay between retry, and maybe a backoff factor to scale up the delay between failed attempts. This is how we do it:
   &lt;/p&gt;
   &lt;div class="highlight highlight-source-python"&gt;
    &lt;pre&gt;    &lt;span class="pl-k"&gt;import&lt;/span&gt; time, math

    &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;retry&lt;/span&gt;(&lt;span class="pl-smi"&gt;tries&lt;/span&gt;, &lt;span class="pl-smi"&gt;delay&lt;/span&gt;&lt;span class="pl-k"&gt;=&lt;/span&gt;&lt;span class="pl-c1"&gt;3&lt;/span&gt;, &lt;span class="pl-smi"&gt;backoff&lt;/span&gt;&lt;span class="pl-k"&gt;=&lt;/span&gt;&lt;span class="pl-c1"&gt;2&lt;/span&gt;):
        &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'''&lt;/span&gt;Retries a function or method until it returns True.&lt;/span&gt;
&lt;span class="pl-s"&gt;        delay sets the initial delay in seconds, and backoff sets the factor by which&lt;/span&gt;
&lt;span class="pl-s"&gt;        the delay should lengthen after each failure. backoff must be greater than 1,&lt;/span&gt;
&lt;span class="pl-s"&gt;        or else it isn't really a backoff. tries must be at least 0, and delay&lt;/span&gt;
&lt;span class="pl-s"&gt;        greater than 0.&lt;span class="pl-pds"&gt;'''&lt;/span&gt;&lt;/span&gt;

        &lt;span class="pl-k"&gt;if&lt;/span&gt; backoff &lt;span class="pl-k"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;:
            &lt;span class="pl-k"&gt;raise&lt;/span&gt; &lt;span class="pl-c1"&gt;ValueError&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;backoff must be greater than 1&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)

        &lt;span class="pl-k"&gt;if&lt;/span&gt; tries &lt;span class="pl-k"&gt;&amp;lt;&lt;/span&gt; &lt;span class="pl-c1"&gt;0&lt;/span&gt;:
            &lt;span class="pl-k"&gt;raise&lt;/span&gt; &lt;span class="pl-c1"&gt;ValueError&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;tries must be 0 or greater&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)

        &lt;span class="pl-k"&gt;if&lt;/span&gt; delay &lt;span class="pl-k"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;0&lt;/span&gt;:
            &lt;span class="pl-k"&gt;raise&lt;/span&gt; &lt;span class="pl-c1"&gt;ValueError&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;delay must be greater than 0&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)

        &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;deco_retry&lt;/span&gt;(&lt;span class="pl-smi"&gt;f&lt;/span&gt;):
            &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;f_retry&lt;/span&gt;(&lt;span class="pl-k"&gt;*&lt;/span&gt;&lt;span class="pl-smi"&gt;args&lt;/span&gt;, &lt;span class="pl-k"&gt;**&lt;/span&gt;&lt;span class="pl-smi"&gt;kwargs&lt;/span&gt;):
                mtries, mdelay &lt;span class="pl-k"&gt;=&lt;/span&gt; tries, delay

                rv &lt;span class="pl-k"&gt;=&lt;/span&gt; f(&lt;span class="pl-k"&gt;*&lt;/span&gt;args, &lt;span class="pl-k"&gt;**&lt;/span&gt;kwargs)
                &lt;span class="pl-k"&gt;while&lt;/span&gt; mtries &lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; &lt;span class="pl-c1"&gt;0&lt;/span&gt;:
                    &lt;span class="pl-k"&gt;if&lt;/span&gt; rv &lt;span class="pl-k"&gt;is&lt;/span&gt; &lt;span class="pl-c1"&gt;True&lt;/span&gt;:
                        &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-c1"&gt;True&lt;/span&gt;

                    mtries &lt;span class="pl-k"&gt;-=&lt;/span&gt; &lt;span class="pl-c1"&gt;1&lt;/span&gt;
                    time.sleep(mdelay)
                    mdelay &lt;span class="pl-k"&gt;*=&lt;/span&gt; backoff

                    rv &lt;span class="pl-k"&gt;=&lt;/span&gt; f(&lt;span class="pl-k"&gt;*&lt;/span&gt;args, &lt;span class="pl-k"&gt;**&lt;/span&gt;kwargs)

                &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-c1"&gt;False&lt;/span&gt;
            &lt;span class="pl-k"&gt;return&lt;/span&gt; f_retry
        &lt;span class="pl-k"&gt;return&lt;/span&gt; deco_retry

    &lt;span class="pl-en"&gt;@retry&lt;/span&gt;(&lt;span class="pl-c1"&gt;1&lt;/span&gt;, &lt;span class="pl-v"&gt;delay&lt;/span&gt;&lt;span class="pl-k"&gt;=&lt;/span&gt;&lt;span class="pl-c1"&gt;1&lt;/span&gt;, &lt;span class="pl-v"&gt;backoff&lt;/span&gt;&lt;span class="pl-k"&gt;=&lt;/span&gt;&lt;span class="pl-c1"&gt;2&lt;/span&gt;)
    &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;get_data&lt;/span&gt;():
        &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-c1"&gt;False&lt;/span&gt;&lt;/pre&gt;
   &lt;/div&gt;
   &lt;br/&gt;
   &lt;p&gt;
    Here, we define
    &lt;code&gt;
     retry
    &lt;/code&gt;
    as a function that returns a
    &lt;code&gt;
     decorator
    &lt;/code&gt;
    which will do the actual decoration of our original function with the parameters provided by
    &lt;code&gt;
     retry
    &lt;/code&gt;
    . We consider that
    &lt;code&gt;
     retry(1, delay=1, backoff=2)
    &lt;/code&gt;
    is called first, returning a function, then the decorator syntax
    &lt;code&gt;
     @
    &lt;/code&gt;
    is applied. This is just an addition of another layer on the decoration stack. In theory, you can have unlimited number of nested layer, but in practice, most of the time you only use 2.
   &lt;/p&gt;
   &lt;h2&gt;
    &lt;a aria-hidden="true" class="anchor" href="#decorator-class" id="user-content-decorator-class"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Decorator class
   &lt;/h2&gt;
   &lt;p&gt;
    Using function as decorators is straight forward, and for storing persistent information we use closures over temporary variables. It'd be nice if the persistent information are class members.
   &lt;/p&gt;
   &lt;div class="highlight highlight-source-python"&gt;
    &lt;pre&gt;    &lt;span class="pl-k"&gt;import&lt;/span&gt; collections
    &lt;span class="pl-k"&gt;class&lt;/span&gt; &lt;span class="pl-en"&gt;memoized&lt;/span&gt;(&lt;span class="pl-c1"&gt;object&lt;/span&gt;):
        &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'''&lt;/span&gt;Decorator. Caches a function's return value each time it is called.&lt;/span&gt;
&lt;span class="pl-s"&gt;        If called later with the same arguments, the cached value is returned&lt;/span&gt;
&lt;span class="pl-s"&gt;        (not reevaluated).&lt;/span&gt;
&lt;span class="pl-s"&gt;        &lt;span class="pl-pds"&gt;'''&lt;/span&gt;&lt;/span&gt;
        &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-c1"&gt;__init__&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-smi"&gt;self&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-smi"&gt;func&lt;/span&gt;):
            &lt;span class="pl-c1"&gt;self&lt;/span&gt;.func &lt;span class="pl-k"&gt;=&lt;/span&gt; func
            &lt;span class="pl-c1"&gt;self&lt;/span&gt;.&lt;span class="pl-c1"&gt;__doc__&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; func.&lt;span class="pl-c1"&gt;__doc__&lt;/span&gt;
            &lt;span class="pl-c1"&gt;self&lt;/span&gt;.cache &lt;span class="pl-k"&gt;=&lt;/span&gt; {}
        &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-c1"&gt;__call__&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-smi"&gt;self&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-k"&gt;*&lt;/span&gt;&lt;span class="pl-smi"&gt;args&lt;/span&gt;, &lt;span class="pl-k"&gt;**&lt;/span&gt;&lt;span class="pl-smi"&gt;kwargs&lt;/span&gt;):
            &lt;span class="pl-k"&gt;if&lt;/span&gt; &lt;span class="pl-k"&gt;not&lt;/span&gt; &lt;span class="pl-c1"&gt;isinstance&lt;/span&gt;(args, collections.Hashable):
                &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; uncacheable. a list, for instance.&lt;/span&gt;
                &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; better to not cache than blow up.&lt;/span&gt;
                &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-c1"&gt;self&lt;/span&gt;.func(&lt;span class="pl-k"&gt;*&lt;/span&gt;args, &lt;span class="pl-k"&gt;**&lt;/span&gt;kwargs)
            &lt;span class="pl-k"&gt;if&lt;/span&gt; args &lt;span class="pl-k"&gt;in&lt;/span&gt; &lt;span class="pl-c1"&gt;self&lt;/span&gt;.cache:
                &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-c1"&gt;self&lt;/span&gt;.cache[args]
            &lt;span class="pl-k"&gt;else&lt;/span&gt;:
                value &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;self&lt;/span&gt;.func(&lt;span class="pl-k"&gt;*&lt;/span&gt;args, &lt;span class="pl-k"&gt;**&lt;/span&gt;kwargs)
                &lt;span class="pl-c1"&gt;self&lt;/span&gt;.cache[args] &lt;span class="pl-k"&gt;=&lt;/span&gt; value
                &lt;span class="pl-k"&gt;return&lt;/span&gt; value
        &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-c1"&gt;__repr__&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-smi"&gt;self&lt;/span&gt;&lt;/span&gt;):
            &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'''&lt;/span&gt;Return the function's docstring.&lt;span class="pl-pds"&gt;'''&lt;/span&gt;&lt;/span&gt;
            &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-c1"&gt;self&lt;/span&gt;.func.&lt;span class="pl-c1"&gt;__doc__&lt;/span&gt;
        &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-c1"&gt;__get__&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-smi"&gt;self&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-smi"&gt;obj&lt;/span&gt;, &lt;span class="pl-smi"&gt;objtype&lt;/span&gt;):
            &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'''&lt;/span&gt;Support instance methods.&lt;span class="pl-pds"&gt;'''&lt;/span&gt;&lt;/span&gt;
            &lt;span class="pl-k"&gt;return&lt;/span&gt; functools.partial(&lt;span class="pl-c1"&gt;self&lt;/span&gt;.&lt;span class="pl-c1"&gt;__call__&lt;/span&gt;, obj)&lt;/pre&gt;
   &lt;/div&gt;
   &lt;br/&gt;
   &lt;p&gt;
    Here, the decorator is an object of class
    &lt;code&gt;
     memoized
    &lt;/code&gt;
    and you can store all sort of information like you would a normal object.
   &lt;/p&gt;
   &lt;h2&gt;
    &lt;a aria-hidden="true" class="anchor" href="#class-decorator" id="user-content-class-decorator"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Class decorator
   &lt;/h2&gt;
   &lt;p&gt;
    Up to now we're working with function decorator, what if we want to operate at class level? It's actually quite simple, we only have to define a function that takes a class instead of a function as the parameter.
   &lt;/p&gt;
   &lt;p&gt;
    Let's have a look at
    &lt;a href="https://hg.python.org/cpython/file/8e838598eed1/Lib/functools.py" rel="nofollow"&gt;
     functool.total_ordering
    &lt;/a&gt;
    . This decorator makes it so that you only have to define one of the four functions
    &lt;code&gt;
     __lt__
    &lt;/code&gt;
    ,
    &lt;code&gt;
     __le__
    &lt;/code&gt;
    ,
    &lt;code&gt;
     __gt__
    &lt;/code&gt;
    ,
    &lt;code&gt;
     __ge__
    &lt;/code&gt;
    , and the other three will be defined based on the provided function.
   &lt;/p&gt;
   &lt;div class="highlight highlight-source-python"&gt;
    &lt;pre&gt;    &lt;span class="pl-k"&gt;def&lt;/span&gt; &lt;span class="pl-en"&gt;total_ordering&lt;/span&gt;(&lt;span class="pl-smi"&gt;&lt;span class="pl-smi"&gt;cls&lt;/span&gt;&lt;/span&gt;):
        &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"""&lt;/span&gt;Class decorator that fills in missing ordering methods&lt;span class="pl-pds"&gt;"""&lt;/span&gt;&lt;/span&gt;
        convert &lt;span class="pl-k"&gt;=&lt;/span&gt; {
            &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;__lt__&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;: [(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;__gt__&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-k"&gt;lambda&lt;/span&gt; &lt;span class="pl-smi"&gt;self&lt;/span&gt;, &lt;span class="pl-smi"&gt;other&lt;/span&gt;: &lt;span class="pl-k"&gt;not&lt;/span&gt; (&lt;span class="pl-c1"&gt;self&lt;/span&gt; &lt;span class="pl-k"&gt;&amp;lt;&lt;/span&gt; other &lt;span class="pl-k"&gt;or&lt;/span&gt; &lt;span class="pl-c1"&gt;self&lt;/span&gt; &lt;span class="pl-k"&gt;==&lt;/span&gt; other)),
                    (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;__le__&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-k"&gt;lambda&lt;/span&gt; &lt;span class="pl-smi"&gt;self&lt;/span&gt;, &lt;span class="pl-smi"&gt;other&lt;/span&gt;: &lt;span class="pl-c1"&gt;self&lt;/span&gt; &lt;span class="pl-k"&gt;&amp;lt;&lt;/span&gt; other &lt;span class="pl-k"&gt;or&lt;/span&gt; &lt;span class="pl-c1"&gt;self&lt;/span&gt; &lt;span class="pl-k"&gt;==&lt;/span&gt; other),
                    (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;__ge__&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-k"&gt;lambda&lt;/span&gt; &lt;span class="pl-smi"&gt;self&lt;/span&gt;, &lt;span class="pl-smi"&gt;other&lt;/span&gt;: &lt;span class="pl-k"&gt;not&lt;/span&gt; &lt;span class="pl-c1"&gt;self&lt;/span&gt; &lt;span class="pl-k"&gt;&amp;lt;&lt;/span&gt; other)],
            &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;__le__&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;: [(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;__ge__&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-k"&gt;lambda&lt;/span&gt; &lt;span class="pl-smi"&gt;self&lt;/span&gt;, &lt;span class="pl-smi"&gt;other&lt;/span&gt;: &lt;span class="pl-k"&gt;not&lt;/span&gt; &lt;span class="pl-c1"&gt;self&lt;/span&gt; &lt;span class="pl-k"&gt;&amp;lt;=&lt;/span&gt; other &lt;span class="pl-k"&gt;or&lt;/span&gt; &lt;span class="pl-c1"&gt;self&lt;/span&gt; &lt;span class="pl-k"&gt;==&lt;/span&gt; other),
                    (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;__lt__&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-k"&gt;lambda&lt;/span&gt; &lt;span class="pl-smi"&gt;self&lt;/span&gt;, &lt;span class="pl-smi"&gt;other&lt;/span&gt;: &lt;span class="pl-c1"&gt;self&lt;/span&gt; &lt;span class="pl-k"&gt;&amp;lt;=&lt;/span&gt; other &lt;span class="pl-k"&gt;and&lt;/span&gt; &lt;span class="pl-k"&gt;not&lt;/span&gt; &lt;span class="pl-c1"&gt;self&lt;/span&gt; &lt;span class="pl-k"&gt;==&lt;/span&gt; other),
                    (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;__gt__&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-k"&gt;lambda&lt;/span&gt; &lt;span class="pl-smi"&gt;self&lt;/span&gt;, &lt;span class="pl-smi"&gt;other&lt;/span&gt;: &lt;span class="pl-k"&gt;not&lt;/span&gt; &lt;span class="pl-c1"&gt;self&lt;/span&gt; &lt;span class="pl-k"&gt;&amp;lt;=&lt;/span&gt; other)],
            &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;__gt__&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;: [(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;__lt__&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-k"&gt;lambda&lt;/span&gt; &lt;span class="pl-smi"&gt;self&lt;/span&gt;, &lt;span class="pl-smi"&gt;other&lt;/span&gt;: &lt;span class="pl-k"&gt;not&lt;/span&gt; (&lt;span class="pl-c1"&gt;self&lt;/span&gt; &lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; other &lt;span class="pl-k"&gt;or&lt;/span&gt; &lt;span class="pl-c1"&gt;self&lt;/span&gt; &lt;span class="pl-k"&gt;==&lt;/span&gt; other)),
                    (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;__ge__&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-k"&gt;lambda&lt;/span&gt; &lt;span class="pl-smi"&gt;self&lt;/span&gt;, &lt;span class="pl-smi"&gt;other&lt;/span&gt;: &lt;span class="pl-c1"&gt;self&lt;/span&gt; &lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; other &lt;span class="pl-k"&gt;or&lt;/span&gt; &lt;span class="pl-c1"&gt;self&lt;/span&gt; &lt;span class="pl-k"&gt;==&lt;/span&gt; other),
                    (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;__le__&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-k"&gt;lambda&lt;/span&gt; &lt;span class="pl-smi"&gt;self&lt;/span&gt;, &lt;span class="pl-smi"&gt;other&lt;/span&gt;: &lt;span class="pl-k"&gt;not&lt;/span&gt; &lt;span class="pl-c1"&gt;self&lt;/span&gt; &lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; other)],
            &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;__ge__&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;: [(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;__le__&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-k"&gt;lambda&lt;/span&gt; &lt;span class="pl-smi"&gt;self&lt;/span&gt;, &lt;span class="pl-smi"&gt;other&lt;/span&gt;: (&lt;span class="pl-k"&gt;not&lt;/span&gt; &lt;span class="pl-c1"&gt;self&lt;/span&gt; &lt;span class="pl-k"&gt;&amp;gt;=&lt;/span&gt; other) &lt;span class="pl-k"&gt;or&lt;/span&gt; &lt;span class="pl-c1"&gt;self&lt;/span&gt; &lt;span class="pl-k"&gt;==&lt;/span&gt; other),
                    (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;__gt__&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-k"&gt;lambda&lt;/span&gt; &lt;span class="pl-smi"&gt;self&lt;/span&gt;, &lt;span class="pl-smi"&gt;other&lt;/span&gt;: &lt;span class="pl-c1"&gt;self&lt;/span&gt; &lt;span class="pl-k"&gt;&amp;gt;=&lt;/span&gt; other &lt;span class="pl-k"&gt;and&lt;/span&gt; &lt;span class="pl-k"&gt;not&lt;/span&gt; &lt;span class="pl-c1"&gt;self&lt;/span&gt; &lt;span class="pl-k"&gt;==&lt;/span&gt; other),
                    (&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;__lt__&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-k"&gt;lambda&lt;/span&gt; &lt;span class="pl-smi"&gt;self&lt;/span&gt;, &lt;span class="pl-smi"&gt;other&lt;/span&gt;: &lt;span class="pl-k"&gt;not&lt;/span&gt; &lt;span class="pl-c1"&gt;self&lt;/span&gt; &lt;span class="pl-k"&gt;&amp;gt;=&lt;/span&gt; other)]
        }
        &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Find user-defined comparisons (not those inherited from object).&lt;/span&gt;
        roots &lt;span class="pl-k"&gt;=&lt;/span&gt; [op &lt;span class="pl-k"&gt;for&lt;/span&gt; op &lt;span class="pl-k"&gt;in&lt;/span&gt; convert &lt;span class="pl-k"&gt;if&lt;/span&gt; &lt;span class="pl-c1"&gt;getattr&lt;/span&gt;(&lt;span class="pl-c1"&gt;cls&lt;/span&gt;, op, &lt;span class="pl-c1"&gt;None&lt;/span&gt;) &lt;span class="pl-k"&gt;is&lt;/span&gt; &lt;span class="pl-k"&gt;not&lt;/span&gt; &lt;span class="pl-c1"&gt;getattr&lt;/span&gt;(&lt;span class="pl-c1"&gt;object&lt;/span&gt;, op, &lt;span class="pl-c1"&gt;None&lt;/span&gt;)]
        &lt;span class="pl-k"&gt;if&lt;/span&gt; &lt;span class="pl-k"&gt;not&lt;/span&gt; roots:
            &lt;span class="pl-k"&gt;raise&lt;/span&gt; &lt;span class="pl-c1"&gt;ValueError&lt;/span&gt;(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;must define at least one ordering operation: &amp;lt; &amp;gt; &amp;lt;= &amp;gt;=&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;)
        root &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;max&lt;/span&gt;(roots)       &lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; prefer __lt__ to __le__ to __gt__ to __ge__&lt;/span&gt;
        &lt;span class="pl-k"&gt;for&lt;/span&gt; opname, opfunc &lt;span class="pl-k"&gt;in&lt;/span&gt; convert[root]:
            &lt;span class="pl-k"&gt;if&lt;/span&gt; opname &lt;span class="pl-k"&gt;not&lt;/span&gt; &lt;span class="pl-k"&gt;in&lt;/span&gt; roots:
                opfunc.&lt;span class="pl-c1"&gt;__name__&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; opname
                opfunc.&lt;span class="pl-c1"&gt;__doc__&lt;/span&gt; &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-c1"&gt;getattr&lt;/span&gt;(&lt;span class="pl-c1"&gt;int&lt;/span&gt;, opname).&lt;span class="pl-c1"&gt;__doc__&lt;/span&gt;
                &lt;span class="pl-c1"&gt;setattr&lt;/span&gt;(&lt;span class="pl-c1"&gt;cls&lt;/span&gt;, opname, opfunc)
        &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-c1"&gt;cls&lt;/span&gt;&lt;/pre&gt;
   &lt;/div&gt;
   &lt;br/&gt;
   &lt;p&gt;
    This code is pretty simple. It defines 3 other operators based on 2 operators:
    &lt;code&gt;
     __eq__
    &lt;/code&gt;
    and one of the four functions
    &lt;code&gt;
     __lt__
    &lt;/code&gt;
    ,
    &lt;code&gt;
     __le__
    &lt;/code&gt;
    ,
    &lt;code&gt;
     __gt__
    &lt;/code&gt;
    ,
    &lt;code&gt;
     __ge__
    &lt;/code&gt;
    .
   &lt;/p&gt;
   &lt;h2&gt;
    &lt;a aria-hidden="true" class="anchor" href="#useful-decorators" id="user-content-useful-decorators"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Useful decorators
   &lt;/h2&gt;
   &lt;ul&gt;
    &lt;li&gt;
     property - used to quickly create a field from appropriate getter, setter and deleter.
    &lt;/li&gt;
   &lt;/ul&gt;
   &lt;h1&gt;
    &lt;a aria-hidden="true" class="anchor" href="#references" id="user-content-references"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    REFERENCES
   &lt;/h1&gt;
   &lt;ul&gt;
    &lt;li&gt;
     &lt;a href="https://wiki.python.org/moin/PythonDecoratorLibrary" rel="nofollow" title="Python Decorator Library"&gt;
      Python Decorator Library
     &lt;/a&gt;
    &lt;/li&gt;
   &lt;/ul&gt;
  &lt;/article&gt;
 &lt;/div&gt;
&lt;/div&gt;

            &lt;div class="git-meta"&gt;
                
                &lt;span&gt;Brought to you by me &lt;a href="https://github.com/minhhh/pelican_git"&gt;pelican_git&lt;/a&gt;.&lt;/span&gt;
                
                &lt;span style="float: right; color: #369;"&gt;&lt;a href="https://github.com/minhhh/wiki/blob/master/py_decorators.md"&gt;view original&lt;/a&gt;&lt;/span&gt;
                &lt;span style="float: right; margin-right: 8px;"&gt;
                    &lt;a style="color: rgb(102, 102, 102);" href="https://github.com/minhhh/wiki/blob/master/py_decorators.md"&gt;py_decorators.md&lt;/a&gt;&lt;/span&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;&lt;/p&gt;</summary><category term="python"></category><category term="decorator"></category></entry><entry><title>Android CLI tool cheatsheet</title><link href="http://minhhh.github.io/posts/android-cli-tool-cheatsheet" rel="alternate"></link><published>2014-10-03T00:00:00-04:00</published><updated>2014-10-03T00:00:00-04:00</updated><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2014-10-03:posts/android-cli-tool-cheatsheet</id><summary type="html">&lt;p&gt;&lt;div&gt;
    &lt;style type = "text/css" scoped&gt;
.git-content div {
    padding: 0;
    margin: 0;
}

.git-content .git-file {
    border: 1px solid #DEDEDE;
    margin-bottom: 1em;
}

.git-content .git-file .git-meta {
    background-color: #EAEAEA;
    color: #666666;
    font-size: 85%;
    overflow: hidden;
    padding: 0.5em;
}

.git-content .git-file .git-meta a {
    color: #336699;
}

.git-content .git-file .git-meta a:visited {
    color: #773377;
}

.git-content .git-file {
    background-color: #F8F8FF;
    border-bottom: 1px solid #DDDDDD;
    font-size: 100%;
    overflow: auto;
    word-wrap: normal;
}

.git-content .git-file pre {
    background: none repeat scroll 0 0 transparent !important;
    border: medium none !important;
    margin: 0 !important;
    padding: 0 !important;
}
    &lt;/style&gt;
    &lt;div class="git-content"&gt;
        &lt;div class="git-file"&gt;
            &lt;div class="file"&gt;
 &lt;div class="readme blob instapaper_body js-code-block-container" id="readme"&gt;
  &lt;article class="markdown-body entry-content" itemprop="text"&gt;
   &lt;h1&gt;
    &lt;a aria-hidden="true" class="anchor" href="#android-cli-cheatsheet" id="user-content-android-cli-cheatsheet"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    ANDROID CLI CHEATSHEET
   &lt;/h1&gt;
   &lt;h3&gt;
    &lt;a aria-hidden="true" class="anchor" href="#read-log" id="user-content-read-log"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Read log
   &lt;/h3&gt;
   &lt;pre&gt;&lt;code&gt;    adb logcat
    adb logcat -v time

    adb logcat *:V # Get all message in verbose mode
    adb logcat xxxxxxx:V *:S # Get all message starts with xxxxx

    # Log by pid
    adb logcat | grep `adb shell ps | grep com.example.package | cut -c10-15`
&lt;/code&gt;&lt;/pre&gt;
   &lt;h3&gt;
    &lt;a aria-hidden="true" class="anchor" href="#list-package" id="user-content-list-package"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    List package
   &lt;/h3&gt;
   &lt;pre&gt;&lt;code&gt;    adb shell pm list package
    adb shell pm path com.example.someapp
    adb pull /data/app/com.example.someapp-2.apk
&lt;/code&gt;&lt;/pre&gt;
   &lt;h3&gt;
    &lt;a aria-hidden="true" class="anchor" href="#run-a-particular-intent" id="user-content-run-a-particular-intent"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Run a particular intent
   &lt;/h3&gt;
   &lt;pre&gt;&lt;code&gt;    # Start by activity name
    adb shell 'am start -n com.qooapp.qoohelper/.activity.WelcomeActivity'

    # add environment variable
    adb shell 'am start -a $(MYPACKAGEID).RUN -e server http://$(MYIP):$(MYPORT) -e game $(game) -e nativeLog $(MYNATIVELOG)'
&lt;/code&gt;&lt;/pre&gt;
   &lt;h3&gt;
    &lt;a aria-hidden="true" class="anchor" href="#install--uninstall" id="user-content-install--uninstall"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Install / Uninstall
   &lt;/h3&gt;
   &lt;pre&gt;&lt;code&gt;    adb install file.apk
    adb install -r file.apk # replace

    # Install to a specific device
    adb -s "deviceIDfromlist" install file.apk

    adb shell am start -a android.intent.action.DELETE -d package:&amp;lt;your app package&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
   &lt;h3&gt;
    &lt;a aria-hidden="true" class="anchor" href="#extracting-apk-file" id="user-content-extracting-apk-file"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Extracting APK file
   &lt;/h3&gt;
   &lt;ul&gt;
    &lt;li&gt;
     &lt;a href="http://ibotpeaches.github.io/Apktool/" rel="nofollow"&gt;
      Use
      &lt;code&gt;
       apktool
      &lt;/code&gt;
     &lt;/a&gt;
    &lt;/li&gt;
   &lt;/ul&gt;
   &lt;pre&gt;&lt;code&gt;    apktool d /path/to/apk
    open res/values/strings.xml
&lt;/code&gt;&lt;/pre&gt;
   &lt;h2&gt;
    &lt;a aria-hidden="true" class="anchor" href="#references" id="user-content-references"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    References
   &lt;/h2&gt;
   &lt;ul&gt;
    &lt;li&gt;
     &lt;a href="http://stackoverflow.com/questions/4191762/how-to-view-androidmanifest-xml-from-apk-file" rel="nofollow"&gt;
      View android manifset from APK
     &lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
     &lt;a href="http://stackoverflow.com/questions/4032960/how-do-i-get-an-apk-file-from-an-android-device" rel="nofollow"&gt;
      Get apk from Android device
     &lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
     &lt;a href="http://stackoverflow.com/questions/12949609/adb-shell-command-to-make-android-package-uninstall-dialog-appear" rel="nofollow"&gt;
      Adb shell to uninstall package
     &lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
     &lt;a href="http://wiki.cyanogenmod.org/w/Doc:_debugging_with_logcat" rel="nofollow"&gt;
      Debugging with logcat
     &lt;/a&gt;
    &lt;/li&gt;
   &lt;/ul&gt;
  &lt;/article&gt;
 &lt;/div&gt;
&lt;/div&gt;

            &lt;div class="git-meta"&gt;
                
                &lt;span&gt;Brought to you by me &lt;a href="https://github.com/minhhh/pelican_git"&gt;pelican_git&lt;/a&gt;.&lt;/span&gt;
                
                &lt;span style="float: right; color: #369;"&gt;&lt;a href="https://github.com/minhhh/wiki/blob/master/android_cli.md"&gt;view original&lt;/a&gt;&lt;/span&gt;
                &lt;span style="float: right; margin-right: 8px;"&gt;
                    &lt;a style="color: rgb(102, 102, 102);" href="https://github.com/minhhh/wiki/blob/master/android_cli.md"&gt;android_cli.md&lt;/a&gt;&lt;/span&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;&lt;/p&gt;</summary><category term="android"></category><category term="adb"></category></entry><entry><title>Embed git file to pelican</title><link href="http://minhhh.github.io/posts/embed-git-file-to-pelican" rel="alternate"></link><published>2014-09-11T00:00:00-04:00</published><updated>2014-09-11T00:00:00-04:00</updated><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2014-09-11:posts/embed-git-file-to-pelican</id><summary type="html">&lt;p&gt;Writing articles in github pages is nice, because you have github repository with all the nice features for document management, however sometimes it's not where I want my articles to reside. For instance, I want the articles about git to be in a separate &lt;code&gt;git&lt;/code&gt; repository.&lt;/p&gt;
&lt;p&gt;I have several solutions for this problem:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;I could duplicate the article. But I won't do this.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I could store the articles as &lt;code&gt;gist&lt;/code&gt; like this:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="gist"&gt;
    &lt;script src='https://gist.github.com/dc8b7c536d0fe9c7003f.js'&gt;&lt;/script&gt;
    &lt;noscript&gt;
        &lt;pre&gt;&lt;code&gt;# First
## Second
Third&lt;/code&gt;&lt;/pre&gt;
    &lt;/noscript&gt;
&lt;/div&gt;
&lt;p&gt;But I can't store a lot of related things in gist because that's the role of a real git repo.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I could store the articles in the normal &lt;code&gt;git&lt;/code&gt; repo, and embed it into the article in github page. I chose this approach for long articles. Like this:&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- &lt;script src="http://gistit-minhhh.appspot.com/github/robertkrimen/gist-it-example/blob/master/example.js"&gt;&lt;/script&gt; --&gt;

&lt;p&gt;There's already a nice tool to do this: &lt;a href="https://github.com/minhhh/gist-it"&gt;gist-it&lt;/a&gt;. Using it is really simple, just clone the repo and deploy it to an AppEngine instance. The downside of this is it does not generate &lt;code&gt;html&lt;/code&gt; code for &lt;code&gt;Markdown&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The best solution for me is to use a plugin for embedding git file into &lt;code&gt;pelican&lt;/code&gt; like this:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div&gt;
    &lt;style type = "text/css" scoped&gt;
.git-content div {
    padding: 0;
    margin: 0;
}

.git-content .git-file {
    border: 1px solid #DEDEDE;
    margin-bottom: 1em;
}

.git-content .git-file .git-meta {
    background-color: #EAEAEA;
    color: #666666;
    font-size: 85%;
    overflow: hidden;
    padding: 0.5em;
}

.git-content .git-file .git-meta a {
    color: #336699;
}

.git-content .git-file .git-meta a:visited {
    color: #773377;
}

.git-content .git-file {
    background-color: #F8F8FF;
    border-bottom: 1px solid #DDDDDD;
    font-size: 100%;
    overflow: auto;
    word-wrap: normal;
}

.git-content .git-file pre {
    background: none repeat scroll 0 0 transparent !important;
    border: medium none !important;
    margin: 0 !important;
    padding: 0 !important;
}
    &lt;/style&gt;
    &lt;div class="git-content"&gt;
        &lt;div class="git-file"&gt;
            &lt;div class="file"&gt;
 &lt;div class="readme blob instapaper_body js-code-block-container" id="readme"&gt;
  &lt;article class="markdown-body entry-content" itemprop="text"&gt;
   &lt;h1&gt;
    &lt;a aria-hidden="true" class="anchor" href="#first-level-title" id="user-content-first-level-title"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    First level title
   &lt;/h1&gt;
   &lt;p&gt;
    Notes from
    &lt;a href="https://github.com/minhhh/wiki"&gt;
     link
    &lt;/a&gt;
    .
   &lt;/p&gt;
   &lt;h2&gt;
    &lt;a aria-hidden="true" class="anchor" href="#second-level-title" id="user-content-second-level-title"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Second level title
   &lt;/h2&gt;
   &lt;p&gt;
    Quote some code with correct syntax highlight
   &lt;/p&gt;
   &lt;div class="highlight highlight-source-python"&gt;
    &lt;pre&gt;&lt;span class="pl-k"&gt;for&lt;/span&gt; i &lt;span class="pl-k"&gt;in&lt;/span&gt; [&lt;span class="pl-c1"&gt;0&lt;/span&gt;, &lt;span class="pl-c1"&gt;1&lt;/span&gt;, &lt;span class="pl-c1"&gt;2&lt;/span&gt;, &lt;span class="pl-c1"&gt;3&lt;/span&gt;, &lt;span class="pl-c1"&gt;4&lt;/span&gt;, &lt;span class="pl-c1"&gt;5&lt;/span&gt;]:
    &lt;span class="pl-c1"&gt;print&lt;/span&gt; i&lt;span class="pl-k"&gt;**&lt;/span&gt;&lt;span class="pl-c1"&gt;2&lt;/span&gt;

&lt;span class="pl-k"&gt;for&lt;/span&gt; i &lt;span class="pl-k"&gt;in&lt;/span&gt; &lt;span class="pl-c1"&gt;range&lt;/span&gt;(&lt;span class="pl-c1"&gt;6&lt;/span&gt;):
    &lt;span class="pl-c1"&gt;print&lt;/span&gt; i&lt;span class="pl-k"&gt;**&lt;/span&gt;&lt;span class="pl-c1"&gt;2&lt;/span&gt;&lt;/pre&gt;
   &lt;/div&gt;
   &lt;h3&gt;
    &lt;a aria-hidden="true" class="anchor" href="#third-level-title" id="user-content-third-level-title"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Third level title
   &lt;/h3&gt;
   &lt;div class="highlight highlight-source-python"&gt;
    &lt;pre&gt;&lt;span class="pl-k"&gt;for&lt;/span&gt; i &lt;span class="pl-k"&gt;in&lt;/span&gt; &lt;span class="pl-v"&gt;xrange&lt;/span&gt;(&lt;span class="pl-c1"&gt;6&lt;/span&gt;):
    &lt;span class="pl-c1"&gt;print&lt;/span&gt; i&lt;span class="pl-k"&gt;**&lt;/span&gt;&lt;span class="pl-c1"&gt;2&lt;/span&gt;&lt;/pre&gt;
   &lt;/div&gt;
   &lt;ul&gt;
    &lt;li&gt;
     First item
    &lt;/li&gt;
    &lt;li&gt;
     Second item
    &lt;/li&gt;
   &lt;/ul&gt;
  &lt;/article&gt;
 &lt;/div&gt;
&lt;/div&gt;

            &lt;div class="git-meta"&gt;
                
                &lt;span&gt;Brought to you by me &lt;a href="https://github.com/minhhh/pelican_git"&gt;pelican_git&lt;/a&gt;.&lt;/span&gt;
                
                &lt;span style="float: right; color: #369;"&gt;&lt;a href="https://github.com/minhhh/wiki/blob/master/sample.md"&gt;view original&lt;/a&gt;&lt;/span&gt;
                &lt;span style="float: right; margin-right: 8px;"&gt;
                    &lt;a style="color: rgb(102, 102, 102);" href="https://github.com/minhhh/wiki/blob/master/sample.md"&gt;sample.md&lt;/a&gt;&lt;/span&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;&lt;/p&gt;</summary><category term="git"></category><category term="pelican"></category><category term="github"></category></entry><entry><title>How to rebase in Git</title><link href="http://minhhh.github.io/posts/how-to-rebase-in-git" rel="alternate"></link><published>2014-09-09T00:00:00-04:00</published><updated>2014-09-09T00:00:00-04:00</updated><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2014-09-09:posts/how-to-rebase-in-git</id><summary type="html">&lt;p&gt;&lt;div&gt;
    &lt;style type = "text/css" scoped&gt;
.git-content div {
    padding: 0;
    margin: 0;
}

.git-content .git-file {
    border: 1px solid #DEDEDE;
    margin-bottom: 1em;
}

.git-content .git-file .git-meta {
    background-color: #EAEAEA;
    color: #666666;
    font-size: 85%;
    overflow: hidden;
    padding: 0.5em;
}

.git-content .git-file .git-meta a {
    color: #336699;
}

.git-content .git-file .git-meta a:visited {
    color: #773377;
}

.git-content .git-file {
    background-color: #F8F8FF;
    border-bottom: 1px solid #DDDDDD;
    font-size: 100%;
    overflow: auto;
    word-wrap: normal;
}

.git-content .git-file pre {
    background: none repeat scroll 0 0 transparent !important;
    border: medium none !important;
    margin: 0 !important;
    padding: 0 !important;
}
    &lt;/style&gt;
    &lt;div class="git-content"&gt;
        &lt;div class="git-file"&gt;
            &lt;div class="file"&gt;
 &lt;div class="readme blob instapaper_body js-code-block-container" id="readme"&gt;
  &lt;article class="markdown-body entry-content" itemprop="text"&gt;
   &lt;h1&gt;
    &lt;a aria-hidden="true" class="anchor" href="#rebase-feature-branch-into-develop-branch" id="user-content-rebase-feature-branch-into-develop-branch"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Rebase feature branch into develop branch
   &lt;/h1&gt;
   &lt;p&gt;
    If you follow
    &lt;a href="http://nvie.com/posts/a-successful-git-branching-model/" rel="nofollow"&gt;
     A successful Git branching model
    &lt;/a&gt;
    , you will have to merge feature branches into develop from time to time. To make a beautiful linear tree in the develop branch, you would rebase instead of just merging. The following guide will outline the rebase process from beginning to end.
   &lt;/p&gt;
   &lt;h2&gt;
    &lt;a aria-hidden="true" class="anchor" href="#rebasing-one-branch-into-develop" id="user-content-rebasing-one-branch-into-develop"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Rebasing one branch into develop
   &lt;/h2&gt;
   &lt;p&gt;
    Suppose your feature branch is
    &lt;code&gt;
     feature/add_css
    &lt;/code&gt;
   &lt;/p&gt;
   &lt;pre&gt;&lt;code&gt;    # This will merge the latest develop to feature/css
    git checkout develop
    git pull
    git checkout feature/add_css
    git pull
    git merge develop
    git push

    # Create a temporary rebase branch
    git checkout develop
    git checkout -b temp

    # Merge feature branch and resolve a lot of conflicts
    git merge feature/add_css

    # Perform the rebase, you may have to resolve the conflict again
    git rebase develop

    # NOTE: Do not use git checkout (--theirs|–ours) path/to/file
    # as it will cause trouble when you resolved a bad conflict then
    # the subsequent merge may not be correct.

    # This will merge the rebased item to develop.
    git checkout develop
    git merge feature/something_rebase

    # (Important) Checks that there are no difference. This should resolve in no difference in the ideal case
    git diff develop..feature/something

    # (Important) Checks that the logs have been correctly integrated.
    git log --graph

    # Push once all checks have been completed.
    git push

    # Delete the temporary merge branch
    git branch -D temp
&lt;/code&gt;&lt;/pre&gt;
   &lt;br/&gt;
   &lt;h2&gt;
    &lt;a aria-hidden="true" class="anchor" href="#rebasing-multiple-branches-into-develop" id="user-content-rebasing-multiple-branches-into-develop"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Rebasing multiple branches into develop
   &lt;/h2&gt;
   &lt;p&gt;
    The correct way to do this is to rebase each branch one by one, but the next one will have to rebase based on the result of the last rebase. Suppose you're going to merge these 2 branches:
    &lt;code&gt;
     feature/add_css
    &lt;/code&gt;
    and
    &lt;code&gt;
     feature/add_html
    &lt;/code&gt;
   &lt;/p&gt;
   &lt;pre&gt;&lt;code&gt;    # This will merge the latest develop to feature/css
    git checkout develop
    git pull
    git checkout feature/add_css
    git pull
    git merge develop
    git push

    # Create a temporary rebase branch
    git checkout develop
    git checkout -b main_rebase

    # Merge feature branch and resolve a lot of conflicts
    git merge feature/add_css

    # Perform the rebase, you may have to resolve the conflict again
    git rebase main_rebase

    # Push this branch to remote so we can rebase other branch based on it
    git push

    # Now checkout another temporary branch
    git checkout -b temp

    # Merge feature branch and resolve a lot of conflicts
    git merge feature/add_css

    # (IMPORTANT) Perform the rebase based on the main rebase branch
    git rebase main_rebase

    # Merge the rebase items into main rebase branch
    git checkout main_rebase
    git merge temp

    # (IMPORTANT) Checks that the logs have been correctly integrated.
    git log --graph

    # (IMPORTANT) Push main rebase branch to remote
    git push

    # Delete the temporary merge branch
    git branch -D temp
&lt;/code&gt;&lt;/pre&gt;
   &lt;br/&gt;
   &lt;p&gt;
    Then repeat this process with the next branches one by one.
   &lt;/p&gt;
  &lt;/article&gt;
 &lt;/div&gt;
&lt;/div&gt;

            &lt;div class="git-meta"&gt;
                
                &lt;span&gt;Brought to you by me &lt;a href="https://github.com/minhhh/pelican_git"&gt;pelican_git&lt;/a&gt;.&lt;/span&gt;
                
                &lt;span style="float: right; color: #369;"&gt;&lt;a href="https://github.com/minhhh/git-manual/blob/master/git_rebase.md"&gt;view original&lt;/a&gt;&lt;/span&gt;
                &lt;span style="float: right; margin-right: 8px;"&gt;
                    &lt;a style="color: rgb(102, 102, 102);" href="https://github.com/minhhh/git-manual/blob/master/git_rebase.md"&gt;git_rebase.md&lt;/a&gt;&lt;/span&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;&lt;/p&gt;</summary><category term="git"></category><category term="rebase"></category></entry><entry><title>Git cheat sheet</title><link href="http://minhhh.github.io/posts/git-cheat-sheet" rel="alternate"></link><published>2014-09-05T00:00:00-04:00</published><updated>2014-09-05T00:00:00-04:00</updated><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2014-09-05:posts/git-cheat-sheet</id><summary type="html">&lt;p&gt;&lt;div&gt;
    &lt;style type = "text/css" scoped&gt;
.git-content div {
    padding: 0;
    margin: 0;
}

.git-content .git-file {
    border: 1px solid #DEDEDE;
    margin-bottom: 1em;
}

.git-content .git-file .git-meta {
    background-color: #EAEAEA;
    color: #666666;
    font-size: 85%;
    overflow: hidden;
    padding: 0.5em;
}

.git-content .git-file .git-meta a {
    color: #336699;
}

.git-content .git-file .git-meta a:visited {
    color: #773377;
}

.git-content .git-file {
    background-color: #F8F8FF;
    border-bottom: 1px solid #DDDDDD;
    font-size: 100%;
    overflow: auto;
    word-wrap: normal;
}

.git-content .git-file pre {
    background: none repeat scroll 0 0 transparent !important;
    border: medium none !important;
    margin: 0 !important;
    padding: 0 !important;
}
    &lt;/style&gt;
    &lt;div class="git-content"&gt;
        &lt;div class="git-file"&gt;
            &lt;div class="file"&gt;
 &lt;div class="readme blob instapaper_body js-code-block-container" id="readme"&gt;
  &lt;article class="markdown-body entry-content" itemprop="text"&gt;
   &lt;h1&gt;
    &lt;a aria-hidden="true" class="anchor" href="#git-manual" id="user-content-git-manual"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Git Manual
   &lt;/h1&gt;
   &lt;p&gt;
    Git manual and related topics such as branching process.
   &lt;/p&gt;
   &lt;h2&gt;
    &lt;a aria-hidden="true" class="anchor" href="#toc" id="user-content-toc"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    &lt;a id="user-content-toc"&gt;
     TOC
    &lt;/a&gt;
   &lt;/h2&gt;
   &lt;a id="user-content-toc"&gt;
   &lt;/a&gt;
   &lt;ul&gt;
    &lt;a id="user-content-toc"&gt;
    &lt;/a&gt;
    &lt;li&gt;
     &lt;a id="user-content-toc"&gt;
     &lt;/a&gt;
     &lt;a href="#user-content-installation"&gt;
      Installation
     &lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
     &lt;a href="#user-content-basics"&gt;
      Basics
     &lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
     &lt;a href="#user-content-info"&gt;
      Info
     &lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
     &lt;a href="#user-content-exports"&gt;
      Exports
     &lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
     &lt;a href="#user-content-branching"&gt;
      Branching
     &lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
     &lt;a href="#user-content-undoing"&gt;
      Undoing
     &lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
     &lt;a href="#user-content-remotes"&gt;
      Remotes
     &lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
     &lt;a href="#user-content-submodules"&gt;
      Submodules
     &lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
     &lt;a href="#user-content-additional-resources"&gt;
      Additional resources
     &lt;/a&gt;
    &lt;/li&gt;
   &lt;/ul&gt;
   &lt;h3&gt;
    &lt;a aria-hidden="true" class="anchor" href="#installation" id="user-content-installation"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    &lt;a id="user-content-installation"&gt;
    &lt;/a&gt;
    Installation
   &lt;/h3&gt;
   &lt;ul&gt;
    &lt;li&gt;
     &lt;a href="http://git-scm.com/book" rel="nofollow"&gt;
      Pro Git
     &lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
     &lt;a href="http://serverfault.com/questions/194567/how-to-i-tell-git-for-windows-where-to-find-my-private-rsa-key" rel="nofollow"&gt;
      Set tortoisegit with SSH private key
     &lt;/a&gt;
    &lt;/li&gt;
   &lt;/ul&gt;
   &lt;h3&gt;
    &lt;a aria-hidden="true" class="anchor" href="#branching-model" id="user-content-branching-model"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Branching model
   &lt;/h3&gt;
   &lt;ul&gt;
    &lt;li&gt;
     &lt;a href="http://nvie.com/posts/a-successful-git-branching-model/" rel="nofollow"&gt;
      Successful git branching model
     &lt;/a&gt;
    &lt;/li&gt;
   &lt;/ul&gt;
   &lt;pre&gt;&lt;code&gt;    origin/feature/update_layout
    origin/hotfix/r20130305-1.1
    origin/master
    origin/develop
&lt;/code&gt;&lt;/pre&gt;
   &lt;br/&gt;
   &lt;h3&gt;
    &lt;a aria-hidden="true" class="anchor" href="#basics" id="user-content-basics"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    &lt;a id="user-content-basics"&gt;
    &lt;/a&gt;
    Basics
   &lt;/h3&gt;
   &lt;ul&gt;
    &lt;li&gt;
     &lt;a href="http://niklasschlimm.blogspot.com/2011/07/top-10-git-commands-for-newbie.html%7C" rel="nofollow"&gt;
      10 commands
     &lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
     &lt;a href="http://git.or.cz/course/svn.html" rel="nofollow"&gt;
      Git SVN crash course
     &lt;/a&gt;
    &lt;/li&gt;
   &lt;/ul&gt;
   &lt;pre&gt;&lt;code&gt;    # pull rebase create nicer merge tree, but be careful with it
    git stash # stash any change
    git pull --rebase
    git stash pop # stash pop any change

    git fetch -p # Bring the repository up to date without executing merge on the current branch

    git add -u # add modified files but not new files
    git add -A # add all untracked files

    # Diff with remote
    git diff master origin/master
&lt;/code&gt;&lt;/pre&gt;
   &lt;br/&gt;
   &lt;h4&gt;
    &lt;a aria-hidden="true" class="anchor" href="#tagging" id="user-content-tagging"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Tagging
   &lt;/h4&gt;
   &lt;pre&gt;&lt;code&gt;    git tag -a &amp;lt;tagname&amp;gt; -m "Tag message"
    
    # delete tag on remote
    git tag --delete &amp;lt;tagname&amp;gt;
    git push origin :&amp;lt;tagname&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
   &lt;br/&gt;
   &lt;h4&gt;
    &lt;a aria-hidden="true" class="anchor" href="#pull-from-all-branches" id="user-content-pull-from-all-branches"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Pull from all branches
   &lt;/h4&gt;
   &lt;ul&gt;
    &lt;li&gt;
     &lt;a href="https://stackoverflow.com/questions/10312521/how-to-fetch-all-git-branches" rel="nofollow"&gt;
      https://stackoverflow.com/questions/10312521/how-to-fetch-all-git-branches
     &lt;/a&gt;
    &lt;/li&gt;
   &lt;/ul&gt;
   &lt;pre&gt;&lt;code&gt;git branch -r | grep -v '\-&amp;gt;' | while read remote; do git branch --track "${remote#origin/}" "$remote"; done
git fetch --all
git pull --all
&lt;/code&gt;&lt;/pre&gt;
   &lt;br/&gt;
   &lt;h3&gt;
    &lt;a aria-hidden="true" class="anchor" href="#info" id="user-content-info"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    &lt;a id="user-content-info"&gt;
    &lt;/a&gt;
    Info
   &lt;/h3&gt;
   &lt;h4&gt;
    &lt;a aria-hidden="true" class="anchor" href="#find-commits-where-files-were-deleted" id="user-content-find-commits-where-files-were-deleted"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Find commits where files were deleted
   &lt;/h4&gt;
   &lt;pre&gt;&lt;code&gt;    git log --diff-filter=D --summary --stat
&lt;/code&gt;&lt;/pre&gt;
   &lt;br/&gt;
   &lt;h4&gt;
    &lt;a aria-hidden="true" class="anchor" href="#checkout-deleted-file-in-the-working-tree" id="user-content-checkout-deleted-file-in-the-working-tree"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Checkout deleted file in the working tree
   &lt;/h4&gt;
   &lt;pre&gt;&lt;code&gt;    git checkout &amp;lt;sha1&amp;gt;^ &amp;lt;file&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
   &lt;br/&gt;
   &lt;h4&gt;
    &lt;a aria-hidden="true" class="anchor" href="#search-for-a-file-in-project-commit-history" id="user-content-search-for-a-file-in-project-commit-history"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Search for a file in project commit history
   &lt;/h4&gt;
   &lt;pre&gt;&lt;code&gt;    git log --all --full-history -- **/&amp;lt;filename&amp;gt;.*
&lt;/code&gt;&lt;/pre&gt;
   &lt;br/&gt;
   &lt;h4&gt;
    &lt;a aria-hidden="true" class="anchor" href="#only-show-the-content-of-a-file-from-a-specific-revision" id="user-content-only-show-the-content-of-a-file-from-a-specific-revision"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Only show the content of a file from a specific revision
   &lt;/h4&gt;
   &lt;pre&gt;&lt;code&gt;    git show &amp;lt;sha1&amp;gt;:&amp;lt;file&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
   &lt;br/&gt;
   &lt;h4&gt;
    &lt;a aria-hidden="true" class="anchor" href="#diff-2-files-at-specific-revisions-or-branches" id="user-content-diff-2-files-at-specific-revisions-or-branches"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Diff 2 files at specific revisions or branches
   &lt;/h4&gt;
   &lt;pre&gt;&lt;code&gt;    git diff &amp;lt;revision_1&amp;gt;..&amp;lt;revision_2&amp;gt; -- &amp;lt;file&amp;gt;
    git diff &amp;lt;branch_1&amp;gt; &amp;lt;branch_2&amp;gt; -- &amp;lt;file&amp;gt;
    git diff &amp;lt;branch_2&amp;gt; -- &amp;lt;file&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
   &lt;br/&gt;
   &lt;h4&gt;
    &lt;a aria-hidden="true" class="anchor" href="#show-changes-on-a-branch-that-is-not-merged-upstream" id="user-content-show-changes-on-a-branch-that-is-not-merged-upstream"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Show changes on a branch that is not merged upstream
   &lt;/h4&gt;
   &lt;pre&gt;&lt;code&gt;    git cherry &amp;lt;upstream_branch&amp;gt; &amp;lt;new_branch&amp;gt;
    git log &amp;lt;upstream_branch&amp;gt;..&amp;lt;new_branch&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
   &lt;br/&gt;
   &lt;h4&gt;
    &lt;a aria-hidden="true" class="anchor" href="#show-log-with-changed-files" id="user-content-show-log-with-changed-files"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Show log with changed files
   &lt;/h4&gt;
   &lt;pre&gt;&lt;code&gt;    git log --name-only
    git log --name-status
    git log --stat
    git log --decorate --graph --oneline --date-order # better visual
&lt;/code&gt;&lt;/pre&gt;
   &lt;br/&gt;
   &lt;h4&gt;
    &lt;a aria-hidden="true" class="anchor" href="#get-latest-tag-in-the-current-branch" id="user-content-get-latest-tag-in-the-current-branch"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Get latest tag in the current branch
   &lt;/h4&gt;
   &lt;pre&gt;&lt;code&gt;    git describe --exact-match --abbrev=0
    git describe --abbrev=0 --tags
&lt;/code&gt;&lt;/pre&gt;
   &lt;br/&gt;
   &lt;h4&gt;
    &lt;a aria-hidden="true" class="anchor" href="#get-tag-with-messages" id="user-content-get-tag-with-messages"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Get tag with messages
   &lt;/h4&gt;
   &lt;pre&gt;&lt;code&gt;    git tag -l -n9
&lt;/code&gt;&lt;/pre&gt;
   &lt;br/&gt;
   &lt;h4&gt;
    &lt;a aria-hidden="true" class="anchor" href="#show-log-graph" id="user-content-show-log-graph"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Show log graph
   &lt;/h4&gt;
   &lt;pre&gt;&lt;code&gt;    git log origin master # Show log of a specific branch on remote
    git log origin master --graph --decorate # to show colorful text and graph and the branch name of each log.

    # A beautiful version
    git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&amp;lt;%an&amp;gt;%Creset' --abbrev-commit

    # Show git log then exit
    git log | cat -

    # Show log of a particular hash
    git show &amp;lt;hash&amp;gt;
    git show &amp;lt;hash&amp;gt; --stat # show only oneline for each change
&lt;/code&gt;&lt;/pre&gt;
   &lt;br/&gt;
   &lt;h4&gt;
    &lt;a aria-hidden="true" class="anchor" href="#get-current-url" id="user-content-get-current-url"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Get current URL
   &lt;/h4&gt;
   &lt;pre&gt;&lt;code&gt;    git remote show origin
&lt;/code&gt;&lt;/pre&gt;
   &lt;br/&gt;
   &lt;h4&gt;
    &lt;a aria-hidden="true" class="anchor" href="#get-brief-info-about-branches" id="user-content-get-brief-info-about-branches"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Get brief info about branches
   &lt;/h4&gt;
   &lt;pre&gt;&lt;code&gt;    git branch -lvv
&lt;/code&gt;&lt;/pre&gt;
   &lt;br/&gt;
   &lt;h4&gt;
    &lt;a aria-hidden="true" class="anchor" href="#finding-what-branch-a-commit-came-from" id="user-content-finding-what-branch-a-commit-came-from"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Finding what branch a commit came from
   &lt;/h4&gt;
   &lt;pre&gt;&lt;code&gt;    git branch --contains &amp;lt;commit&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
   &lt;br/&gt;
   &lt;h4&gt;
    &lt;a aria-hidden="true" class="anchor" href="#finding-who-committed-which-line" id="user-content-finding-who-committed-which-line"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Finding who committed which line
   &lt;/h4&gt;
   &lt;pre&gt;&lt;code&gt;    git blame &amp;lt;file&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
   &lt;br/&gt;
   &lt;h4&gt;
    &lt;a aria-hidden="true" class="anchor" href="#applying-a-range-of-commits" id="user-content-applying-a-range-of-commits"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Applying a range of commits
   &lt;/h4&gt;
   &lt;pre&gt;&lt;code&gt;    # A should be older than B, this DOES NOT include A
    git cherry-pick A..B

    # Include A
    git cherry-pick A^..B
&lt;/code&gt;&lt;/pre&gt;
   &lt;br/&gt;
   &lt;h3&gt;
    &lt;a aria-hidden="true" class="anchor" href="#exports" id="user-content-exports"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    &lt;a id="user-content-exports"&gt;
    &lt;/a&gt;
    Exports
   &lt;/h3&gt;
   &lt;pre&gt;&lt;code&gt;    # From a repository
    git checkout-index -a -f --prefix=/destination/path/

    # Export remote
    git archive --format=tar --remote=ssh://remote_server/remote_repository master | tar -xf -
&lt;/code&gt;&lt;/pre&gt;
   &lt;br/&gt;
   &lt;p&gt;
    &lt;a href="#user-content-toc"&gt;
     TOC
    &lt;/a&gt;
   &lt;/p&gt;
   &lt;h3&gt;
    &lt;a aria-hidden="true" class="anchor" href="#branching" id="user-content-branching"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    &lt;a id="user-content-branching"&gt;
    &lt;/a&gt;
    Branching
   &lt;/h3&gt;
   &lt;h4&gt;
    &lt;a aria-hidden="true" class="anchor" href="#branch-and-create-new-branch" id="user-content-branch-and-create-new-branch"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Branch and Create new branch
   &lt;/h4&gt;
   &lt;pre&gt;&lt;code&gt;    git checkout -b experimental
&lt;/code&gt;&lt;/pre&gt;
   &lt;br/&gt;
   &lt;h4&gt;
    &lt;a aria-hidden="true" class="anchor" href="#delete-unused-branch" id="user-content-delete-unused-branch"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Delete unused branch
   &lt;/h4&gt;
   &lt;pre&gt;&lt;code&gt;    git branch -d experimental
    git push origin --delete newfeature
&lt;/code&gt;&lt;/pre&gt;
   &lt;br/&gt;
   &lt;h4&gt;
    &lt;a aria-hidden="true" class="anchor" href="#rename-a-local-branch" id="user-content-rename-a-local-branch"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Rename a local branch
   &lt;/h4&gt;
   &lt;pre&gt;&lt;code&gt;    git branch -m &amp;lt;oldname&amp;gt; &amp;lt;newname&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
   &lt;br/&gt;
   &lt;p&gt;
    &lt;a href="#user-content-toc"&gt;
     TOC
    &lt;/a&gt;
   &lt;/p&gt;
   &lt;h3&gt;
    &lt;a aria-hidden="true" class="anchor" href="#undoing" id="user-content-undoing"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    &lt;a id="user-content-undoing"&gt;
    &lt;/a&gt;
    Undoing
   &lt;/h3&gt;
   &lt;h4&gt;
    &lt;a aria-hidden="true" class="anchor" href="#undo-a-merge-or-pull" id="user-content-undo-a-merge-or-pull"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Undo a merge or pull
   &lt;/h4&gt;
   &lt;p&gt;
    Check out
    &lt;a href="http://www.kernel.org/pub/software/scm/git/docs/git-reset.html" rel="nofollow"&gt;
     git reset
    &lt;/a&gt;
    for great explanation and
    &lt;a href="http://www.kernel.org/pub/software/scm/git/docs/git-reset.html#_examples" rel="nofollow"&gt;
     examples
    &lt;/a&gt;
    .
   &lt;/p&gt;
   &lt;pre&gt;&lt;code&gt;    git reset --hard
&lt;/code&gt;&lt;/pre&gt;
   &lt;br/&gt;
   &lt;h4&gt;
    &lt;a aria-hidden="true" class="anchor" href="#undo-a-merge-or-pull-inside-a-dirty-work-tree" id="user-content-undo-a-merge-or-pull-inside-a-dirty-work-tree"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Undo a merge or pull inside a dirty work tree
   &lt;/h4&gt;
   &lt;p&gt;
    Check out
    &lt;a href="http://www.kernel.org/pub/software/scm/git/docs/git-reset.html" rel="nofollow"&gt;
     git reset
    &lt;/a&gt;
    for great explanation and
    &lt;a href="http://www.kernel.org/pub/software/scm/git/docs/git-reset.html#_examples" rel="nofollow"&gt;
     examples
    &lt;/a&gt;
    .
   &lt;/p&gt;
   &lt;pre&gt;&lt;code&gt;    git reset --merge ORIG_HEAD
&lt;/code&gt;&lt;/pre&gt;
   &lt;br/&gt;
   &lt;h4&gt;
    &lt;a aria-hidden="true" class="anchor" href="#revert-a-bad-commit" id="user-content-revert-a-bad-commit"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Revert a bad commit
   &lt;/h4&gt;
   &lt;pre&gt;&lt;code&gt;    git revert &amp;lt;sha1&amp;gt;

    # Revert single file
    git checkout -- filename

    # Revert all files in current folder
    git checkout .

    # Remove all new files or folder
    git clean -df

    # Revert to a commit with a new commit
    git revert --no-commit xxxxxx..HEAD
    git commit -m "revert to xxxxxx"
    git diff HEAD xxxxxx
&lt;/code&gt;&lt;/pre&gt;
   &lt;br/&gt;
   &lt;h4&gt;
    &lt;a aria-hidden="true" class="anchor" href="#checkout-a-deleted-file-into-the-work-tree" id="user-content-checkout-a-deleted-file-into-the-work-tree"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Checkout a deleted file into the work tree
   &lt;/h4&gt;
   &lt;pre&gt;&lt;code&gt;    git checkout &amp;lt;sha1&amp;gt;^ -- &amp;lt;file&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
   &lt;br/&gt;
   &lt;h4&gt;
    &lt;a aria-hidden="true" class="anchor" href="#rewrite-authorcommiter-name-and-email" id="user-content-rewrite-authorcommiter-name-and-email"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Rewrite author/commiter name and email
   &lt;/h4&gt;
   &lt;pre&gt;&lt;code&gt;    git filter-branch --commit-filter '
            if [ "$GIT_COMMITTER_NAME" = "Ha.Minh" ];
            then
                    GIT_COMMITTER_NAME="Ha.Minh";
                    GIT_AUTHOR_NAME="Ha.Minh";
                    GIT_COMMITTER_EMAIL="minhhh@minhhuyha.info";
                    GIT_AUTHOR_EMAIL="minhhh@minhhuyha.info";
                    git commit-tree "$@";
            else
                    git commit-tree "$@";
            fi' HEAD
&lt;/code&gt;&lt;/pre&gt;
   &lt;br/&gt;
   &lt;p&gt;
    &lt;a href="#user-content-toc"&gt;
     TOC
    &lt;/a&gt;
   &lt;/p&gt;
   &lt;h3&gt;
    &lt;a aria-hidden="true" class="anchor" href="#remotes" id="user-content-remotes"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    &lt;a id="user-content-remotes"&gt;
    &lt;/a&gt;
    Remotes
   &lt;/h3&gt;
   &lt;h4&gt;
    &lt;a aria-hidden="true" class="anchor" href="#create-local-branch-then-push-to-the-remote-without-tracking-" id="user-content-create-local-branch-then-push-to-the-remote-without-tracking-"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Create local branch then push to the remote (without tracking !!!)
   &lt;/h4&gt;
   &lt;pre&gt;&lt;code&gt;    git checkout -b &amp;lt;branch_name&amp;gt;
    git push origin &amp;lt;branch_name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
   &lt;br/&gt;
   &lt;h4&gt;
    &lt;a aria-hidden="true" class="anchor" href="#crete-a-new-local-branch-by-pulling-a-remote-branch" id="user-content-crete-a-new-local-branch-by-pulling-a-remote-branch"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Crete a new local branch by pulling a remote branch
   &lt;/h4&gt;
   &lt;pre&gt;&lt;code&gt;    git pull origin &amp;lt;branch_name&amp;gt;                                 # without tracking
    git checkout --track -b &amp;lt;branch_name&amp;gt; origin/&amp;lt;branch_name&amp;gt;    # with tracking
&lt;/code&gt;&lt;/pre&gt;
   &lt;br/&gt;
   &lt;h4&gt;
    &lt;a aria-hidden="true" class="anchor" href="#track-a-remote-branch-with-an-existing-local" id="user-content-track-a-remote-branch-with-an-existing-local"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Track a remote branch with an existing local
   &lt;/h4&gt;
   &lt;pre&gt;&lt;code&gt;    git branch --set-upstream &amp;lt;branch_name&amp;gt; origin/&amp;lt;branch_name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
   &lt;br/&gt;
   &lt;h4&gt;
    &lt;a aria-hidden="true" class="anchor" href="#delete-remote-branch" id="user-content-delete-remote-branch"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Delete remote branch
   &lt;/h4&gt;
   &lt;pre&gt;&lt;code&gt;    git push origin :heads/&amp;lt;branch_name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
   &lt;br/&gt;
   &lt;p&gt;
    or
   &lt;/p&gt;
   &lt;pre&gt;&lt;code&gt;    git push origin :&amp;lt;branch_name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
   &lt;br/&gt;
   &lt;h4&gt;
    &lt;a aria-hidden="true" class="anchor" href="#prune-remote-tracking-branches-that-are-deleted-from-a-remote-repo" id="user-content-prune-remote-tracking-branches-that-are-deleted-from-a-remote-repo"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Prune remote-tracking branches that are deleted from a remote repo
   &lt;/h4&gt;
   &lt;pre&gt;&lt;code&gt;    git remote prune origin
&lt;/code&gt;&lt;/pre&gt;
   &lt;br/&gt;
   &lt;h4&gt;
    &lt;a aria-hidden="true" class="anchor" href="#change-remote-url" id="user-content-change-remote-url"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Change remote URL
   &lt;/h4&gt;
   &lt;pre&gt;&lt;code&gt;    git remote set-url origin http://new-example.com/repo.git
&lt;/code&gt;&lt;/pre&gt;
   &lt;br/&gt;
   &lt;h4&gt;
    &lt;a aria-hidden="true" class="anchor" href="#merge-upstream-from-fork-repo" id="user-content-merge-upstream-from-fork-repo"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Merge upstream from fork repo
   &lt;/h4&gt;
   &lt;pre&gt;&lt;code&gt;    git checkout master
    git pull https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY.git BRANCH_NAME
&lt;/code&gt;&lt;/pre&gt;
   &lt;br/&gt;
   &lt;h4&gt;
    &lt;a aria-hidden="true" class="anchor" href="#push-to-upstream-using-specified-ssh-key" id="user-content-push-to-upstream-using-specified-ssh-key"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Push to upstream using specified ssh-key
   &lt;/h4&gt;
   &lt;pre&gt;&lt;code&gt;    GIT_SSH_COMMAND='ssh -i ~/.ssh/yourprivatekey' git push --set-upstream origin develop
&lt;/code&gt;&lt;/pre&gt;
   &lt;br/&gt;
   &lt;p&gt;
    &lt;a href="#user-content-toc"&gt;
     TOC
    &lt;/a&gt;
   &lt;/p&gt;
   &lt;h3&gt;
    &lt;a aria-hidden="true" class="anchor" href="#submodules" id="user-content-submodules"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    &lt;a id="user-content-submodules"&gt;
    &lt;/a&gt;
    Submodules
   &lt;/h3&gt;
   &lt;pre&gt;&lt;code&gt;    # Add submodule to subdirectory
    git submodule add &amp;lt;git@github ...&amp;gt; snipmate-snippets/snippets/

    # update submodule
    git submodule update --recursive

    # Update submodules

    git submodule foreach 'git checkout master &amp;amp;&amp;amp; git pull origin master'

    # Update submodule's URL
    # Edit the *.gitmodules* file, then run:
    git submodule sync

    # Delete submodule
    git submodule deinit asubmodule
    git rm asubmodule

    # Note: asubmodule (no trailing slash)
    # or, if you want to leave it in your working tree
    git rm --cached asubmodule

    #Get submodule hash
    git ls-tree a9a796a [submodule_dir]
&lt;/code&gt;&lt;/pre&gt;
   &lt;br/&gt;
   &lt;p&gt;
    &lt;a href="#user-content-toc"&gt;
     TOC
    &lt;/a&gt;
   &lt;/p&gt;
   &lt;h4&gt;
    &lt;a aria-hidden="true" class="anchor" href="#migrate-from-bitbucket-to-github" id="user-content-migrate-from-bitbucket-to-github"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Migrate from bitbucket to github
   &lt;/h4&gt;
   &lt;pre&gt;&lt;code&gt;    cd &amp;lt;path_to_repo&amp;gt;
    git remote rename origin bitbucket
    git remote add origin &amp;lt;new_repo_url&amp;gt; # add the new origin
    git push -u origin --all # pushes up the repo and its refs for the first time
    git push -u origin --tags # pushes up any tags
&lt;/code&gt;&lt;/pre&gt;
   &lt;br/&gt;
   &lt;h4&gt;
    &lt;a aria-hidden="true" class="anchor" href="#rename-github-repo" id="user-content-rename-github-repo"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    Rename github repo
   &lt;/h4&gt;
   &lt;p&gt;
    Create a new git repo with the new name
   &lt;/p&gt;
   &lt;pre&gt;&lt;code&gt;    cd &amp;lt;path_to_repo&amp;gt;
    git remote rename origin old
    git remote add origin &amp;lt;new_repo_url&amp;gt;
    git push -u origin --all # pushes up the repo and its refs for the first time
    git push -u origin --tags # pushes up any tags
&lt;/code&gt;&lt;/pre&gt;
   &lt;br/&gt;
   &lt;h3&gt;
    &lt;a aria-hidden="true" class="anchor" href="#additional-resources" id="user-content-additional-resources"&gt;
     &lt;svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewbox="0 0 16 16" width="16"&gt;
      &lt;path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z" fill-rule="evenodd"&gt;
      &lt;/path&gt;
     &lt;/svg&gt;
    &lt;/a&gt;
    &lt;a id="user-content-additional-resources"&gt;
    &lt;/a&gt;
    Additional resources
   &lt;/h3&gt;
   &lt;ul&gt;
    &lt;li&gt;
     &lt;p&gt;
      &lt;a href="http://stackoverflow.com/questions/9529497/what-is-origin-in-git" rel="nofollow"&gt;
       What is origin in GIT
      &lt;/a&gt;
      - By saying
      &lt;code&gt;
       git push origin branchname
      &lt;/code&gt;
      you're saying to push to the origin repository. There's no requirement to name the remote repository origin, and there can be multiple remote repositories.
     &lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
     &lt;p&gt;
      &lt;a href="http://longair.net/blog/2009/04/16/git-fetch-and-merge/" rel="nofollow"&gt;
       Fetch and Merge
      &lt;/a&gt;
     &lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
     &lt;p&gt;
      &lt;a href="http://stackoverflow.com/questions/5683253/distributed-version-control-systems-and-the-enterprise-a-good-mix/5685757#5685757" rel="nofollow"&gt;
       Distributed Version Control Systems and the Enterprise
      &lt;/a&gt;
     &lt;/p&gt;
     &lt;ul&gt;
      &lt;li&gt;
       Explain how git fits into the enterprise environment
      &lt;/li&gt;
      &lt;li&gt;
       It seems that the only way to have fine-grained access control in git is to add another layer, such as
       &lt;code&gt;
        gitolite
       &lt;/code&gt;
      &lt;/li&gt;
     &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;
     &lt;p&gt;
      &lt;a href="http://stackoverflow.com/questions/1662205/how-to-make-a-git-repository-read-only" rel="nofollow"&gt;
       How to make a git repository read-only?
      &lt;/a&gt;
     &lt;/p&gt;
     &lt;ul&gt;
      &lt;li&gt;
       Seems that there's no way to limit read access at folder level.
      &lt;/li&gt;
     &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;
     &lt;p&gt;
      &lt;a href="http://stackoverflow.com/questions/2602546/how-do-i-git-fetch-and-git-merge-from-a-remote-tracking-branch-like-git-pu" rel="nofollow"&gt;
       Difference between git pull and fetch
      &lt;/a&gt;
     &lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
     &lt;p&gt;
      &lt;a href="http://scottchacon.com/2011/08/31/github-flow.html" rel="nofollow"&gt;
       Github flow
      &lt;/a&gt;
     &lt;/p&gt;
    &lt;/li&gt;
   &lt;/ul&gt;
   &lt;p&gt;
    &lt;a href="#user-content-toc"&gt;
     TOC
    &lt;/a&gt;
   &lt;/p&gt;
  &lt;/article&gt;
 &lt;/div&gt;
&lt;/div&gt;

            &lt;div class="git-meta"&gt;
                
                &lt;span&gt;Brought to you by me &lt;a href="https://github.com/minhhh/pelican_git"&gt;pelican_git&lt;/a&gt;.&lt;/span&gt;
                
                &lt;span style="float: right; color: #369;"&gt;&lt;a href="https://github.com/minhhh/git-manual/blob/master/README.md"&gt;view original&lt;/a&gt;&lt;/span&gt;
                &lt;span style="float: right; margin-right: 8px;"&gt;
                    &lt;a style="color: rgb(102, 102, 102);" href="https://github.com/minhhh/git-manual/blob/master/README.md"&gt;README.md&lt;/a&gt;&lt;/span&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;&lt;/p&gt;</summary><category term="git"></category></entry><entry><title>Creating this blog</title><link href="http://minhhh.github.io/posts/creating-this-blog" rel="alternate"></link><published>2014-06-07T00:00:00-04:00</published><updated>2014-06-07T00:00:00-04:00</updated><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2014-06-07:posts/creating-this-blog</id><summary type="html">&lt;p&gt;When creating this blog, I used the following references:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://ntanjerome.org/blog/how-to-setup-github-user-page-with-pelican"&gt;Setup github page with pelican&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://mathamy.com/migrating-to-github-pages-using-pelican.html"&gt;Migrating to github pages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.macdrifter.com/2012/08/pelican-guide-moving-from-wordpress-and-initial-setup.html"&gt;Pelican Guide initial setup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.macdrifter.com/2012/08/moving-to-pelican-design-planning.html"&gt;Moving to Pelican planning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/streeter/pelican-gist"&gt;pelican-gist&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/minhhh/gist-it"&gt;gist-it&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="pelican"></category><category term="blog"></category><category term="github"></category></entry></feed>