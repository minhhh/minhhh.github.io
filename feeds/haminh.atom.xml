<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Ha.Minh's Blog</title><link href="http://minhhh.github.io/" rel="alternate"></link><link href="http://minhhh.github.io/feeds/haminh.atom.xml" rel="self"></link><id>http://minhhh.github.io/</id><updated>2014-10-05T00:00:00-04:00</updated><entry><title>Awk tutorial</title><link href="http://minhhh.github.io/posts/awk-tutorial" rel="alternate"></link><updated>2014-10-05T00:00:00-04:00</updated><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2014-10-05:posts/awk-tutorial</id><summary type="html">&lt;p&gt;&lt;div&gt;
    &lt;style type = "text/css" scoped&gt;
.git-content div {
    padding: 0;
    margin: 0;
}

.git-content .git-file {
    border: 1px solid #DEDEDE;
    margin-bottom: 1em;
}

.git-content .git-file .git-meta {
    background-color: #EAEAEA;
    color: #666666;
    font-size: 85%;
    overflow: hidden;
    padding: 0.5em;
}

.git-content .git-file .git-meta a {
    color: #336699;
}

.git-content .git-file .git-meta a:visited {
    color: #773377;
}

.git-content .git-file {
    background-color: #F8F8FF;
    border-bottom: 1px solid #DDDDDD;
    font-size: 100%;
    overflow: auto;
    word-wrap: normal;
}

.git-content .git-file pre {
    background: none repeat scroll 0 0 transparent !important;
    border: medium none !important;
    margin: 0 !important;
    padding: 0 !important;
}
    &lt;/style&gt;
    &lt;div class="git-content"&gt;
        &lt;div class="git-file"&gt;
            &lt;div class="file"&gt;
 &lt;div class="blob instapaper_body" id="readme"&gt;
  &lt;article class="markdown-body entry-content" itemprop="mainContentOfPage"&gt;
   &lt;h1&gt;
    &lt;a aria-hidden="true" class="anchor" href="#awk-cheatsheet" name="user-content-awk-cheatsheet"&gt;
     &lt;span class="octicon octicon-link"&gt;
     &lt;/span&gt;
    &lt;/a&gt;
    AWK CHEATSHEET
   &lt;/h1&gt;
   &lt;h2&gt;
    &lt;a aria-hidden="true" class="anchor" href="#run" name="user-content-run"&gt;
     &lt;span class="octicon octicon-link"&gt;
     &lt;/span&gt;
    &lt;/a&gt;
    Run
   &lt;/h2&gt;
   &lt;p&gt;
    Call from command line
   &lt;/p&gt;
   &lt;div class="highlight highlight-bash"&gt;
    &lt;pre&gt;    awk &lt;span class="s1"&gt;'pattern1 {action1}&lt;/span&gt;
&lt;span class="s1"&gt;    pattern2 {action2} ...'&lt;/span&gt; file1 file2 ..
&lt;/pre&gt;
   &lt;/div&gt;
   &lt;p&gt;
    &lt;br/&gt;
   &lt;/p&gt;
   &lt;p&gt;
    Call a script
   &lt;/p&gt;
   &lt;div class="highlight highlight-bash"&gt;
    &lt;pre&gt;    awk -f script file1 file2 ...
&lt;/pre&gt;
   &lt;/div&gt;
   &lt;p&gt;
    &lt;br/&gt;
   &lt;/p&gt;
   &lt;p&gt;
    Call without input files
   &lt;/p&gt;
   &lt;div class="highlight highlight-bash"&gt;
    &lt;pre&gt;    awk &lt;span class="s1"&gt;'program'&lt;/span&gt;
&lt;/pre&gt;
   &lt;/div&gt;
   &lt;p&gt;
    &lt;br/&gt;
   &lt;/p&gt;
   &lt;h2&gt;
    &lt;a aria-hidden="true" class="anchor" href="#regular-expression" name="user-content-regular-expression"&gt;
     &lt;span class="octicon octicon-link"&gt;
     &lt;/span&gt;
    &lt;/a&gt;
    Regular expression
   &lt;/h2&gt;
   &lt;p&gt;
    Awk can use regular exrepssion as conditions
   &lt;/p&gt;
   &lt;div class="highlight highlight-bash"&gt;
    &lt;pre&gt;    awk &lt;span class="s1"&gt;'/foo/ {program}'&lt;/span&gt; file
&lt;/pre&gt;
   &lt;/div&gt;
   &lt;p&gt;
    &lt;br/&gt;
   &lt;/p&gt;
   &lt;p&gt;
    Awk supports Character class in POSIX standard such as [:alpha], [:alnum:]
   &lt;/p&gt;
   &lt;h3&gt;
    &lt;a aria-hidden="true" class="anchor" href="#case-sensitivity" name="user-content-case-sensitivity"&gt;
     &lt;span class="octicon octicon-link"&gt;
     &lt;/span&gt;
    &lt;/a&gt;
    Case sensitivity
   &lt;/h3&gt;
   &lt;p&gt;
    Either use function
    &lt;code&gt;
     tolower
    &lt;/code&gt;
   &lt;/p&gt;
   &lt;div class="highlight highlight-bash"&gt;
    &lt;pre&gt;    tolower&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; ~ /foo/ &lt;span class="o"&gt;{&lt;/span&gt;...&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;
   &lt;/div&gt;
   &lt;p&gt;
    &lt;br/&gt;
   &lt;/p&gt;
   &lt;p&gt;
    Or set variable
    &lt;code&gt;
     IGNORECASE
    &lt;/code&gt;
    to non-zero
   &lt;/p&gt;
   &lt;div class="highlight highlight-bash"&gt;
    &lt;pre&gt;    &lt;span class="nv"&gt;IGNORECASE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 1
&lt;/pre&gt;
   &lt;/div&gt;
   &lt;p&gt;
    &lt;br/&gt;
   &lt;/p&gt;
   &lt;h3&gt;
    &lt;a aria-hidden="true" class="anchor" href="#dynamic-regex" name="user-content-dynamic-regex"&gt;
     &lt;span class="octicon octicon-link"&gt;
     &lt;/span&gt;
    &lt;/a&gt;
    Dynamic regex
   &lt;/h3&gt;
   &lt;p&gt;
    Awk provides facility to define dynamic regular expressions
   &lt;/p&gt;
   &lt;div class="highlight highlight-bash"&gt;
    &lt;pre&gt;    BEGIN &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="nv"&gt;digits_regexp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"[[:digit:]]+"&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;
   &lt;/div&gt;
   &lt;p&gt;
    &lt;br/&gt;
   &lt;/p&gt;
   &lt;p&gt;
    You shouldn't use string constants for regex because it needs to be processed twice and hard to read.
   &lt;/p&gt;
   &lt;h3&gt;
    &lt;a aria-hidden="true" class="anchor" href="#startup-and-cleanup-actions" name="user-content-startup-and-cleanup-actions"&gt;
     &lt;span class="octicon octicon-link"&gt;
     &lt;/span&gt;
    &lt;/a&gt;
    Startup and cleanup actions
   &lt;/h3&gt;
   &lt;p&gt;
    In other words, do something even if there are no line to process
   &lt;/p&gt;
   &lt;div class="highlight highlight-bash"&gt;
    &lt;pre&gt;    awk &lt;span class="s1"&gt;'BEGIN {do something}'&lt;/span&gt;
&lt;/pre&gt;
   &lt;/div&gt;
   &lt;p&gt;
    &lt;br/&gt;
   &lt;/p&gt;
   &lt;p&gt;
    &lt;code&gt;
     END
    &lt;/code&gt;
    specifies command to do at the end of loop.
   &lt;/p&gt;
   &lt;h3&gt;
    &lt;a aria-hidden="true" class="anchor" href="#change-field-seperator" name="user-content-change-field-seperator"&gt;
     &lt;span class="octicon octicon-link"&gt;
     &lt;/span&gt;
    &lt;/a&gt;
    Change field seperator
   &lt;/h3&gt;
   &lt;p&gt;
    &lt;code&gt;
     awk -F:
    &lt;/code&gt;
    changes the field separator to colon.
   &lt;/p&gt;
   &lt;p&gt;
    Or it can be set in the BEGIN condition like this
   &lt;/p&gt;
   &lt;div class="highlight highlight-bash"&gt;
    &lt;pre&gt;    BEGIN &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;FS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"/"&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;
   &lt;/div&gt;
   &lt;p&gt;
    &lt;br/&gt;
   &lt;/p&gt;
   &lt;h3&gt;
    &lt;a aria-hidden="true" class="anchor" href="#quote-and-quoting" name="user-content-quote-and-quoting"&gt;
     &lt;span class="octicon octicon-link"&gt;
     &lt;/span&gt;
    &lt;/a&gt;
    Quote and quoting
   &lt;/h3&gt;
   &lt;p&gt;
    Awk support many standard escape sequence that can be use inside strings or regular expression
   &lt;/p&gt;
   &lt;p&gt;
    There are various way to escape single quote and double quotes.
   &lt;/p&gt;
   &lt;p&gt;
    Once nice way is to use octal escape:
    &lt;code&gt;
     \42
    &lt;/code&gt;
    is double quote and
    &lt;code&gt;
     \47
    &lt;/code&gt;
    is single quote.
   &lt;/p&gt;
   &lt;p&gt;
    &lt;code&gt;
     \xhh
    &lt;/code&gt;
    produces hexadecimal escape sequence
   &lt;/p&gt;
   &lt;h3&gt;
    &lt;a aria-hidden="true" class="anchor" href="#special-variables" name="user-content-special-variables"&gt;
     &lt;span class="octicon octicon-link"&gt;
     &lt;/span&gt;
    &lt;/a&gt;
    Special Variables
   &lt;/h3&gt;
   &lt;ul class="task-list"&gt;
    &lt;li&gt;
     &lt;code&gt;
      $0
     &lt;/code&gt;
     is the current line. $1 is the first field, $2 is the second field and so on
    &lt;/li&gt;
    &lt;li&gt;
     Note that $NR is the first field in the first record, second in the second one, and so on
    &lt;/li&gt;
    &lt;li&gt;
     $(2x2) is equivalent to $4
    &lt;/li&gt;
    &lt;li&gt;
     $5 = something when the line has fewer than 5 fields will create the 5th field and change both $0 and NF
    &lt;/li&gt;
    &lt;li&gt;
     you get the idea
    &lt;/li&gt;
    &lt;li&gt;
     To force awk to rebuild the record,
    &lt;/li&gt;
   &lt;/ul&gt;
   &lt;div class="highlight highlight-bash"&gt;
    &lt;pre&gt;    &lt;span class="nv"&gt;$1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;# force record to be rebuilt&lt;/span&gt;
&lt;/pre&gt;
   &lt;/div&gt;
   &lt;p&gt;
    &lt;br/&gt;
   &lt;/p&gt;
   &lt;ul class="task-list"&gt;
    &lt;li&gt;
     NF is the number of fields
    &lt;/li&gt;
    &lt;li&gt;
     $NF is the last field.
    &lt;/li&gt;
    &lt;li&gt;
     NR is the total of records read so far in all files.
    &lt;/li&gt;
    &lt;li&gt;
     FNR is the number of records read so far in the current input files. This should be used instead of NR.
    &lt;/li&gt;
    &lt;li&gt;
     RS is the record separator. It can be changed at BEGIN
    &lt;/li&gt;
    &lt;li&gt;
     ORS is the output record separator.
    &lt;/li&gt;
    &lt;li&gt;
     RT contains the actual text that match RS if RS is a regular expression. If RS is just a normal character, then RT and RS are the same.
    &lt;/li&gt;
    &lt;li&gt;
     FS is the field separator
     &lt;ul class="task-list"&gt;
      &lt;li&gt;
       FS can be specified at the beginning as well
      &lt;/li&gt;
     &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;
     OFS is output field separator
    &lt;/li&gt;
    &lt;li&gt;
     FIELDWIDTHS is a string that specifies field widths separated by spaces.
     &lt;ul class="task-list"&gt;
      &lt;li&gt;
       For instance
       &lt;code&gt;
        9 10 6 3 4 ...
       &lt;/code&gt;
      &lt;/li&gt;
      &lt;li&gt;
       If PROCINFO["FS"] "FS" then FS is being used, otherwise fixed width method is being used.
      &lt;/li&gt;
     &lt;/ul&gt;
    &lt;/li&gt;
   &lt;/ul&gt;
   &lt;h4&gt;
    &lt;a aria-hidden="true" class="anchor" href="#operators" name="user-content-operators"&gt;
     &lt;span class="octicon octicon-link"&gt;
     &lt;/span&gt;
    &lt;/a&gt;
    Operators
   &lt;/h4&gt;
   &lt;ul class="task-list"&gt;
    &lt;li&gt;
     &lt;code&gt;
      ~
     &lt;/code&gt;
     (tilde) used to match a string with a regular expression
    &lt;/li&gt;
   &lt;/ul&gt;
   &lt;div class="highlight highlight-bash"&gt;
    &lt;pre&gt;    &lt;span class="nv"&gt;$ &lt;/span&gt;awk &lt;span class="s1"&gt;'$1 ~ /J/'&lt;/span&gt; file
    &lt;span class="c"&gt;# matches line where the first field start with J&lt;/span&gt;
&lt;/pre&gt;
   &lt;/div&gt;
   &lt;p&gt;
    &lt;br/&gt;
   &lt;/p&gt;
   &lt;ul class="task-list"&gt;
    &lt;li&gt;
     &lt;code&gt;
      !~
     &lt;/code&gt;
     not match regular expression
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      ==
     &lt;/code&gt;
     is the equal operator
    &lt;/li&gt;
   &lt;/ul&gt;
   &lt;h3&gt;
    &lt;a aria-hidden="true" class="anchor" href="#useful-functions" name="user-content-useful-functions"&gt;
     &lt;span class="octicon octicon-link"&gt;
     &lt;/span&gt;
    &lt;/a&gt;
    Useful functions
   &lt;/h3&gt;
   &lt;ul class="task-list"&gt;
    &lt;li&gt;
     length() returns the string length.
    &lt;/li&gt;
    &lt;li&gt;
     substr(s, m, n) produces substring of s beginning at position m and with length n
    &lt;/li&gt;
    &lt;li&gt;
     tolower(s) , toupper(s) transform text s to all lower or upper cases
    &lt;/li&gt;
    &lt;li&gt;
     sub("something", "withsomething")
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      getline
     &lt;/code&gt;
     read the next line from input, returns 1 if it finds a record, 0 if end of file and -1 if there are any errors.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      getline tmp
     &lt;/code&gt;
     reads the next line from input to a variable named
     &lt;code&gt;
      tmp
     &lt;/code&gt;
     , the variable
     &lt;code&gt;
      $0
     &lt;/code&gt;
     is not affected by this getline. This function allows to skip one line ahead.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      getlines var &amp;lt; 'file'
     &lt;/code&gt;
     reads the next line from file to a variable named
     &lt;code&gt;
      var
     &lt;/code&gt;
    &lt;/li&gt;
   &lt;/ul&gt;
   &lt;div class="highlight highlight-bash"&gt;
    &lt;pre&gt;    &lt;span class="c"&gt;# The following code copies all input files to the output, except for records that say @include filename&lt;/span&gt;
    &lt;span class="c"&gt;# in this case it will replace such records with the content of the file `filename`&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;NF &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nv"&gt;$1&lt;/span&gt; &lt;span class="s2"&gt;"@include"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="o"&gt;((&lt;/span&gt;getline line &amp;lt; &lt;span class="nv"&gt;$2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &amp;gt; 0&lt;span class="o"&gt;)&lt;/span&gt;
            print line
        close&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt;
        print
&lt;/pre&gt;
   &lt;/div&gt;
   &lt;p&gt;
    &lt;br/&gt;
   &lt;/p&gt;
   &lt;ul class="task-list"&gt;
    &lt;li&gt;
     &lt;code&gt;
      command | getline
     &lt;/code&gt;
     . In this case the string
     &lt;code&gt;
      command
     &lt;/code&gt;
     is run as a shell command and its output is piped to getline
    &lt;/li&gt;
   &lt;/ul&gt;
   &lt;div class="highlight highlight-bash"&gt;
    &lt;pre&gt;    &lt;span class="c"&gt;# line begins with @execute is replaced by the output of the command after that&lt;/span&gt;
    &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt; &lt;span class="s2"&gt;"@execute"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="nv"&gt;tmp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; substr&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$0&lt;/span&gt;, 10&lt;span class="o"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="o"&gt;((&lt;/span&gt;tmp &lt;span class="p"&gt;|&lt;/span&gt; getline&lt;span class="o"&gt;)&lt;/span&gt; &amp;gt; 0&lt;span class="o"&gt;)&lt;/span&gt;
                print
            close&lt;span class="o"&gt;(&lt;/span&gt;tmp&lt;span class="o"&gt;)&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt;
            print
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;
   &lt;/div&gt;
   &lt;p&gt;
    &lt;br/&gt;
   &lt;/p&gt;
   &lt;ul class="task-list"&gt;
    &lt;li&gt;
     &lt;code&gt;
      command | getline var
     &lt;/code&gt;
     , the output of
     &lt;code&gt;
      commands
     &lt;/code&gt;
     is sent through a pipe to getline and into variable
     &lt;code&gt;
      var
     &lt;/code&gt;
     .
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      print "some query" |&amp;amp; "db_server"
     &lt;/code&gt;
     sends a query to a process. (This maybe useful but we don't use it yet)
    &lt;/li&gt;
    &lt;li&gt;
     Mathematical functions such as: sqrt(), atan2(), rand(). TODO
     &lt;ul class="task-list"&gt;
      &lt;li&gt;
       DO NOT put a space between the function name and the parentheses. It can be confused with string concatenation
      &lt;/li&gt;
      &lt;li&gt;
       Operator precedence. TODO
      &lt;/li&gt;
     &lt;/ul&gt;
    &lt;/li&gt;
   &lt;/ul&gt;
   &lt;h3&gt;
    &lt;a aria-hidden="true" class="anchor" href="#printing-and-output" name="user-content-printing-and-output"&gt;
     &lt;span class="octicon octicon-link"&gt;
     &lt;/span&gt;
    &lt;/a&gt;
    Printing and output
   &lt;/h3&gt;
   &lt;ul class="task-list"&gt;
    &lt;li&gt;
     print something, something, ...
    &lt;/li&gt;
    &lt;li&gt;
     printf "format string", something, something .... Similar to C printf function
    &lt;/li&gt;
    &lt;li&gt;
     OMFT contains the default format specification when print converts a number to a string
    &lt;/li&gt;
    &lt;li&gt;
     OFS and ORS do not have any effects on printf
    &lt;/li&gt;
    &lt;li&gt;
     The print and printf function can be redirected just as in the shell
     &lt;ul class="task-list"&gt;
      &lt;li&gt;
       print items &amp;gt; file
      &lt;/li&gt;
      &lt;li&gt;
       print items &amp;gt;&amp;gt; file
      &lt;/li&gt;
      &lt;li&gt;
       print items | command
      &lt;/li&gt;
      &lt;li&gt;
       print items |&amp;amp; command: the output from command can be read with
       &lt;code&gt;
        getline
       &lt;/code&gt;
      &lt;/li&gt;
      &lt;li&gt;
       Some version of awk only allows one open pipe , so we can call print items &amp;gt; file multiple times to append more items to the file, unlike in the shell where we have to use &amp;gt;&amp;gt; the second time onwards.
      &lt;/li&gt;
     &lt;/ul&gt;
    &lt;/li&gt;
   &lt;/ul&gt;
   &lt;h3&gt;
    &lt;a aria-hidden="true" class="anchor" href="#standard-descriptors" name="user-content-standard-descriptors"&gt;
     &lt;span class="octicon octicon-link"&gt;
     &lt;/span&gt;
    &lt;/a&gt;
    Standard descriptors
   &lt;/h3&gt;
   &lt;ul class="task-list"&gt;
    &lt;li&gt;
     Gawk supports special filenames for standard input, output and error streams
     &lt;ul class="task-list"&gt;
      &lt;li&gt;
       /dev/stdin
      &lt;/li&gt;
      &lt;li&gt;
       /dev/stdout
      &lt;/li&gt;
      &lt;li&gt;
       /dev/stderr
      &lt;/li&gt;
      &lt;li&gt;
       /dev/fd/N : file associated with descriptor N.
      &lt;/li&gt;
     &lt;/ul&gt;
    &lt;/li&gt;
   &lt;/ul&gt;
   &lt;div class="highlight highlight-bash"&gt;
    &lt;pre&gt;    print &lt;span class="s2"&gt;"serious error detected "&lt;/span&gt; &amp;gt; &lt;span class="s2"&gt;"/dev/stderr"&lt;/span&gt;
&lt;/pre&gt;
   &lt;/div&gt;
   &lt;p&gt;
    &lt;br/&gt;
   &lt;/p&gt;
   &lt;h3&gt;
    &lt;a aria-hidden="true" class="anchor" href="#special-files-for-process-related-information" name="user-content-special-files-for-process-related-information"&gt;
     &lt;span class="octicon octicon-link"&gt;
     &lt;/span&gt;
    &lt;/a&gt;
    Special files for process-related information
   &lt;/h3&gt;
   &lt;ul class="task-list"&gt;
    &lt;li&gt;
     Gwak supports special file for accessing information about the running gawk process. TODO
    &lt;/li&gt;
   &lt;/ul&gt;
   &lt;h3&gt;
    &lt;a aria-hidden="true" class="anchor" href="#special-files-for-network-communication" name="user-content-special-files-for-network-communication"&gt;
     &lt;span class="octicon octicon-link"&gt;
     &lt;/span&gt;
    &lt;/a&gt;
    Special files for network communication
   &lt;/h3&gt;
   &lt;ul class="task-list"&gt;
    &lt;li&gt;
     Gawk, awk can open two-way TCP-IP connection. TODO
    &lt;/li&gt;
   &lt;/ul&gt;
   &lt;h3&gt;
    &lt;a aria-hidden="true" class="anchor" href="#close-input-and-output-redirection" name="user-content-close-input-and-output-redirection"&gt;
     &lt;span class="octicon octicon-link"&gt;
     &lt;/span&gt;
    &lt;/a&gt;
    Close input and output redirection
   &lt;/h3&gt;
   &lt;ul class="task-list"&gt;
    &lt;li&gt;
     &lt;code&gt;
      close(filename)
     &lt;/code&gt;
     or
     &lt;code&gt;
      close(command)
     &lt;/code&gt;
     close the input or output redirection pipe
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      filename
     &lt;/code&gt;
     or
     &lt;code&gt;
      command
     &lt;/code&gt;
     must
     &lt;code&gt;
      exactly match
     &lt;/code&gt;
    &lt;/li&gt;
   &lt;/ul&gt;
   &lt;h3&gt;
    &lt;a aria-hidden="true" class="anchor" href="#piping-to-sh" name="user-content-piping-to-sh"&gt;
     &lt;span class="octicon octicon-link"&gt;
     &lt;/span&gt;
    &lt;/a&gt;
    Piping to sh
   &lt;/h3&gt;
   &lt;p&gt;
    A good way to build command line and execute them in the shell is to pipe them to
    &lt;code&gt;
     sh
    &lt;/code&gt;
   &lt;/p&gt;
   &lt;div class="highlight highlight-bash"&gt;
    &lt;pre&gt;    &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="nb"&gt;printf&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"mv %s %s\n"&lt;/span&gt;, &lt;span class="nv"&gt;$0&lt;/span&gt;, tolower&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$0&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="s2"&gt;"sh"&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
    END &lt;span class="o"&gt;{&lt;/span&gt;close&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"sh"&lt;/span&gt;&lt;span class="o"&gt;)}&lt;/span&gt;
&lt;/pre&gt;
   &lt;/div&gt;
   &lt;p&gt;
    &lt;br/&gt;
   &lt;/p&gt;
   &lt;h3&gt;
    &lt;a aria-hidden="true" class="anchor" href="#change-the-content-of-a-field" name="user-content-change-the-content-of-a-field"&gt;
     &lt;span class="octicon octicon-link"&gt;
     &lt;/span&gt;
    &lt;/a&gt;
    Change the content of a field
   &lt;/h3&gt;
   &lt;ul class="task-list"&gt;
    &lt;li&gt;
     The content of a field can be change during processing , like this
    &lt;/li&gt;
   &lt;/ul&gt;
   &lt;div class="highlight highlight-bash"&gt;
    &lt;pre&gt;    awk &lt;span class="s1"&gt;'{$2=$2-10; print $0}'&lt;/span&gt;
    &lt;span class="c"&gt;# will subtract 10 from the second field, and the second field should be&lt;/span&gt;
    &lt;span class="c"&gt;# a number for this to work.&lt;/span&gt;
&lt;/pre&gt;
   &lt;/div&gt;
   &lt;p&gt;
    &lt;br/&gt;
   &lt;/p&gt;
   &lt;h4&gt;
    &lt;a aria-hidden="true" class="anchor" href="#variables" name="user-content-variables"&gt;
     &lt;span class="octicon octicon-link"&gt;
     &lt;/span&gt;
    &lt;/a&gt;
    Variables
   &lt;/h4&gt;
   &lt;ul class="task-list"&gt;
    &lt;li&gt;
     Custom variables can be created and default to zero
    &lt;/li&gt;
   &lt;/ul&gt;
   &lt;div class="highlight highlight-bash"&gt;
    &lt;pre&gt;    &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"hello"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;
   &lt;/div&gt;
   &lt;p&gt;
    &lt;br/&gt;
   &lt;/p&gt;
   &lt;ul class="task-list"&gt;
    &lt;li&gt;
     Variables can be assigned in the command line. TODO:
    &lt;/li&gt;
    &lt;li&gt;
     Strings and number conversions. TODO
    &lt;/li&gt;
    &lt;li&gt;
     Arithmetic Operators. TODO
    &lt;/li&gt;
    &lt;li&gt;
     String concatenation is done by placing the operands next to each other
     &lt;ul class="task-list"&gt;
      &lt;li&gt;
       &lt;code&gt;
        ()
       &lt;/code&gt;
       should be used around concatenation in all but the most common context
      &lt;/li&gt;
     &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;
     True and false in awk. Zero and null string is false, other values are true.
    &lt;/li&gt;
    &lt;li&gt;
     Boolean expressions:
     &lt;code&gt;
      !
     &lt;/code&gt;
     ,
     &lt;code&gt;
      &amp;amp;&amp;amp;
     &lt;/code&gt;
     and
     &lt;code&gt;
      ||
     &lt;/code&gt;
     . Tenary operator
     &lt;code&gt;
      condition?expression1:expression2
     &lt;/code&gt;
    &lt;/li&gt;
   &lt;/ul&gt;
   &lt;h3&gt;
    &lt;a aria-hidden="true" class="anchor" href="#patterns" name="user-content-patterns"&gt;
     &lt;span class="octicon octicon-link"&gt;
     &lt;/span&gt;
    &lt;/a&gt;
    Patterns
   &lt;/h3&gt;
   &lt;ul class="task-list"&gt;
    &lt;li&gt;
     Patterns control the execution of rules, a rule is executed when its pattern matches the current input record (line).
    &lt;/li&gt;
    &lt;li&gt;
     &lt;code&gt;
      Record range
     &lt;/code&gt;
     is specified in the form
     &lt;code&gt;
      beginpatter, endpattern
     &lt;/code&gt;
     . Every record between inclusive is processed.
     &lt;ul class="task-list"&gt;
      &lt;li&gt;
       The range pattern can be turned on and off by the same record.
      &lt;/li&gt;
      &lt;li&gt;
       Range pattern cannot be combined with other patterns.
      &lt;/li&gt;
     &lt;/ul&gt;
    &lt;/li&gt;
   &lt;/ul&gt;
   &lt;h3&gt;
    &lt;a aria-hidden="true" class="anchor" href="#control-statements" name="user-content-control-statements"&gt;
     &lt;span class="octicon octicon-link"&gt;
     &lt;/span&gt;
    &lt;/a&gt;
    Control Statements
   &lt;/h3&gt;
   &lt;p&gt;
    if-else
   &lt;/p&gt;
   &lt;div class="highlight highlight-bash"&gt;
    &lt;pre&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;x % &lt;span class="m"&gt;2&lt;/span&gt; 0&lt;span class="o"&gt;)&lt;/span&gt;
        print &lt;span class="s2"&gt;"x is even"&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
        print &lt;span class="s2"&gt;"x is odd"&lt;/span&gt;
&lt;/pre&gt;
   &lt;/div&gt;
   &lt;p&gt;
    &lt;br/&gt;
   &lt;/p&gt;
   &lt;p&gt;
    while
   &lt;/p&gt;
   &lt;div class="highlight highlight-bash"&gt;
    &lt;pre&gt;    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;i &amp;lt;&lt;span class="o"&gt;=&lt;/span&gt; 3&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        print &lt;span class="nv"&gt;$i&lt;/span&gt;
        i++
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;
   &lt;/div&gt;
   &lt;p&gt;
    &lt;br/&gt;
   &lt;/p&gt;
   &lt;p&gt;
    do while
   &lt;/p&gt;
   &lt;div class="highlight highlight-bash"&gt;
    &lt;pre&gt;    &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        print &lt;span class="nv"&gt;$0&lt;/span&gt;
        i++
    &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;i &amp;lt;&lt;span class="o"&gt;=&lt;/span&gt; 10&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;
   &lt;/div&gt;
   &lt;p&gt;
    &lt;br/&gt;
   &lt;/p&gt;
   &lt;p&gt;
    for
   &lt;/p&gt;
   &lt;div class="highlight highlight-bash"&gt;
    &lt;pre&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 1&lt;span class="p"&gt;;&lt;/span&gt; i &amp;lt;&lt;span class="o"&gt;=&lt;/span&gt; 3&lt;span class="p"&gt;;&lt;/span&gt; i++&lt;span class="o"&gt;)&lt;/span&gt;
        print &lt;span class="nv"&gt;$i&lt;/span&gt;
&lt;/pre&gt;
   &lt;/div&gt;
   &lt;p&gt;
    &lt;br/&gt;
   &lt;/p&gt;
   &lt;p&gt;
    switch: break
   &lt;/p&gt;
   &lt;div class="highlight highlight-bash"&gt;
    &lt;pre&gt;    switch &lt;span class="o"&gt;(&lt;/span&gt;NR * &lt;span class="m"&gt;2&lt;/span&gt; + 1&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; 3:
        &lt;span class="nb"&gt;break&lt;/span&gt;
&lt;span class="nb"&gt;    &lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="s2"&gt;"11"&lt;/span&gt;:
        print NR - 1
        &lt;span class="nb"&gt;break&lt;/span&gt;
&lt;span class="nb"&gt;    &lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt; /2&lt;span class="o"&gt;[[&lt;/span&gt;:digit:&lt;span class="o"&gt;]]&lt;/span&gt;+/:
        print NR
        &lt;span class="nb"&gt;break&lt;/span&gt;
&lt;span class="nb"&gt;    &lt;/span&gt;default:
        print NR + 1
        &lt;span class="nb"&gt;break&lt;/span&gt;
&lt;span class="nb"&gt;    &lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt; -1:
        print NR * -1
        &lt;span class="nb"&gt;break&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;
   &lt;/div&gt;
   &lt;p&gt;
    &lt;br/&gt;
   &lt;/p&gt;
   &lt;p&gt;
    switch: continue
   &lt;/p&gt;
   &lt;div class="highlight highlight-bash"&gt;
    &lt;pre&gt;    BEGIN &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 0&lt;span class="p"&gt;;&lt;/span&gt; x &amp;lt;&lt;span class="o"&gt;=&lt;/span&gt; 20&lt;span class="p"&gt;;&lt;/span&gt; x++&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;x 5&lt;span class="o"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;continue&lt;/span&gt;
            &lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s2"&gt;"%d "&lt;/span&gt;, x
        &lt;span class="o"&gt;}&lt;/span&gt;
        print &lt;span class="s2"&gt;""&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;
   &lt;/div&gt;
   &lt;p&gt;
    &lt;br/&gt;
   &lt;/p&gt;
   &lt;ul class="task-list"&gt;
    &lt;li&gt;
     next: stop processing the current record and go on to the next record
    &lt;/li&gt;
    &lt;li&gt;
     nextfile : stop processing the current file and go on to the next file
    &lt;/li&gt;
    &lt;li&gt;
     exit n: stops execution for the current rule and execute the END rule if any.
    &lt;/li&gt;
   &lt;/ul&gt;
   &lt;div class="highlight highlight-bash"&gt;
    &lt;pre&gt;    BEGIN &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="s2"&gt;"date"&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; getline date_now&lt;span class="o"&gt;)&lt;/span&gt; &amp;lt;&lt;span class="o"&gt;=&lt;/span&gt; 0&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    print &lt;span class="s2"&gt;"Can’t get system date"&lt;/span&gt; &amp;gt; &lt;span class="s2"&gt;"/dev/stderr"&lt;/span&gt;
    &lt;span class="nb"&gt;exit &lt;/span&gt;1
    &lt;span class="o"&gt;}&lt;/span&gt;
    print &lt;span class="s2"&gt;"current date is"&lt;/span&gt;, date_now
    close&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"date"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;
   &lt;/div&gt;
   &lt;p&gt;
    &lt;br/&gt;
   &lt;/p&gt;
   &lt;h3&gt;
    &lt;a aria-hidden="true" class="anchor" href="#functions" name="user-content-functions"&gt;
     &lt;span class="octicon octicon-link"&gt;
     &lt;/span&gt;
    &lt;/a&gt;
    Functions
   &lt;/h3&gt;
   &lt;ul class="task-list"&gt;
    &lt;li&gt;
     Controlling output buffering with
     &lt;code&gt;
      system
     &lt;/code&gt;
     &lt;ul class="task-list"&gt;
      &lt;li&gt;
       Use
       &lt;code&gt;
        system("")
       &lt;/code&gt;
       to fflush output buffering instead of
       &lt;code&gt;
        fflush
       &lt;/code&gt;
      &lt;/li&gt;
     &lt;/ul&gt;
    &lt;/li&gt;
   &lt;/ul&gt;
   &lt;h1&gt;
    &lt;a aria-hidden="true" class="anchor" href="#howtos" name="user-content-howtos"&gt;
     &lt;span class="octicon octicon-link"&gt;
     &lt;/span&gt;
    &lt;/a&gt;
    HOWTOS
   &lt;/h1&gt;
   &lt;h2&gt;
    &lt;a aria-hidden="true" class="anchor" href="#how-to-remove-special-characters-from-files" name="user-content-how-to-remove-special-characters-from-files"&gt;
     &lt;span class="octicon octicon-link"&gt;
     &lt;/span&gt;
    &lt;/a&gt;
    How to remove special characters from files
   &lt;/h2&gt;
   &lt;ul class="task-list"&gt;
    &lt;li&gt;
     Suppose you have a list of files starting with a certain number of special character that you want to remove
    &lt;/li&gt;
    &lt;li&gt;
     The idea is to generate the new file name for each of the files then use the
     &lt;code&gt;
      mv
     &lt;/code&gt;
     or
     &lt;code&gt;
      rename
     &lt;/code&gt;
     command to change the orginal file name
    &lt;/li&gt;
    &lt;li&gt;
     First, export the list of filenames to a first file test1
    &lt;/li&gt;
   &lt;/ul&gt;
   &lt;div class="highlight highlight-bash"&gt;
    &lt;pre&gt;    &lt;span class="c"&gt;# Suppose that the original files are in folder original_files and we want to copy them to&lt;/span&gt;
    &lt;span class="c"&gt;# folder new_files&lt;/span&gt;
    ls original_files &amp;gt; list1 &lt;span class="c"&gt;# generate list of files&lt;/span&gt;
    awk &lt;span class="s1"&gt;'{gsub(/[^a-zA-Z0-9 .]/, "", $0); print;}'&lt;/span&gt; list1 &amp;gt; list2 &lt;span class="c"&gt;# removes all special characters and generate a second list&lt;/span&gt;

    &lt;span class="c"&gt;# combine list1 and list2 to a list of shell command in list3&lt;/span&gt;
    &lt;span class="c"&gt;# We will use strong quoting&lt;/span&gt;
    awk &lt;span class="s1"&gt;'{gsub(/\47/, "\47\\\47\47", $0); str = $0; getline &amp;lt; "list2"; print "cp -f \47original_files/"str "\47 \47new_files/"$0"\47" &amp;gt; "list3";}'&lt;/span&gt; list1

    sh list3 &lt;span class="c"&gt;# run the list of commands in list3&lt;/span&gt;
    rm -frv list1 list2 list3 &lt;span class="c"&gt;# remove all temporary files&lt;/span&gt;
&lt;/pre&gt;
   &lt;/div&gt;
   &lt;p&gt;
    &lt;br/&gt;
   &lt;/p&gt;
   &lt;h2&gt;
    &lt;a aria-hidden="true" class="anchor" href="#make-each-character-a-separate-field" name="user-content-make-each-character-a-separate-field"&gt;
     &lt;span class="octicon octicon-link"&gt;
     &lt;/span&gt;
    &lt;/a&gt;
    Make each character a separate field
   &lt;/h2&gt;
   &lt;ul class="task-list"&gt;
    &lt;li&gt;
     By changing the field separtor to null string
    &lt;/li&gt;
   &lt;/ul&gt;
   &lt;div class="highlight highlight-bash"&gt;
    &lt;pre&gt;    BEGIN &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;FS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;
   &lt;/div&gt;
   &lt;p&gt;
    &lt;br/&gt;
   &lt;/p&gt;
   &lt;h1&gt;
    &lt;a aria-hidden="true" class="anchor" href="#books" name="user-content-books"&gt;
     &lt;span class="octicon octicon-link"&gt;
     &lt;/span&gt;
    &lt;/a&gt;
    BOOKS
   &lt;/h1&gt;
   &lt;ul class="task-list"&gt;
    &lt;li&gt;
     &lt;a href="http://www.gnu.org/software/gawk/manual/gawk.pdf"&gt;
      Gwak Effective awk programming
     &lt;/a&gt;
     - Free book, great for understanding details about awk and gawk programming.
    &lt;/li&gt;
    &lt;li&gt;
     &lt;a href="http://gregable.com/2010/09/why-you-should-know-just-little-awk.html"&gt;
      Why you should learn just a little Awk - An Awk Tutorial by Example
     &lt;/a&gt;
    &lt;/li&gt;
   &lt;/ul&gt;
   &lt;h1&gt;
    &lt;a aria-hidden="true" class="anchor" href="#articles" name="user-content-articles"&gt;
     &lt;span class="octicon octicon-link"&gt;
     &lt;/span&gt;
    &lt;/a&gt;
    ARTICLES
   &lt;/h1&gt;
   &lt;ul class="task-list"&gt;
    &lt;li&gt;
     &lt;a href="http://www.differencebetween.net/technology/software-technology/difference-between-gawk-and-awk/"&gt;
      Differences between different versions of awk
     &lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
     &lt;a href="http://www.thegeekstuff.com/2011/06/awk-nawk-gawk/"&gt;
      http://www.thegeekstuff.com/2011/06/awk-nawk-gawk/
     &lt;/a&gt;
     .
    &lt;/li&gt;
   &lt;/ul&gt;
  &lt;/article&gt;
 &lt;/div&gt;
&lt;/div&gt;

            &lt;div class="git-meta"&gt;
                
                &lt;span&gt;Brought to you by &lt;a href="https://github.com/minhhh/pelican-git"&gt;pelican_git&lt;/a&gt;.&lt;/span&gt;
                
                &lt;span style="float: right; color: #369;"&gt;&lt;a href="https://github.com/minhhh/wiki/blob/master/awk.md"&gt;view original&lt;/a&gt;&lt;/span&gt;
                &lt;span style="float: right; margin-right: 8px;"&gt;
                    &lt;a style="color: rgb(102, 102, 102);" href="https://github.com/minhhh/wiki/blob/master/awk.md"&gt;awk.md&lt;/a&gt;&lt;/span&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;&lt;/p&gt;</summary><category term="awk"></category><category term="cli"></category></entry><entry><title>Python decorator tutorial</title><link href="http://minhhh.github.io/posts/python-decorator-tutorial" rel="alternate"></link><updated>2014-10-05T00:00:00-04:00</updated><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2014-10-05:posts/python-decorator-tutorial</id><summary type="html">&lt;p&gt;&lt;div&gt;
    &lt;style type = "text/css" scoped&gt;
.git-content div {
    padding: 0;
    margin: 0;
}

.git-content .git-file {
    border: 1px solid #DEDEDE;
    margin-bottom: 1em;
}

.git-content .git-file .git-meta {
    background-color: #EAEAEA;
    color: #666666;
    font-size: 85%;
    overflow: hidden;
    padding: 0.5em;
}

.git-content .git-file .git-meta a {
    color: #336699;
}

.git-content .git-file .git-meta a:visited {
    color: #773377;
}

.git-content .git-file {
    background-color: #F8F8FF;
    border-bottom: 1px solid #DDDDDD;
    font-size: 100%;
    overflow: auto;
    word-wrap: normal;
}

.git-content .git-file pre {
    background: none repeat scroll 0 0 transparent !important;
    border: medium none !important;
    margin: 0 !important;
    padding: 0 !important;
}
    &lt;/style&gt;
    &lt;div class="git-content"&gt;
        &lt;div class="git-file"&gt;
            &lt;div class="file"&gt;
 &lt;div class="blob instapaper_body" id="readme"&gt;
  &lt;article class="markdown-body entry-content" itemprop="mainContentOfPage"&gt;
   &lt;h1&gt;
    &lt;a aria-hidden="true" class="anchor" href="#python-decorator-tutorial" name="user-content-python-decorator-tutorial"&gt;
     &lt;span class="octicon octicon-link"&gt;
     &lt;/span&gt;
    &lt;/a&gt;
    PYTHON DECORATOR TUTORIAL
   &lt;/h1&gt;
   &lt;p&gt;
    Decorators are a powerful tool for getting rid of code duplication, aka following DRY principle. It also helps with standardization of code in a project without forcing developers to remember predefined snippets or patters. In this tutorial, we'll discover how to create and use them.
   &lt;/p&gt;
   &lt;p&gt;
    Another important point to note is I'm aiming for practical value of the decorators so there will be no
    &lt;code&gt;
     foo
    &lt;/code&gt;
    ,
    &lt;code&gt;
     bar
    &lt;/code&gt;
    examples, all examples must solve real world problem and/or taken from good source.
   &lt;/p&gt;
   &lt;h2&gt;
    &lt;a aria-hidden="true" class="anchor" href="#first-level" name="user-content-first-level"&gt;
     &lt;span class="octicon octicon-link"&gt;
     &lt;/span&gt;
    &lt;/a&gt;
    First level
   &lt;/h2&gt;
   &lt;p&gt;
    We all know memoization and probably implement it as a function that takes an arbitrary function and return a memoized function:
   &lt;/p&gt;
   &lt;div class="highlight highlight-python"&gt;
    &lt;pre&gt;    &lt;span class="n"&gt;memoized_factorial&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;construct_memoize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;factorial&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
   &lt;/div&gt;
   &lt;p&gt;
    &lt;br/&gt;
   &lt;/p&gt;
   &lt;p&gt;
    This is extremely cumbersome if
    &lt;code&gt;
     factorial
    &lt;/code&gt;
    is a method of some class because then we have to use temporary variable to store the memoized function and somehow reassign it to the method. We want some way to elegantly do all the manual things to make a memoized version of a function, this is where
    &lt;code&gt;
     decorator
    &lt;/code&gt;
    comes in.
   &lt;/p&gt;
   &lt;p&gt;
    In its simplest form, a decorator is a function that takes the original function and returns a
    &lt;code&gt;
     decorated function
    &lt;/code&gt;
   &lt;/p&gt;
   &lt;div class="highlight highlight-python"&gt;
    &lt;pre&gt;    &lt;span class="n"&gt;cache_obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;inner&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;global&lt;/span&gt; &lt;span class="n"&gt;cache_obj&lt;/span&gt;
            &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;cache_obj&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;cache_obj&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;"Get from cache {}"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;cache_obj&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;inner&lt;/span&gt;

    &lt;span class="nd"&gt;@cache&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;"""Sum 2 numbers&lt;/span&gt;
&lt;span class="sd"&gt;        """&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;/pre&gt;
   &lt;/div&gt;
   &lt;p&gt;
    &lt;br/&gt;
   &lt;/p&gt;
   &lt;p&gt;
    The
    &lt;code&gt;
     @
    &lt;/code&gt;
    is a special syntax that applies the decorator function to the underneath function or class. Here,
    &lt;code&gt;
     cache(func)
    &lt;/code&gt;
    is called, passing original
    &lt;code&gt;
     func
    &lt;/code&gt;
    to the decorator, then replace
    &lt;code&gt;
     func
    &lt;/code&gt;
    with whatever function is returned from
    &lt;code&gt;
     cache(func)
    &lt;/code&gt;
    .
   &lt;/p&gt;
   &lt;p&gt;
    Using global cache object
    &lt;code&gt;
     cache_obj
    &lt;/code&gt;
    is not a great idea, because different functions can have the same arguments, then your cache is overwritten. It's better to assign the cache object directly to the original function
   &lt;/p&gt;
   &lt;div class="highlight highlight-python"&gt;
    &lt;pre&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;memoize_2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="nb"&gt;hasattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'cache'&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cache&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;inner&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;"Get from cache {}"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;inner&lt;/span&gt;

    &lt;span class="nd"&gt;@memoize_2&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;multiply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;"""Multiply 2 numbers&lt;/span&gt;
&lt;span class="sd"&gt;        """&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;

    &lt;span class="n"&gt;multiply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;multiply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
   &lt;/div&gt;
   &lt;p&gt;
    &lt;br/&gt;
   &lt;/p&gt;
   &lt;p&gt;
    This decorator is nice, but in practice nobody does this, and it's too bad that a lot of tutorials keep giving these non-working examples. The reason is the new decorated function lose all its original information such as name, docstring, module name and so on.
   &lt;/p&gt;
   &lt;div class="highlight highlight-python"&gt;
    &lt;pre&gt;    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;multiply&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__doc__&lt;/span&gt; &lt;span class="c"&gt;# None&lt;/span&gt;
&lt;/pre&gt;
   &lt;/div&gt;
   &lt;p&gt;
    &lt;br/&gt;
   &lt;/p&gt;
   &lt;p&gt;
    To keep these information, we use
    &lt;code&gt;
     functools.wrapper
    &lt;/code&gt;
   &lt;/p&gt;
   &lt;div class="highlight highlight-python"&gt;
    &lt;pre&gt;    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;functools&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;memoize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nd"&gt;@functools.wraps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;inner&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="nb"&gt;hasattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'cache'&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cache&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;"Get from cache {}"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;inner&lt;/span&gt;

    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;multiply&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__doc__&lt;/span&gt; &lt;span class="c"&gt;# Multiply 2 numbers&lt;/span&gt;
&lt;/pre&gt;
   &lt;/div&gt;
   &lt;p&gt;
    &lt;br/&gt;
   &lt;/p&gt;
   &lt;p&gt;
    Now the decorated function also retain important information from the original functions, that's neat!
   &lt;/p&gt;
   &lt;h2&gt;
    &lt;a aria-hidden="true" class="anchor" href="#higher-level" name="user-content-higher-level"&gt;
     &lt;span class="octicon octicon-link"&gt;
     &lt;/span&gt;
    &lt;/a&gt;
    Higher level
   &lt;/h2&gt;
   &lt;p&gt;
    The
    &lt;code&gt;
     memoize
    &lt;/code&gt;
    decorator doesn't need any customization, but there are a lot of pattern that requires some kind of customization. For instance, we want to apply a retry pattern to a function that follows special protocol. Obviously, we have to specify the number of retries, the delay between retry, and maybe a backoff factor to scale up the delay between failed attempts. This is how we do it:
   &lt;/p&gt;
   &lt;div class="highlight highlight-python"&gt;
    &lt;pre&gt;    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;math&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;retry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tries&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;delay&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;backoff&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;'''Retries a function or method until it returns True.&lt;/span&gt;
&lt;span class="sd"&gt;        delay sets the initial delay in seconds, and backoff sets the factor by which&lt;/span&gt;
&lt;span class="sd"&gt;        the delay should lengthen after each failure. backoff must be greater than 1,&lt;/span&gt;
&lt;span class="sd"&gt;        or else it isn't really a backoff. tries must be at least 0, and delay&lt;/span&gt;
&lt;span class="sd"&gt;        greater than 0.'''&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;backoff&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"backoff must be greater than 1"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;tries&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"tries must be 0 or greater"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;delay&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"delay must be greater than 0"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;deco_retry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f_retry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="n"&gt;mtries&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mdelay&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tries&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;delay&lt;/span&gt;

                &lt;span class="n"&gt;rv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;mtries&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;rv&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

                    &lt;span class="n"&gt;mtries&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
                    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mdelay&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="n"&gt;mdelay&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="n"&gt;backoff&lt;/span&gt;

                    &lt;span class="n"&gt;rv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;f_retry&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;deco_retry&lt;/span&gt;

    &lt;span class="nd"&gt;@retry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;delay&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;backoff&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_data&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;/pre&gt;
   &lt;/div&gt;
   &lt;p&gt;
    &lt;br/&gt;
   &lt;/p&gt;
   &lt;p&gt;
    Here, we define
    &lt;code&gt;
     retry
    &lt;/code&gt;
    as a function that returns a
    &lt;code&gt;
     decorator
    &lt;/code&gt;
    which will do the actual decoration of our original function with the parameters provided by
    &lt;code&gt;
     retry
    &lt;/code&gt;
    . We consider that
    &lt;code&gt;
     retry(1, delay=1, backoff=2)
    &lt;/code&gt;
    is called first, returning a function, then the decorator syntax
    &lt;code&gt;
     @
    &lt;/code&gt;
    is applied. This is just an addition of another layer on the decoration stack. In theory, you can have unlimited number of nested layer, but in practice, most of the time you only use 2.
   &lt;/p&gt;
   &lt;h2&gt;
    &lt;a aria-hidden="true" class="anchor" href="#decorator-class" name="user-content-decorator-class"&gt;
     &lt;span class="octicon octicon-link"&gt;
     &lt;/span&gt;
    &lt;/a&gt;
    Decorator class
   &lt;/h2&gt;
   &lt;p&gt;
    Using function as decorators is straight forward, and for storing persistent information we use closures over temporary variables. It'd be nice if the persistent information are class members.
   &lt;/p&gt;
   &lt;div class="highlight highlight-python"&gt;
    &lt;pre&gt;    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt;
    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;memoized&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;'''Decorator. Caches a function's return value each time it is called.&lt;/span&gt;
&lt;span class="sd"&gt;        If called later with the same arguments, the cached value is returned&lt;/span&gt;
&lt;span class="sd"&gt;        (not reevaluated).&lt;/span&gt;
&lt;span class="sd"&gt;        '''&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__doc__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__doc__&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cache&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__call__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;collections&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Hashable&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="c"&gt;# uncacheable. a list, for instance.&lt;/span&gt;
                &lt;span class="c"&gt;# better to not cache than blow up.&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__repr__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="sd"&gt;'''Return the function's docstring.'''&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__doc__&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__get__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;objtype&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="sd"&gt;'''Support instance methods.'''&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;functools&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;partial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__call__&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
   &lt;/div&gt;
   &lt;p&gt;
    Here, the decorator is an object of class
    &lt;code&gt;
     memoized
    &lt;/code&gt;
    and you can store all sort of information like you would a normal object.
   &lt;/p&gt;
   &lt;h2&gt;
    &lt;a aria-hidden="true" class="anchor" href="#class-decorator" name="user-content-class-decorator"&gt;
     &lt;span class="octicon octicon-link"&gt;
     &lt;/span&gt;
    &lt;/a&gt;
    Class decorator
   &lt;/h2&gt;
   &lt;p&gt;
    Up to now we're working with function decorator, what if we want to operate at class level? It's actually quite simple, we only have to define a function that takes a class instead of a function as the parameter.
   &lt;/p&gt;
   &lt;p&gt;
    Let's have a look at
    &lt;a href="https://hg.python.org/cpython/file/8e838598eed1/Lib/functools.py"&gt;
     functool.total_ordering
    &lt;/a&gt;
    . This decorator makes it so that you only have to define one of the four functions
    &lt;code&gt;
     __lt__
    &lt;/code&gt;
    ,
    &lt;code&gt;
     __le__
    &lt;/code&gt;
    ,
    &lt;code&gt;
     __gt__
    &lt;/code&gt;
    ,
    &lt;code&gt;
     __ge__
    &lt;/code&gt;
    , and the other three will be defined based on the provided function.
   &lt;/p&gt;
   &lt;div class="highlight highlight-python"&gt;
    &lt;pre&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;total_ordering&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;"""Class decorator that fills in missing ordering methods"""&lt;/span&gt;
        &lt;span class="n"&gt;convert&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s"&gt;'__lt__'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="s"&gt;'__gt__'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
                    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'__le__'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'__ge__'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;)],&lt;/span&gt;
            &lt;span class="s"&gt;'__le__'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="s"&gt;'__ge__'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'__lt__'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'__gt__'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;)],&lt;/span&gt;
            &lt;span class="s"&gt;'__gt__'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="s"&gt;'__lt__'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
                    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'__ge__'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'__le__'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;)],&lt;/span&gt;
            &lt;span class="s"&gt;'__ge__'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="s"&gt;'__le__'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'__gt__'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'__lt__'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="c"&gt;# Find user-defined comparisons (not those inherited from object).&lt;/span&gt;
        &lt;span class="n"&gt;roots&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;convert&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;getattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="nb"&gt;getattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;roots&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'must define at least one ordering operation: &amp;lt; &amp;gt; &amp;lt;= &amp;gt;='&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;roots&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;       &lt;span class="c"&gt;# prefer __lt__ to __le__ to __gt__ to __ge__&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;opname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;opfunc&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;convert&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;opname&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;roots&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;opfunc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;opname&lt;/span&gt;
                &lt;span class="n"&gt;opfunc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__doc__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;getattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;opname&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__doc__&lt;/span&gt;
                &lt;span class="nb"&gt;setattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;opname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;opfunc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;cls&lt;/span&gt;
&lt;/pre&gt;
   &lt;/div&gt;
   &lt;p&gt;
    &lt;br/&gt;
   &lt;/p&gt;
   &lt;p&gt;
    This code is pretty simple. It defines 3 other operators based on 2 operators:
    &lt;code&gt;
     __eq__
    &lt;/code&gt;
    and one of the four functions
    &lt;code&gt;
     __lt__
    &lt;/code&gt;
    ,
    &lt;code&gt;
     __le__
    &lt;/code&gt;
    ,
    &lt;code&gt;
     __gt__
    &lt;/code&gt;
    ,
    &lt;code&gt;
     __ge__
    &lt;/code&gt;
    .
   &lt;/p&gt;
   &lt;h2&gt;
    &lt;a aria-hidden="true" class="anchor" href="#useful-decorators" name="user-content-useful-decorators"&gt;
     &lt;span class="octicon octicon-link"&gt;
     &lt;/span&gt;
    &lt;/a&gt;
    Useful decorators
   &lt;/h2&gt;
   &lt;ul class="task-list"&gt;
    &lt;li&gt;
     property - used to quickly create a field from appropriate getter, setter and deleter.
    &lt;/li&gt;
   &lt;/ul&gt;
   &lt;h1&gt;
    &lt;a aria-hidden="true" class="anchor" href="#references" name="user-content-references"&gt;
     &lt;span class="octicon octicon-link"&gt;
     &lt;/span&gt;
    &lt;/a&gt;
    REFERENCES
   &lt;/h1&gt;
   &lt;ul class="task-list"&gt;
    &lt;li&gt;
     &lt;a href="https://wiki.python.org/moin/PythonDecoratorLibrary" title="Python Decorator Library"&gt;
      Python Decorator Library
     &lt;/a&gt;
    &lt;/li&gt;
   &lt;/ul&gt;
  &lt;/article&gt;
 &lt;/div&gt;
&lt;/div&gt;

            &lt;div class="git-meta"&gt;
                
                &lt;span&gt;Brought to you by &lt;a href="https://github.com/minhhh/pelican-git"&gt;pelican_git&lt;/a&gt;.&lt;/span&gt;
                
                &lt;span style="float: right; color: #369;"&gt;&lt;a href="https://github.com/minhhh/wiki/blob/master/py_decorators.md"&gt;view original&lt;/a&gt;&lt;/span&gt;
                &lt;span style="float: right; margin-right: 8px;"&gt;
                    &lt;a style="color: rgb(102, 102, 102);" href="https://github.com/minhhh/wiki/blob/master/py_decorators.md"&gt;py_decorators.md&lt;/a&gt;&lt;/span&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;&lt;/p&gt;</summary><category term="python"></category><category term="decorator"></category></entry><entry><title>Android CLI tool cheatsheet</title><link href="http://minhhh.github.io/posts/android-cli-tool-cheatsheet" rel="alternate"></link><updated>2014-10-03T00:00:00-04:00</updated><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2014-10-03:posts/android-cli-tool-cheatsheet</id><summary type="html">&lt;p&gt;&lt;div&gt;
    &lt;style type = "text/css" scoped&gt;
.git-content div {
    padding: 0;
    margin: 0;
}

.git-content .git-file {
    border: 1px solid #DEDEDE;
    margin-bottom: 1em;
}

.git-content .git-file .git-meta {
    background-color: #EAEAEA;
    color: #666666;
    font-size: 85%;
    overflow: hidden;
    padding: 0.5em;
}

.git-content .git-file .git-meta a {
    color: #336699;
}

.git-content .git-file .git-meta a:visited {
    color: #773377;
}

.git-content .git-file {
    background-color: #F8F8FF;
    border-bottom: 1px solid #DDDDDD;
    font-size: 100%;
    overflow: auto;
    word-wrap: normal;
}

.git-content .git-file pre {
    background: none repeat scroll 0 0 transparent !important;
    border: medium none !important;
    margin: 0 !important;
    padding: 0 !important;
}
    &lt;/style&gt;
    &lt;div class="git-content"&gt;
        &lt;div class="git-file"&gt;
            &lt;div class="file"&gt;
 &lt;div class="blob instapaper_body" id="readme"&gt;
  &lt;article class="markdown-body entry-content" itemprop="mainContentOfPage"&gt;
   &lt;h1&gt;
    &lt;a aria-hidden="true" class="anchor" href="#android-cli-cheatsheet" name="user-content-android-cli-cheatsheet"&gt;
     &lt;span class="octicon octicon-link"&gt;
     &lt;/span&gt;
    &lt;/a&gt;
    ANDROID CLI CHEATSHEET
   &lt;/h1&gt;
   &lt;h3&gt;
    &lt;a aria-hidden="true" class="anchor" href="#read-log" name="user-content-read-log"&gt;
     &lt;span class="octicon octicon-link"&gt;
     &lt;/span&gt;
    &lt;/a&gt;
    Read log
   &lt;/h3&gt;
   &lt;pre&gt;&lt;code&gt;adb logcat
adb logcat -v time

adb logcat *:V # Get all message in verbose mode
adb logcat xxxxxxx:V *:S # Get all message starts with xxxxx
&lt;/code&gt;&lt;/pre&gt;
   &lt;h3&gt;
    &lt;a aria-hidden="true" class="anchor" href="#list-package" name="user-content-list-package"&gt;
     &lt;span class="octicon octicon-link"&gt;
     &lt;/span&gt;
    &lt;/a&gt;
    List package
   &lt;/h3&gt;
   &lt;pre&gt;&lt;code&gt;adb shell pm list package
adb shell pm path com.example.someapp
adb pull /data/app/com.example.someapp-2.apk
&lt;/code&gt;&lt;/pre&gt;
   &lt;h3&gt;
    &lt;a aria-hidden="true" class="anchor" href="#run-a-particular-intent" name="user-content-run-a-particular-intent"&gt;
     &lt;span class="octicon octicon-link"&gt;
     &lt;/span&gt;
    &lt;/a&gt;
    Run a particular intent
   &lt;/h3&gt;
   &lt;pre&gt;&lt;code&gt;arun-us: # Launch the game for US on the Android device.
    adb shell 'am start -a $(MYPACKAGEID).RUN -e server http://$(MYIP):$(MYPORT) -e game $(game) -e nativeLog $(MYNATIVELOG)'
astop-us: # Launch the game for US on the Android device.
    adb shell 'am broadcast -a $(MYPACKAGEID).STOP'
&lt;/code&gt;&lt;/pre&gt;
   &lt;h3&gt;
    &lt;a aria-hidden="true" class="anchor" href="#install--uninstall" name="user-content-install--uninstall"&gt;
     &lt;span class="octicon octicon-link"&gt;
     &lt;/span&gt;
    &lt;/a&gt;
    Install / Uninstall
   &lt;/h3&gt;
   &lt;pre&gt;&lt;code&gt;adb install file.apk
adb install -r file.apk # replace

adb shell am start -a android.intent.action.DELETE -d package:&amp;lt;your app package&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
   &lt;h3&gt;
    &lt;a aria-hidden="true" class="anchor" href="#extracting-apk-file" name="user-content-extracting-apk-file"&gt;
     &lt;span class="octicon octicon-link"&gt;
     &lt;/span&gt;
    &lt;/a&gt;
    Extracting APK file
   &lt;/h3&gt;
   &lt;p&gt;
    Use
    &lt;code&gt;
     apktool
    &lt;/code&gt;
   &lt;/p&gt;
   &lt;pre&gt;&lt;code&gt;apk d /path/to/apk
open res/values/strings.xml
&lt;/code&gt;&lt;/pre&gt;
   &lt;h2&gt;
    &lt;a aria-hidden="true" class="anchor" href="#references" name="user-content-references"&gt;
     &lt;span class="octicon octicon-link"&gt;
     &lt;/span&gt;
    &lt;/a&gt;
    References
   &lt;/h2&gt;
   &lt;ul class="task-list"&gt;
    &lt;li&gt;
     &lt;a href="http://stackoverflow.com/questions/4191762/how-to-view-androidmanifest-xml-from-apk-file"&gt;
      View android manifset from APK
     &lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
     &lt;a href="http://stackoverflow.com/questions/4032960/how-do-i-get-an-apk-file-from-an-android-device"&gt;
      Get apk from Android device
     &lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
     &lt;a href="http://stackoverflow.com/questions/12949609/adb-shell-command-to-make-android-package-uninstall-dialog-appear"&gt;
      Adb shell to uninstall package
     &lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
     &lt;a href="http://wiki.cyanogenmod.org/w/Doc:_debugging_with_logcat"&gt;
      Debugging with logcat
     &lt;/a&gt;
    &lt;/li&gt;
   &lt;/ul&gt;
  &lt;/article&gt;
 &lt;/div&gt;
&lt;/div&gt;

            &lt;div class="git-meta"&gt;
                
                &lt;span&gt;Brought to you by &lt;a href="https://github.com/minhhh/pelican-git"&gt;pelican_git&lt;/a&gt;.&lt;/span&gt;
                
                &lt;span style="float: right; color: #369;"&gt;&lt;a href="https://github.com/minhhh/wiki/blob/master/android_cli.md"&gt;view original&lt;/a&gt;&lt;/span&gt;
                &lt;span style="float: right; margin-right: 8px;"&gt;
                    &lt;a style="color: rgb(102, 102, 102);" href="https://github.com/minhhh/wiki/blob/master/android_cli.md"&gt;android_cli.md&lt;/a&gt;&lt;/span&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;&lt;/p&gt;</summary><category term="android"></category><category term="adb"></category></entry><entry><title>Embed git file to pelican</title><link href="http://minhhh.github.io/posts/embed-git-file-to-pelican" rel="alternate"></link><updated>2014-09-11T00:00:00-04:00</updated><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2014-09-11:posts/embed-git-file-to-pelican</id><summary type="html">&lt;p&gt;Writing articles in github pages is nice, because you have github repository with all the nice features for document management, however sometimes it's not where I want my articles to reside. For instance, I want the articles about git to be in a separate &lt;code&gt;git&lt;/code&gt; repository.&lt;/p&gt;
&lt;p&gt;I have several solutions for this problem:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;I could duplicate the article. But I won't do this.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I could store the articles as &lt;code&gt;gist&lt;/code&gt; like this:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="gist"&gt;
    &lt;script src='https://gist.github.com/dc8b7c536d0fe9c7003f.js'&gt;&lt;/script&gt;
    &lt;noscript&gt;
        &lt;pre&gt;&lt;code&gt;# First
## Second
Third&lt;/code&gt;&lt;/pre&gt;
    &lt;/noscript&gt;
&lt;/div&gt;
&lt;p&gt;But I can't store a lot of related things in gist because that's the role of a real git repo.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I could store the articles in the normal &lt;code&gt;git&lt;/code&gt; repo, and embed it into the article in github page. I chose this approach for long articles. Like this:&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- &lt;script src="http://gistit-minhhh.appspot.com/github/robertkrimen/gist-it-example/blob/master/example.js"&gt;&lt;/script&gt; --&gt;

&lt;p&gt;There's already a nice tool to do this: &lt;a href="https://github.com/minhhh/gist-it"&gt;gist-it&lt;/a&gt;. Using it is really simple, just clone the repo and deploy it to an AppEngine instance. The downside of this is it does not generate &lt;code&gt;html&lt;/code&gt; code for &lt;code&gt;Markdown&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The best solution for me is to use a plugin for embedding git file into &lt;code&gt;pelican&lt;/code&gt; like this:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;div&gt;
    &lt;style type = "text/css" scoped&gt;
.git-content div {
    padding: 0;
    margin: 0;
}

.git-content .git-file {
    border: 1px solid #DEDEDE;
    margin-bottom: 1em;
}

.git-content .git-file .git-meta {
    background-color: #EAEAEA;
    color: #666666;
    font-size: 85%;
    overflow: hidden;
    padding: 0.5em;
}

.git-content .git-file .git-meta a {
    color: #336699;
}

.git-content .git-file .git-meta a:visited {
    color: #773377;
}

.git-content .git-file {
    background-color: #F8F8FF;
    border-bottom: 1px solid #DDDDDD;
    font-size: 100%;
    overflow: auto;
    word-wrap: normal;
}

.git-content .git-file pre {
    background: none repeat scroll 0 0 transparent !important;
    border: medium none !important;
    margin: 0 !important;
    padding: 0 !important;
}
    &lt;/style&gt;
    &lt;div class="git-content"&gt;
        &lt;div class="git-file"&gt;
            &lt;div class="file"&gt;
 &lt;div class="blob instapaper_body" id="readme"&gt;
  &lt;article class="markdown-body entry-content" itemprop="mainContentOfPage"&gt;
   &lt;h1&gt;
    &lt;a aria-hidden="true" class="anchor" href="#first-level-title" name="user-content-first-level-title"&gt;
     &lt;span class="octicon octicon-link"&gt;
     &lt;/span&gt;
    &lt;/a&gt;
    First level title
   &lt;/h1&gt;
   &lt;p&gt;
    Notes from
    &lt;a href="https://github.com/minhhh/wiki"&gt;
     link
    &lt;/a&gt;
    .
   &lt;/p&gt;
   &lt;h2&gt;
    &lt;a aria-hidden="true" class="anchor" href="#second-level-title" name="user-content-second-level-title"&gt;
     &lt;span class="octicon octicon-link"&gt;
     &lt;/span&gt;
    &lt;/a&gt;
    Second level title
   &lt;/h2&gt;
   &lt;p&gt;
    Quote some code with correct syntax highlight
   &lt;/p&gt;
   &lt;div class="highlight highlight-python"&gt;
    &lt;pre&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;/pre&gt;
   &lt;/div&gt;
   &lt;h3&gt;
    &lt;a aria-hidden="true" class="anchor" href="#third-level-title" name="user-content-third-level-title"&gt;
     &lt;span class="octicon octicon-link"&gt;
     &lt;/span&gt;
    &lt;/a&gt;
    Third level title
   &lt;/h3&gt;
   &lt;div class="highlight highlight-python"&gt;
    &lt;pre&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;/pre&gt;
   &lt;/div&gt;
   &lt;ul class="task-list"&gt;
    &lt;li&gt;
     First item
    &lt;/li&gt;
    &lt;li&gt;
     Second item
    &lt;/li&gt;
   &lt;/ul&gt;
  &lt;/article&gt;
 &lt;/div&gt;
&lt;/div&gt;

            &lt;div class="git-meta"&gt;
                
                &lt;span&gt;Brought to you by &lt;a href="https://github.com/minhhh/pelican-git"&gt;pelican_git&lt;/a&gt;.&lt;/span&gt;
                
                &lt;span style="float: right; color: #369;"&gt;&lt;a href="https://github.com/minhhh/wiki/blob/master/sample.md"&gt;view original&lt;/a&gt;&lt;/span&gt;
                &lt;span style="float: right; margin-right: 8px;"&gt;
                    &lt;a style="color: rgb(102, 102, 102);" href="https://github.com/minhhh/wiki/blob/master/sample.md"&gt;sample.md&lt;/a&gt;&lt;/span&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;&lt;/p&gt;</summary><category term="git"></category><category term="pelican"></category><category term="github"></category></entry><entry><title>How to rebase in Git</title><link href="http://minhhh.github.io/posts/how-to-rebase-in-git" rel="alternate"></link><updated>2014-09-09T00:00:00-04:00</updated><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2014-09-09:posts/how-to-rebase-in-git</id><summary type="html">&lt;p&gt;&lt;div&gt;
    &lt;style type = "text/css" scoped&gt;
.git-content div {
    padding: 0;
    margin: 0;
}

.git-content .git-file {
    border: 1px solid #DEDEDE;
    margin-bottom: 1em;
}

.git-content .git-file .git-meta {
    background-color: #EAEAEA;
    color: #666666;
    font-size: 85%;
    overflow: hidden;
    padding: 0.5em;
}

.git-content .git-file .git-meta a {
    color: #336699;
}

.git-content .git-file .git-meta a:visited {
    color: #773377;
}

.git-content .git-file {
    background-color: #F8F8FF;
    border-bottom: 1px solid #DDDDDD;
    font-size: 100%;
    overflow: auto;
    word-wrap: normal;
}

.git-content .git-file pre {
    background: none repeat scroll 0 0 transparent !important;
    border: medium none !important;
    margin: 0 !important;
    padding: 0 !important;
}
    &lt;/style&gt;
    &lt;div class="git-content"&gt;
        &lt;div class="git-file"&gt;
            &lt;div class="file"&gt;
 &lt;div class="blob instapaper_body" id="readme"&gt;
  &lt;article class="markdown-body entry-content" itemprop="mainContentOfPage"&gt;
   &lt;h1&gt;
    &lt;a aria-hidden="true" class="anchor" href="#rebase-feature-branch-into-develop-branch" name="user-content-rebase-feature-branch-into-develop-branch"&gt;
     &lt;span class="octicon octicon-link"&gt;
     &lt;/span&gt;
    &lt;/a&gt;
    Rebase feature branch into develop branch
   &lt;/h1&gt;
   &lt;p&gt;
    If you follow
    &lt;a href="http://nvie.com/posts/a-successful-git-branching-model/"&gt;
     A successful Git branching model
    &lt;/a&gt;
    , you will have to merge feature branches into develop from time to time. To make a beautiful linear tree in the develop branch, you would rebase instead of just merging. The following guide will outline the rebase process from beginning to end.
   &lt;/p&gt;
   &lt;h2&gt;
    &lt;a aria-hidden="true" class="anchor" href="#rebasing-one-branch-into-develop" name="user-content-rebasing-one-branch-into-develop"&gt;
     &lt;span class="octicon octicon-link"&gt;
     &lt;/span&gt;
    &lt;/a&gt;
    Rebasing one branch into develop
   &lt;/h2&gt;
   &lt;p&gt;
    Suppose your feature branch is
    &lt;code&gt;
     feature/add_css
    &lt;/code&gt;
   &lt;/p&gt;
   &lt;pre&gt;&lt;code&gt;# This will merge the latest develop to feature/css
git checkout develop
git pull
git checkout feature/add_css
git pull
git merge develop
git push

# Create a temporary rebase branch
git checkout develop
git checkout -b temp

# Merge feature branch and resolve a lot of conflicts
git merge feature/add_css

# Perform the rebase, you may have to resolve the conflict again
git rebase develop

# NOTE: Do not use git checkout (--theirs|–ours) path/to/file
# as it will cause trouble when you resolved a bad conflict then
# the subsequent merge may not be correct.

# This will merge the rebased item to develop.
git checkout develop
git merge feature/something_rebase

# (Important) Checks that there are no difference. This should resolve in no difference in the ideal case
git diff develop..feature/something

# (Important) Checks that the logs have been correctly integrated.
git log --graph

# Push once all checks have been completed.
git push

# Delete the temporary merge branch
git branch -D temp
&lt;/code&gt;&lt;/pre&gt;
   &lt;h2&gt;
    &lt;a aria-hidden="true" class="anchor" href="#rebasing-multiple-branches-into-develop" name="user-content-rebasing-multiple-branches-into-develop"&gt;
     &lt;span class="octicon octicon-link"&gt;
     &lt;/span&gt;
    &lt;/a&gt;
    Rebasing multiple branches into develop
   &lt;/h2&gt;
   &lt;p&gt;
    The correct way to do this is to rebase each branch one by one, but the next one will have to rebase based on the result of the last rebase. Suppose you're going to merge these 2 branches:
    &lt;code&gt;
     feature/add_css
    &lt;/code&gt;
    and
    &lt;code&gt;
     feature/add_html
    &lt;/code&gt;
   &lt;/p&gt;
   &lt;pre&gt;&lt;code&gt;# This will merge the latest develop to feature/css
git checkout develop
git pull
git checkout feature/add_css
git pull
git merge develop
git push

# Create a temporary rebase branch
git checkout develop
git checkout -b main_rebase

# Merge feature branch and resolve a lot of conflicts
git merge feature/add_css

# Perform the rebase, you may have to resolve the conflict again
git rebase develop

# Push this branch to remote so we can rebase other branch based on it
git push

# Now checkout another temporary branch
git checkout -b temp

# Merge feature branch and resolve a lot of conflicts
git merge feature/add_css

# (IMPORTANT) Perform the rebase based on the main rebase branch
git rebase main_rebase

# Merge the rebase items into main rebase branch
git checkout main_rebase
git merge temp

# (IMPORTANT) Checks that the logs have been correctly integrated.
git log --graph

# (IMPORTANT) Push main rebase branch to remote
git push

# Delete the temporary merge branch
git branch -D temp
&lt;/code&gt;&lt;/pre&gt;
   &lt;p&gt;
    Then repeat this process with the next branches one by one.
   &lt;/p&gt;
  &lt;/article&gt;
 &lt;/div&gt;
&lt;/div&gt;

            &lt;div class="git-meta"&gt;
                
                &lt;span&gt;Brought to you by &lt;a href="https://github.com/minhhh/pelican-git"&gt;pelican_git&lt;/a&gt;.&lt;/span&gt;
                
                &lt;span style="float: right; color: #369;"&gt;&lt;a href="https://github.com/minhhh/wiki/blob/master/git_rebase.md"&gt;view original&lt;/a&gt;&lt;/span&gt;
                &lt;span style="float: right; margin-right: 8px;"&gt;
                    &lt;a style="color: rgb(102, 102, 102);" href="https://github.com/minhhh/wiki/blob/master/git_rebase.md"&gt;git_rebase.md&lt;/a&gt;&lt;/span&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;&lt;/p&gt;</summary><category term="git"></category><category term="rebase"></category></entry><entry><title>Git cheat sheet</title><link href="http://minhhh.github.io/posts/git-cheat-sheet" rel="alternate"></link><updated>2014-09-05T00:00:00-04:00</updated><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2014-09-05:posts/git-cheat-sheet</id><summary type="html">&lt;p&gt;&lt;div&gt;
    &lt;style type = "text/css" scoped&gt;
.git-content div {
    padding: 0;
    margin: 0;
}

.git-content .git-file {
    border: 1px solid #DEDEDE;
    margin-bottom: 1em;
}

.git-content .git-file .git-meta {
    background-color: #EAEAEA;
    color: #666666;
    font-size: 85%;
    overflow: hidden;
    padding: 0.5em;
}

.git-content .git-file .git-meta a {
    color: #336699;
}

.git-content .git-file .git-meta a:visited {
    color: #773377;
}

.git-content .git-file {
    background-color: #F8F8FF;
    border-bottom: 1px solid #DDDDDD;
    font-size: 100%;
    overflow: auto;
    word-wrap: normal;
}

.git-content .git-file pre {
    background: none repeat scroll 0 0 transparent !important;
    border: medium none !important;
    margin: 0 !important;
    padding: 0 !important;
}
    &lt;/style&gt;
    &lt;div class="git-content"&gt;
        &lt;div class="git-file"&gt;
            &lt;div class="file"&gt;
 &lt;div class="blob instapaper_body" id="readme"&gt;
  &lt;article class="markdown-body entry-content" itemprop="mainContentOfPage"&gt;
   &lt;h1&gt;
    &lt;a aria-hidden="true" class="anchor" href="#git-cheat-sheet" name="user-content-git-cheat-sheet"&gt;
     &lt;span class="octicon octicon-link"&gt;
     &lt;/span&gt;
    &lt;/a&gt;
    Git Cheat Sheet
   &lt;/h1&gt;
   &lt;h2&gt;
    &lt;a aria-hidden="true" class="anchor" href="#toc" name="user-content-toc"&gt;
     &lt;span class="octicon octicon-link"&gt;
     &lt;/span&gt;
    &lt;/a&gt;
    TOC
   &lt;/h2&gt;
   &lt;ul class="task-list"&gt;
    &lt;li&gt;
     &lt;a href="#installation"&gt;
      Installation
     &lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
     &lt;a href="#basics"&gt;
      Basics
     &lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
     &lt;a href="#info"&gt;
      Info
     &lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
     &lt;a href="#exports"&gt;
      Exports
     &lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
     &lt;a href="#branching"&gt;
      Branching
     &lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
     &lt;a href="#undoing"&gt;
      Undoing
     &lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
     &lt;a href="#remotes"&gt;
      Remotes
     &lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
     &lt;a href="#submodules"&gt;
      Submodules
     &lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
     &lt;a href="#additional-resources"&gt;
      Additional resources
     &lt;/a&gt;
    &lt;/li&gt;
   &lt;/ul&gt;
   &lt;h3&gt;
    &lt;a aria-hidden="true" class="anchor" href="#installation" name="user-content-installation"&gt;
     &lt;span class="octicon octicon-link"&gt;
     &lt;/span&gt;
    &lt;/a&gt;
    Installation
   &lt;/h3&gt;
   &lt;ul class="task-list"&gt;
    &lt;li&gt;
     &lt;a href="http://git-scm.com/book"&gt;
      Pro Git
     &lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
     &lt;a href="http://serverfault.com/questions/194567/how-to-i-tell-git-for-windows-where-to-find-my-private-rsa-key"&gt;
      Set tortoisegit with SSH private key
     &lt;/a&gt;
    &lt;/li&gt;
   &lt;/ul&gt;
   &lt;h3&gt;
    &lt;a aria-hidden="true" class="anchor" href="#branching-model" name="user-content-branching-model"&gt;
     &lt;span class="octicon octicon-link"&gt;
     &lt;/span&gt;
    &lt;/a&gt;
    Branching model
   &lt;/h3&gt;
   &lt;p&gt;
    &lt;a href="http://nvie.com/posts/a-successful-git-branching-model/"&gt;
     Successful git branching model
    &lt;/a&gt;
   &lt;/p&gt;
   &lt;pre&gt;&lt;code&gt;origin/feature/update_layout
origin/hotfix/r20130305-1.1
origin/master
origin/release/r20130305
&lt;/code&gt;&lt;/pre&gt;
   &lt;h3&gt;
    &lt;a aria-hidden="true" class="anchor" href="#basics" name="user-content-basics"&gt;
     &lt;span class="octicon octicon-link"&gt;
     &lt;/span&gt;
    &lt;/a&gt;
    Basics
   &lt;/h3&gt;
   &lt;p&gt;
    &lt;a href="http://niklasschlimm.blogspot.com/2011/07/top-10-git-commands-for-newbie.html%7C"&gt;
     10 commands
    &lt;/a&gt;
   &lt;/p&gt;
   &lt;p&gt;
    &lt;a href="http://git.or.cz/course/svn.html"&gt;
     Git SVN crash course
    &lt;/a&gt;
   &lt;/p&gt;
   &lt;pre&gt;&lt;code&gt;# pull rebase create nicer merge tree, but be careful with it
git stash # stash any change
git pull --rebase
git stash pop # stash pop any change

git fetch -p # Bring the repository up to date without executing merge on the current branch

git add -u # add modified files but not new files
git add -A # add all untracked files

# Diff with remote
git diff master origin/master
&lt;/code&gt;&lt;/pre&gt;
   &lt;h3&gt;
    &lt;a aria-hidden="true" class="anchor" href="#info" name="user-content-info"&gt;
     &lt;span class="octicon octicon-link"&gt;
     &lt;/span&gt;
    &lt;/a&gt;
    Info
   &lt;/h3&gt;
   &lt;h4&gt;
    &lt;a aria-hidden="true" class="anchor" href="#find-commits-where-files-were-deleted" name="user-content-find-commits-where-files-were-deleted"&gt;
     &lt;span class="octicon octicon-link"&gt;
     &lt;/span&gt;
    &lt;/a&gt;
    Find commits where files were deleted
   &lt;/h4&gt;
   &lt;pre&gt;&lt;code&gt;git log --diff-filter=D --summary
&lt;/code&gt;&lt;/pre&gt;
   &lt;h4&gt;
    &lt;a aria-hidden="true" class="anchor" href="#checkout-deleted-file-in-the-working-tree" name="user-content-checkout-deleted-file-in-the-working-tree"&gt;
     &lt;span class="octicon octicon-link"&gt;
     &lt;/span&gt;
    &lt;/a&gt;
    Checkout deleted file in the working tree
   &lt;/h4&gt;
   &lt;pre&gt;&lt;code&gt;git checkout &amp;lt;sha1&amp;gt;^ &amp;lt;file&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
   &lt;h4&gt;
    &lt;a aria-hidden="true" class="anchor" href="#only-show-the-content-of-a-file-from-a-specific-revision" name="user-content-only-show-the-content-of-a-file-from-a-specific-revision"&gt;
     &lt;span class="octicon octicon-link"&gt;
     &lt;/span&gt;
    &lt;/a&gt;
    Only show the content of a file from a specific revision
   &lt;/h4&gt;
   &lt;pre&gt;&lt;code&gt;git show &amp;lt;sha1&amp;gt;^:&amp;lt;file&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
   &lt;h4&gt;
    &lt;a aria-hidden="true" class="anchor" href="#diff-2-files-at-specific-revision" name="user-content-diff-2-files-at-specific-revision"&gt;
     &lt;span class="octicon octicon-link"&gt;
     &lt;/span&gt;
    &lt;/a&gt;
    Diff 2 files at specific revision
   &lt;/h4&gt;
   &lt;pre&gt;&lt;code&gt;git diff &amp;lt;revision_1&amp;gt;:&amp;lt;file_1&amp;gt; &amp;lt;revision_2&amp;gt;:&amp;lt;file_2&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
   &lt;h4&gt;
    &lt;a aria-hidden="true" class="anchor" href="#show-changes-on-a-branch-that-is-not-merged-upstream" name="user-content-show-changes-on-a-branch-that-is-not-merged-upstream"&gt;
     &lt;span class="octicon octicon-link"&gt;
     &lt;/span&gt;
    &lt;/a&gt;
    Show changes on a branch that is not merged upstream
   &lt;/h4&gt;
   &lt;pre&gt;&lt;code&gt;git cherry &amp;lt;upstream_branch&amp;gt; &amp;lt;new_branch&amp;gt;
git log &amp;lt;upstream_branch&amp;gt;..&amp;lt;new_branch&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
   &lt;h4&gt;
    &lt;a aria-hidden="true" class="anchor" href="#show-log-with-changed-files" name="user-content-show-log-with-changed-files"&gt;
     &lt;span class="octicon octicon-link"&gt;
     &lt;/span&gt;
    &lt;/a&gt;
    Show log with changed files
   &lt;/h4&gt;
   &lt;pre&gt;&lt;code&gt;git log --name-only
git log --name-status
git log --stat
git log --decorate --graph --oneline --date-order # better visual
&lt;/code&gt;&lt;/pre&gt;
   &lt;h4&gt;
    &lt;a aria-hidden="true" class="anchor" href="#get-latest-tag-in-the-current-branch" name="user-content-get-latest-tag-in-the-current-branch"&gt;
     &lt;span class="octicon octicon-link"&gt;
     &lt;/span&gt;
    &lt;/a&gt;
    Get latest tag in the current branch
   &lt;/h4&gt;
   &lt;pre&gt;&lt;code&gt;git describe --exact-match --abbrev=0
git describe --abbrev=0 --tags
&lt;/code&gt;&lt;/pre&gt;
   &lt;h4&gt;
    &lt;a aria-hidden="true" class="anchor" href="#show-log-graph" name="user-content-show-log-graph"&gt;
     &lt;span class="octicon octicon-link"&gt;
     &lt;/span&gt;
    &lt;/a&gt;
    Show log graph
   &lt;/h4&gt;
   &lt;pre&gt;&lt;code&gt;git log origin master # Show log of a specific branch on remote
git log origin master --graph --decorate # to show colorful text and graph and the branch name of each log.

# A beautiful version
git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&amp;lt;%an&amp;gt;%Creset' --abbrev-commit

# Show git log then exit
git log | cat -

# Show log of a particular hash
git show &amp;lt;hash&amp;gt;
git show &amp;lt;hash&amp;gt; --stat # show only oneline for each change
&lt;/code&gt;&lt;/pre&gt;
   &lt;h4&gt;
    &lt;a aria-hidden="true" class="anchor" href="#get-current-url" name="user-content-get-current-url"&gt;
     &lt;span class="octicon octicon-link"&gt;
     &lt;/span&gt;
    &lt;/a&gt;
    Get current URL
   &lt;/h4&gt;
   &lt;pre&gt;&lt;code&gt;git remote show origin
&lt;/code&gt;&lt;/pre&gt;
   &lt;h4&gt;
    &lt;a aria-hidden="true" class="anchor" href="#get-brief-info-about-branches" name="user-content-get-brief-info-about-branches"&gt;
     &lt;span class="octicon octicon-link"&gt;
     &lt;/span&gt;
    &lt;/a&gt;
    Get brief info about branches
   &lt;/h4&gt;
   &lt;pre&gt;&lt;code&gt;git branch -lvv
&lt;/code&gt;&lt;/pre&gt;
   &lt;h3&gt;
    &lt;a aria-hidden="true" class="anchor" href="#exports" name="user-content-exports"&gt;
     &lt;span class="octicon octicon-link"&gt;
     &lt;/span&gt;
    &lt;/a&gt;
    Exports
   &lt;/h3&gt;
   &lt;pre&gt;&lt;code&gt;# From a repository
git checkout-index -a -f --prefix=/destination/path/

# Export remote
git archive --format=tar --remote=ssh://remote_server/remote_repository master | tar -xf -
&lt;/code&gt;&lt;/pre&gt;
   &lt;p&gt;
    &lt;a href="#user-content-toc"&gt;
     TOC
    &lt;/a&gt;
   &lt;/p&gt;
   &lt;h3&gt;
    &lt;a aria-hidden="true" class="anchor" href="#branching" name="user-content-branching"&gt;
     &lt;span class="octicon octicon-link"&gt;
     &lt;/span&gt;
    &lt;/a&gt;
    Branching
   &lt;/h3&gt;
   &lt;pre&gt;&lt;code&gt;# branch and create new branch
git checkout -b experimental

# delete unused branch
git branch -d experimental

# also delete on remote
git push origin --delete newfeature

# Rename a local branch
git branch -m &amp;lt;oldname&amp;gt; &amp;lt;newname&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
   &lt;p&gt;
    &lt;a href="#user-content-toc"&gt;
     TOC
    &lt;/a&gt;
   &lt;/p&gt;
   &lt;h3&gt;
    &lt;a aria-hidden="true" class="anchor" href="#undoing" name="user-content-undoing"&gt;
     &lt;span class="octicon octicon-link"&gt;
     &lt;/span&gt;
    &lt;/a&gt;
    Undoing
   &lt;/h3&gt;
   &lt;h4&gt;
    &lt;a aria-hidden="true" class="anchor" href="#undo-a-merge-or-pull" name="user-content-undo-a-merge-or-pull"&gt;
     &lt;span class="octicon octicon-link"&gt;
     &lt;/span&gt;
    &lt;/a&gt;
    Undo a merge or pull
   &lt;/h4&gt;
   &lt;p&gt;
    Check out
    &lt;a href="http://www.kernel.org/pub/software/scm/git/docs/git-reset.html"&gt;
     git reset
    &lt;/a&gt;
    for great explanation and
    &lt;a href="http://www.kernel.org/pub/software/scm/git/docs/git-reset.html#_examples"&gt;
     examples
    &lt;/a&gt;
    .
   &lt;/p&gt;
   &lt;pre&gt;&lt;code&gt;git reset --hard
&lt;/code&gt;&lt;/pre&gt;
   &lt;h4&gt;
    &lt;a aria-hidden="true" class="anchor" href="#undo-a-merge-or-pull-inside-a-dirty-work-tree" name="user-content-undo-a-merge-or-pull-inside-a-dirty-work-tree"&gt;
     &lt;span class="octicon octicon-link"&gt;
     &lt;/span&gt;
    &lt;/a&gt;
    Undo a merge or pull inside a dirty work tree
   &lt;/h4&gt;
   &lt;p&gt;
    Check out
    &lt;a href="http://www.kernel.org/pub/software/scm/git/docs/git-reset.html"&gt;
     git reset
    &lt;/a&gt;
    for great explanation and
    &lt;a href="http://www.kernel.org/pub/software/scm/git/docs/git-reset.html#_examples"&gt;
     examples
    &lt;/a&gt;
    .
   &lt;/p&gt;
   &lt;pre&gt;&lt;code&gt;git reset --merge ORIG_HEAD
&lt;/code&gt;&lt;/pre&gt;
   &lt;h4&gt;
    &lt;a aria-hidden="true" class="anchor" href="#revert-a-bad-commit" name="user-content-revert-a-bad-commit"&gt;
     &lt;span class="octicon octicon-link"&gt;
     &lt;/span&gt;
    &lt;/a&gt;
    Revert a bad commit
   &lt;/h4&gt;
   &lt;pre&gt;&lt;code&gt;git revert &amp;lt;sha1&amp;gt;

# Revert single file
git checkout -- filename

# Revert all files in current folder
git checkout .

# Remove all new files or folder
git clean -df
&lt;/code&gt;&lt;/pre&gt;
   &lt;h4&gt;
    &lt;a aria-hidden="true" class="anchor" href="#checkout-a-deleted-file-into-the-work-tree" name="user-content-checkout-a-deleted-file-into-the-work-tree"&gt;
     &lt;span class="octicon octicon-link"&gt;
     &lt;/span&gt;
    &lt;/a&gt;
    Checkout a deleted file into the work tree
   &lt;/h4&gt;
   &lt;pre&gt;&lt;code&gt;git checkout &amp;lt;sha1&amp;gt;^ -- &amp;lt;file&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
   &lt;h4&gt;
    &lt;a aria-hidden="true" class="anchor" href="#rewrite-authorcommiter-name-and-email" name="user-content-rewrite-authorcommiter-name-and-email"&gt;
     &lt;span class="octicon octicon-link"&gt;
     &lt;/span&gt;
    &lt;/a&gt;
    Rewrite author/commiter name and email
   &lt;/h4&gt;
   &lt;pre&gt;&lt;code&gt;git filter-branch --commit-filter '
        if [ "$GIT_COMMITTER_NAME" = "Ha.Minh" ];
        then
                GIT_COMMITTER_NAME="Ha.Minh";
                GIT_AUTHOR_NAME="Ha.Minh";
                GIT_COMMITTER_EMAIL="minhhh@minhhuyha.info";
                GIT_AUTHOR_EMAIL="minhhh@minhhuyha.info";
                git commit-tree "$@";
        else
                git commit-tree "$@";
        fi' HEAD
&lt;/code&gt;&lt;/pre&gt;
   &lt;p&gt;
    &lt;a href="#user-content-toc"&gt;
     TOC
    &lt;/a&gt;
   &lt;/p&gt;
   &lt;h3&gt;
    &lt;a aria-hidden="true" class="anchor" href="#remotes" name="user-content-remotes"&gt;
     &lt;span class="octicon octicon-link"&gt;
     &lt;/span&gt;
    &lt;/a&gt;
    Remotes
   &lt;/h3&gt;
   &lt;h4&gt;
    &lt;a aria-hidden="true" class="anchor" href="#create-local-branch-then-push-to-the-remote-without-tracking-" name="user-content-create-local-branch-then-push-to-the-remote-without-tracking-"&gt;
     &lt;span class="octicon octicon-link"&gt;
     &lt;/span&gt;
    &lt;/a&gt;
    Create local branch then push to the remote (without tracking !!!)
   &lt;/h4&gt;
   &lt;pre&gt;&lt;code&gt;git checkout -b &amp;lt;branch_name&amp;gt;
git push origin &amp;lt;branch_name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
   &lt;h4&gt;
    &lt;a aria-hidden="true" class="anchor" href="#crete-a-new-local-branch-by-pulling-a-remote-branch" name="user-content-crete-a-new-local-branch-by-pulling-a-remote-branch"&gt;
     &lt;span class="octicon octicon-link"&gt;
     &lt;/span&gt;
    &lt;/a&gt;
    Crete a new local branch by pulling a remote branch
   &lt;/h4&gt;
   &lt;pre&gt;&lt;code&gt;git pull origin &amp;lt;branch_name&amp;gt;                                 # without tracking
git checkout --track -b &amp;lt;branch_name&amp;gt; origin/&amp;lt;branch_name&amp;gt;    # with tracking
&lt;/code&gt;&lt;/pre&gt;
   &lt;h4&gt;
    &lt;a aria-hidden="true" class="anchor" href="#track-a-remote-branch-with-an-existing-local" name="user-content-track-a-remote-branch-with-an-existing-local"&gt;
     &lt;span class="octicon octicon-link"&gt;
     &lt;/span&gt;
    &lt;/a&gt;
    Track a remote branch with an existing local
   &lt;/h4&gt;
   &lt;pre&gt;&lt;code&gt;git branch --set-upstream &amp;lt;branch_name&amp;gt; origin/&amp;lt;branch_name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
   &lt;h4&gt;
    &lt;a aria-hidden="true" class="anchor" href="#delete-remote-branch" name="user-content-delete-remote-branch"&gt;
     &lt;span class="octicon octicon-link"&gt;
     &lt;/span&gt;
    &lt;/a&gt;
    Delete remote branch
   &lt;/h4&gt;
   &lt;pre&gt;&lt;code&gt;git push origin :heads/&amp;lt;branch_name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
   &lt;p&gt;
    or
   &lt;/p&gt;
   &lt;pre&gt;&lt;code&gt;git push origin :&amp;lt;branch_name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
   &lt;h4&gt;
    &lt;a aria-hidden="true" class="anchor" href="#prune-remote-tracking-branches-that-are-deleted-from-a-remote-repo" name="user-content-prune-remote-tracking-branches-that-are-deleted-from-a-remote-repo"&gt;
     &lt;span class="octicon octicon-link"&gt;
     &lt;/span&gt;
    &lt;/a&gt;
    Prune remote-tracking branches that are deleted from a remote repo
   &lt;/h4&gt;
   &lt;pre&gt;&lt;code&gt;git remote prune origin
&lt;/code&gt;&lt;/pre&gt;
   &lt;h4&gt;
    &lt;a aria-hidden="true" class="anchor" href="#change-remote-url" name="user-content-change-remote-url"&gt;
     &lt;span class="octicon octicon-link"&gt;
     &lt;/span&gt;
    &lt;/a&gt;
    Change remote URL
   &lt;/h4&gt;
   &lt;pre&gt;&lt;code&gt;git remote set-url origin http://new-example.com/repo.git
&lt;/code&gt;&lt;/pre&gt;
   &lt;p&gt;
    &lt;a href="#user-content-toc"&gt;
     TOC
    &lt;/a&gt;
   &lt;/p&gt;
   &lt;h3&gt;
    &lt;a aria-hidden="true" class="anchor" href="#submodules" name="user-content-submodules"&gt;
     &lt;span class="octicon octicon-link"&gt;
     &lt;/span&gt;
    &lt;/a&gt;
    Submodules
   &lt;/h3&gt;
   &lt;pre&gt;&lt;code&gt;# Add submodule to subdirectory
git submodule add &amp;lt;git@github ...&amp;gt; snipmate-snippets/snippets/

# update submodule
git submodule update --recursive

# Update submodules

git submodule foreach 'git checkout master &amp;amp;&amp;amp; git pull origin master'

# Update submodule's URL
#Edit the *.gitmodules* file, then run:
git submodule sync

# Delete submodule
git submodule deinit asubmodule
git rm asubmodule

# Note: asubmodule (no trailing slash)
# or, if you want to leave it in your working tree
git rm --cached asubmodule

#Get submodule hash
git ls-tree a9a796a [submodule_dir]
&lt;/code&gt;&lt;/pre&gt;
   &lt;p&gt;
    &lt;a href="#user-content-toc"&gt;
     TOC
    &lt;/a&gt;
   &lt;/p&gt;
   &lt;h4&gt;
    &lt;a aria-hidden="true" class="anchor" href="#migrate-from-bitbucket-to-github" name="user-content-migrate-from-bitbucket-to-github"&gt;
     &lt;span class="octicon octicon-link"&gt;
     &lt;/span&gt;
    &lt;/a&gt;
    Migrate from bitbucket to github
   &lt;/h4&gt;
   &lt;pre&gt;&lt;code&gt;cd $HOME/dev/Pipelines
git remote rename origin bitbucket
git remote add origin https://github.com/edwardaux/Pipelines.git
git push -u origin --all # pushes up the repo and its refs for the first time
git push -u origin --tags # pushes up any tags
&lt;/code&gt;&lt;/pre&gt;
   &lt;h3&gt;
    &lt;a aria-hidden="true" class="anchor" href="#additional-resources" name="user-content-additional-resources"&gt;
     &lt;span class="octicon octicon-link"&gt;
     &lt;/span&gt;
    &lt;/a&gt;
    Additional resources
   &lt;/h3&gt;
   &lt;ul class="task-list"&gt;
    &lt;li&gt;
     &lt;a href="http://stackoverflow.com/questions/9529497/what-is-origin-in-git"&gt;
      What is origin in GIT
     &lt;/a&gt;
    &lt;/li&gt;
   &lt;/ul&gt;
   &lt;p&gt;
    By saying
    &lt;code&gt;
     git push origin branchname
    &lt;/code&gt;
    you're saying to push to the origin repository. There's no requirement to name the remote repository origin, and there can be multiple remote repositories.
   &lt;/p&gt;
   &lt;ul class="task-list"&gt;
    &lt;li&gt;
     &lt;a href="http://longair.net/blog/2009/04/16/git-fetch-and-merge/"&gt;
      Fetch and Merge
     &lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
     &lt;a href="http://stackoverflow.com/questions/5683253/distributed-version-control-systems-and-the-enterprise-a-good-mix/5685757#5685757"&gt;
      Distributed Version Control Systems and the Enterprise
     &lt;/a&gt;
     &lt;ul class="task-list"&gt;
      &lt;li&gt;
       Explain how git fits into the enterprise environment
      &lt;/li&gt;
      &lt;li&gt;
       It seems that the only way to have fine-grained access control in git is to add another layer, such as
       &lt;code&gt;
        gitolite
       &lt;/code&gt;
      &lt;/li&gt;
     &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;
     &lt;a href="http://stackoverflow.com/questions/1662205/how-to-make-a-git-repository-read-only"&gt;
      How to make a git repository read-only?
     &lt;/a&gt;
     &lt;ul class="task-list"&gt;
      &lt;li&gt;
       Seems that there's no way to limit read access at folder level.
      &lt;/li&gt;
     &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;
     &lt;a href="http://stackoverflow.com/questions/2602546/how-do-i-git-fetch-and-git-merge-from-a-remote-tracking-branch-like-git-pu"&gt;
      Difference between git pull and fetch
     &lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
     &lt;a href="http://scottchacon.com/2011/08/31/github-flow.html"&gt;
      Github flow
     &lt;/a&gt;
    &lt;/li&gt;
   &lt;/ul&gt;
   &lt;p&gt;
    &lt;a href="#user-content-toc"&gt;
     TOC
    &lt;/a&gt;
   &lt;/p&gt;
  &lt;/article&gt;
 &lt;/div&gt;
&lt;/div&gt;

            &lt;div class="git-meta"&gt;
                
                &lt;span&gt;Brought to you by &lt;a href="https://github.com/minhhh/pelican-git"&gt;pelican_git&lt;/a&gt;.&lt;/span&gt;
                
                &lt;span style="float: right; color: #369;"&gt;&lt;a href="https://github.com/minhhh/wiki/blob/master/git_cheatsheet.md"&gt;view original&lt;/a&gt;&lt;/span&gt;
                &lt;span style="float: right; margin-right: 8px;"&gt;
                    &lt;a style="color: rgb(102, 102, 102);" href="https://github.com/minhhh/wiki/blob/master/git_cheatsheet.md"&gt;git_cheatsheet.md&lt;/a&gt;&lt;/span&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;&lt;/p&gt;</summary><category term="git"></category></entry><entry><title>Creating this blog</title><link href="http://minhhh.github.io/posts/creating-this-blog" rel="alternate"></link><updated>2014-06-07T00:00:00-04:00</updated><author><name>Ha.Minh</name></author><id>tag:minhhh.github.io,2014-06-07:posts/creating-this-blog</id><summary type="html">&lt;p&gt;When creating this blog, I used the following references:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://ntanjerome.org/blog/how-to-setup-github-user-page-with-pelican"&gt;Setup github page with pelican&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://mathamy.com/migrating-to-github-pages-using-pelican.html"&gt;Migrating to github pages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.macdrifter.com/2012/08/pelican-guide-moving-from-wordpress-and-initial-setup.html"&gt;Pelican Guide initial setup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.macdrifter.com/2012/08/moving-to-pelican-design-planning.html"&gt;Moving to Pelican planning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/streeter/pelican-gist"&gt;pelican-gist&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/minhhh/gist-it"&gt;gist-it&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="pelican"></category><category term="blog"></category><category term="github"></category></entry></feed>